(function () {
    'use strict';

    var ConsentModelType;
    (function (ConsentModelType) {
        ConsentModelType["Explicit"] = "Explicit";
        ConsentModelType["Implicit"] = "Implicit";
    })(ConsentModelType || (ConsentModelType = {}));
    var PublicEvents;
    (function (PublicEvents) {
        PublicEvents["ConsentChanged"] = "ConsentChanged";
        PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
        PublicEvents["ShowFirstPage"] = "ShowFirstPage";
        PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
        PublicEvents["AcceptAll"] = "AcceptAll";
        PublicEvents["RejectAll"] = "RejectAll";
        PublicEvents["ShowTemplate"] = "ShowTemplate";
        PublicEvents["CloseTemplate"] = "CloseTemplate";
        PublicEvents["UpdateConsent"] = "UpdateConsent";
        PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
        PublicEvents["FetchConfig"] = "FetchConfig";
        PublicEvents["QuestionsFormSubmitWithoutMetaData"] = "QuestionsFormSubmitWithoutMetaData";
        PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
        PublicEvents["ShowPreferences"] = "ShowPreferences";
        PublicEvents["ConsentPreference"] = "MSFTConsentPreference";
    })(PublicEvents || (PublicEvents = {}));
    var Events;
    (function (Events) {
        Events["Init"] = "Init";
        Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
        Events["ConfigReady"] = "ConfigReady";
    })(Events || (Events = {}));
    var SDKMode;
    (function (SDKMode) {
        SDKMode["Default"] = "Default";
        SDKMode["HeadLess"] = "HeadLess";
    })(SDKMode || (SDKMode = {}));
    var StyleType;
    (function (StyleType) {
        StyleType["Url"] = "Url";
        StyleType["Text"] = "Text";
    })(StyleType || (StyleType = {}));
    var Preference;
    (function (Preference) {
        Preference["OFF"] = "0";
        Preference["ON"] = "1";
    })(Preference || (Preference = {}));
    var Cookie;
    (function (Cookie) {
        Cookie["Consent"] = "msft-consent";
    })(Cookie || (Cookie = {}));
    var RegisteredDivType;
    (function (RegisteredDivType) {
        RegisteredDivType["Script"] = "script";
        RegisteredDivType["IFrame"] = "iframe";
    })(RegisteredDivType || (RegisteredDivType = {}));
    var NoticeType;
    (function (NoticeType) {
        NoticeType["TrackerCategory"] = "trackerCategory";
        NoticeType["Questions"] = "Questions";
    })(NoticeType || (NoticeType = {}));
    var ErrorStrings;
    (function (ErrorStrings) {
        ErrorStrings["TemplateError"] = "<b>There is something wrong with template. Please check logs.</b>";
    })(ErrorStrings || (ErrorStrings = {}));
    var IntervalUnits;
    (function (IntervalUnits) {
        IntervalUnits["day"] = "day";
        IntervalUnits["week"] = "week";
        IntervalUnits["month"] = "month";
        IntervalUnits["year"] = "year";
    })(IntervalUnits || (IntervalUnits = {}));
    var QuestionType;
    (function (QuestionType) {
        QuestionType["Text"] = "Text";
        QuestionType["Email"] = "Email";
        QuestionType["Radio"] = "Radio";
        QuestionType["MultiSelect"] = "MultiSelect";
        QuestionType["Select"] = "Select";
        QuestionType["Date"] = "Date";
        QuestionType["PhoneNumber"] = "PhoneNumber";
        QuestionType["CreditCard"] = "CreditCard";
        QuestionType["Number"] = "Number";
        QuestionType["MultiLineText"] = "multiLineText";
    })(QuestionType || (QuestionType = {}));
    var QuestionValidation;
    (function (QuestionValidation) {
        QuestionValidation["Required"] = "Required";
    })(QuestionValidation || (QuestionValidation = {}));
    var QuestionField;
    (function (QuestionField) {
        QuestionField["Question"] = "question";
        QuestionField["Placeholder"] = "placeholder";
        QuestionField["Options"] = "options";
    })(QuestionField || (QuestionField = {}));
    var ModelKind;
    (function (ModelKind) {
        ModelKind["WebConsentModel"] = "WebConsentModel";
        ModelKind["QuestionModel"] = "DSRSubmissionModel";
    })(ModelKind || (ModelKind = {}));
    var PackageKind;
    (function (PackageKind) {
        PackageKind["WebConsentPackage"] = "WebConsentPackage";
        PackageKind["FIDESPackage"] = "FIDESPackage";
        PackageKind["DSRSubmissionPackage"] = "DSRSubmissionPackage";
    })(PackageKind || (PackageKind = {}));
    var Template;
    (function (Template) {
        Template["Preferences"] = "Preferences";
    })(Template || (Template = {}));

    var BlockingServiceUtil = /** @class */ (function () {
        function BlockingServiceUtil() {
        }
        BlockingServiceUtil.shouldBlockTrackerSource = function (categories) {
            // Check for 'isEssential !== true' means if category is non-essential or unknown then block it.
            return Boolean(categories === null || categories === void 0 ? void 0 : categories.split(',').some(function (category) {
                var trackerCategory = window.__MSFT_SDK.Store.getters.applicableTrackerCategories.find(function (_a) {
                    var categoryName = _a.categoryName;
                    return categoryName === category;
                });
                // Block any unknown category
                return trackerCategory ? trackerCategory.isEssential !== true : true;
            }));
        };
        BlockingServiceUtil.shouldUnblockTrackerSource = function (categories) {
            return Boolean(categories === null || categories === void 0 ? void 0 : categories.split(',').every(function (category) {
                var _a;
                return ((_a = window.__MSFT_SDK.Store.getters.userConsent) === null || _a === void 0 ? void 0 : _a.preferences[category]) === Preference.ON;
            }));
        };
        BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE = 'text/blocked';
        BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE = 'msft-consent-categories';
        BlockingServiceUtil.MSFT_TRACKER_EXECUTION_ATTRIBUTE = 'msft-tracker-executed';
        BlockingServiceUtil.SRC_ATTRIBUTE = 'src';
        BlockingServiceUtil.DATASET_SRC_ATTRIBUTE = 'data-src';
        BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE = 'type';
        BlockingServiceUtil.MSFT_POST_CONSENT_SCRIPT_TYPE_ATTRIBUTE = 'msft-post-consent-type';
        BlockingServiceUtil.MSFT_CONSENT_IGNORE_ATTRIBUTE = 'msft-ignore-consent';
        return BlockingServiceUtil;
    }());

    var BlockingService = /** @class */ (function () {
        function BlockingService() {
            this.domObserver = null;
        }
        BlockingService.mutationCallback = function (mutationRecords) {
            mutationRecords.forEach(function (mutationRecord) {
                mutationRecord.addedNodes.forEach(function (addedNode) {
                    try {
                        if (addedNode.nodeType === 1 &&
                            addedNode.hasAttribute(BlockingServiceUtil.MSFT_CONSENT_IGNORE_ATTRIBUTE) === false) {
                            if (addedNode.nodeName.toLowerCase() ===
                                window.__MSFT_SDK.enums.RegisteredDivType.Script) {
                                BlockingService.scriptMutationObserver(addedNode);
                            }
                            else if (addedNode.nodeName.toLowerCase() ===
                                window.__MSFT_SDK.enums.RegisteredDivType.IFrame) {
                                BlockingService.iframeMutationObserver(addedNode);
                            }
                        }
                    }
                    catch (error) {
                        console.warn('Failed to block the node ', addedNode.nodeName, 'with error ', error);
                        window.__MSFT_SDK.Logger.warn('Failed to block tag ' + addedNode.nodeName);
                    }
                });
            });
        };
        BlockingService.scriptMutationObserver = function (scriptNode) {
            var type = scriptNode.type;
            var msftConsentCategories = scriptNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE);
            if (BlockingServiceUtil.shouldBlockTrackerSource(msftConsentCategories)) {
                window.__MSFT_SDK.Logger.info('Blocking script ' + scriptNode.src);
                if (!scriptNode.hasAttribute(BlockingServiceUtil.MSFT_TRACKER_EXECUTION_ATTRIBUTE)) {
                    scriptNode.setAttribute(BlockingServiceUtil.MSFT_POST_CONSENT_SCRIPT_TYPE_ATTRIBUTE, type);
                    scriptNode.setAttribute(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE, BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE);
                }
            }
            // Firefox has this additional event which prevents scripts from being executed
            var beforeScriptExecuteListener = function (event) {
                // Prevent only marked scripts from executing
                if (scriptNode.getAttribute(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE) ===
                    BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE)
                    event.preventDefault();
                scriptNode.removeEventListener('beforescriptexecute', beforeScriptExecuteListener);
            };
            scriptNode.addEventListener('beforescriptexecute', beforeScriptExecuteListener);
        };
        BlockingService.iframeMutationObserver = function (iframeNode) {
            var src = iframeNode.src;
            var msftConsentCategories = iframeNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE);
            if (BlockingServiceUtil.shouldBlockTrackerSource(msftConsentCategories)) {
                window.__MSFT_SDK.Logger.info('Blocking iframe ' + iframeNode.src);
                iframeNode.removeAttribute(BlockingServiceUtil.SRC_ATTRIBUTE);
                iframeNode.setAttribute(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE, src);
            }
        };
        BlockingService.unblock = function () {
            window.__MSFT_SDK.Logger.info('Tracker Blocking unblock is started');
            BlockingService.unblockScripts();
            BlockingService.unblockIFrames();
        };
        BlockingService.unblockScripts = function () {
            document
                .querySelectorAll("script[".concat(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE, "][").concat(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE, "=\"").concat(BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE, "\"]:not([").concat(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE, "=\"\"])"))
                .forEach(function (blockedNode) {
                var scriptNode = blockedNode;
                try {
                    var consentCategories = scriptNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE);
                    var shouldUnblockTrackerSource = BlockingServiceUtil.shouldUnblockTrackerSource(consentCategories);
                    if (shouldUnblockTrackerSource) {
                        window.__MSFT_SDK.Logger.info('Unblocking script ' + scriptNode.src);
                        var typeValue = scriptNode.getAttribute(BlockingServiceUtil.MSFT_POST_CONSENT_SCRIPT_TYPE_ATTRIBUTE);
                        typeValue =
                            typeValue != null ? typeValue : 'application/javascript';
                        var parentNode = scriptNode.parentNode;
                        parentNode === null || parentNode === void 0 ? void 0 : parentNode.removeChild(scriptNode);
                        var newNode = document.createElement('script');
                        for (var i = 0; i < scriptNode.attributes.length; i++) {
                            var attribute = scriptNode.attributes[i];
                            if (attribute.name !== 'type') {
                                newNode.setAttribute(attribute.name, scriptNode.attributes[i].value);
                            }
                            else {
                                newNode.setAttribute(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE, typeValue);
                            }
                        }
                        newNode.setAttribute(BlockingServiceUtil.MSFT_TRACKER_EXECUTION_ATTRIBUTE, 'true');
                        newNode.appendChild(document.createTextNode(scriptNode.innerHTML));
                        parentNode == null
                            ? document.head.appendChild(newNode)
                            : parentNode.appendChild(newNode);
                    }
                    else {
                        window.__MSFT_SDK.Logger.info("Not Unblocking script ".concat(scriptNode.src, " as consent not given"));
                    }
                }
                catch (error) {
                    window.__MSFT_SDK.Logger.info("Failed to unblock script ".concat(scriptNode.src));
                }
            });
        };
        BlockingService.unblockIFrames = function () {
            document
                .querySelectorAll("iframe[".concat(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE, "][").concat(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE, "]:not([").concat(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE, "=\"\"][").concat(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE, "=\"\"])"))
                .forEach(function (blockedNode) {
                var iframeNode = blockedNode;
                try {
                    var consentCategories = iframeNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE);
                    var shouldUnblockTrackerSource = BlockingServiceUtil.shouldUnblockTrackerSource(consentCategories);
                    if (shouldUnblockTrackerSource) {
                        window.__MSFT_SDK.Logger.info('Unblocking iframe ' + iframeNode.src);
                        var parentNode = iframeNode.parentNode;
                        parentNode === null || parentNode === void 0 ? void 0 : parentNode.removeChild(iframeNode);
                        var newNode = iframeNode.cloneNode(true);
                        var datasrc = newNode.getAttribute(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE);
                        datasrc = datasrc !== null ? datasrc : '';
                        newNode.setAttribute(BlockingServiceUtil.SRC_ATTRIBUTE, datasrc);
                        newNode.setAttribute(BlockingServiceUtil.MSFT_TRACKER_EXECUTION_ATTRIBUTE, 'true');
                        newNode.removeAttribute(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE);
                        parentNode == null
                            ? document.head.appendChild(newNode)
                            : parentNode.appendChild(newNode);
                    }
                    else {
                        window.__MSFT_SDK.Logger.info("Not Unblocking iframe ".concat(iframeNode.src, " as consent not given"));
                    }
                }
                catch (error) {
                    window.__MSFT_SDK.Logger.info("Failed to unblock iframe ".concat(iframeNode.src));
                }
            });
        };
        BlockingService.prototype.start = function (enableMutationObserver) {
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.ConsentChanged, BlockingService.unblock);
            this.domObserver = null;
            if (enableMutationObserver) {
                this.domObserver = new MutationObserver(function (mutationRecords) {
                    return BlockingService.mutationCallback(mutationRecords);
                });
                this.domObserver.observe(document.documentElement, {
                    childList: true,
                    subtree: true,
                });
                window.__MSFT_SDK.Logger.info('Started tracker blocking service');
            }
        };
        return BlockingService;
    }());
    var BlockingServiceInstance = new BlockingService();

    var PublicAPI = /** @class */ (function () {
        function PublicAPI() {
        }
        PublicAPI.getBlockingService = function () {
            return BlockingServiceInstance;
        };
        return PublicAPI;
    }());

    var _a;
    window.__MSFT_SDK.Helpers.AddPublicApis(PublicAPI);
    window.__MSFT_SDK.Helpers.exposeApis();
    if ((_a = window.__MSFT_SDK.Store.getters.packageConfigurations
        .isTrackerBlockingEnabled) !== null && _a !== void 0 ? _a : true) {
        PublicAPI.getBlockingService().start(true);
    }

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2tlckJsb2NraW5nLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9jb3JlL2NvbnN0YW50cy9lbnVtcy50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvdHJhY2tlckJsb2NraW5nL0Jsb2NraW5nU2VydmljZVV0aWwudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL3RyYWNrZXJCbG9ja2luZy9CbG9ja2luZ1NlcnZpY2UudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL3RyYWNrZXJCbG9ja2luZy9wdWJsaWNBcGkvaW5kZXgudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL3RyYWNrZXJCbG9ja2luZy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBDb25zZW50TW9kZWxUeXBlIHtcclxuICBFeHBsaWNpdCA9ICdFeHBsaWNpdCcsXHJcbiAgSW1wbGljaXQgPSAnSW1wbGljaXQnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBQdWJsaWNFdmVudHMge1xyXG4gIENvbnNlbnRDaGFuZ2VkID0gJ0NvbnNlbnRDaGFuZ2VkJyxcclxuICBTaG93Q29uc2VudE5vdGljZSA9ICdTaG93Q29uc2VudE5vdGljZScsXHJcbiAgU2hvd0ZpcnN0UGFnZSA9ICdTaG93Rmlyc3RQYWdlJyxcclxuICBDbG9zZUNvbnNlbnROb3RpY2UgPSAnQ2xvc2VDb25zZW50Tm90aWNlJyxcclxuICBBY2NlcHRBbGwgPSAnQWNjZXB0QWxsJyxcclxuICBSZWplY3RBbGwgPSAnUmVqZWN0QWxsJyxcclxuICBTaG93VGVtcGxhdGUgPSAnU2hvd1RlbXBsYXRlJyxcclxuICBDbG9zZVRlbXBsYXRlID0gJ0Nsb3NlVGVtcGxhdGUnLFxyXG4gIFVwZGF0ZUNvbnNlbnQgPSAnVXBkYXRlQ29uc2VudCcsXHJcbiAgQW5jaG9yVGFnQ2xpY2tlZCA9ICdBbmNob3JUYWdDbGlja2VkJyxcclxuICBGZXRjaENvbmZpZyA9ICdGZXRjaENvbmZpZycsXHJcbiAgUXVlc3Rpb25zRm9ybVN1Ym1pdFdpdGhvdXRNZXRhRGF0YSA9ICdRdWVzdGlvbnNGb3JtU3VibWl0V2l0aG91dE1ldGFEYXRhJyxcclxuICBRdWVzdGlvbnNGb3JtU3VibWl0ID0gJ1F1ZXN0aW9uc0Zvcm1TdWJtaXQnLFxyXG4gIFNob3dQcmVmZXJlbmNlcyA9ICdTaG93UHJlZmVyZW5jZXMnLFxyXG4gIENvbnNlbnRQcmVmZXJlbmNlID0gJ01TRlRDb25zZW50UHJlZmVyZW5jZScsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEV2ZW50cyB7XHJcbiAgSW5pdCA9ICdJbml0JyxcclxuICBDb3JlQ29uc2VudE1vZGVsU2VsZWN0ZWQgPSAnQ29yZUNvbnNlbnRNb2RlbFNlbGVjdGVkJyxcclxuICBDb25maWdSZWFkeSA9ICdDb25maWdSZWFkeScsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFNES01vZGUge1xyXG4gIERlZmF1bHQgPSAnRGVmYXVsdCcsXHJcbiAgSGVhZExlc3MgPSAnSGVhZExlc3MnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBTdHlsZVR5cGUge1xyXG4gIFVybCA9ICdVcmwnLFxyXG4gIFRleHQgPSAnVGV4dCcsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFByZWZlcmVuY2Uge1xyXG4gIE9GRiA9ICcwJyxcclxuICBPTiA9ICcxJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gQ29va2llIHtcclxuICBDb25zZW50ID0gJ21zZnQtY29uc2VudCcsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFJlZ2lzdGVyZWREaXZUeXBlIHtcclxuICBTY3JpcHQgPSAnc2NyaXB0JyxcclxuICBJRnJhbWUgPSAnaWZyYW1lJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gTm90aWNlVHlwZSB7XHJcbiAgVHJhY2tlckNhdGVnb3J5ID0gJ3RyYWNrZXJDYXRlZ29yeScsXHJcbiAgUXVlc3Rpb25zID0gJ1F1ZXN0aW9ucycsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEVycm9yU3RyaW5ncyB7XHJcbiAgVGVtcGxhdGVFcnJvciA9ICc8Yj5UaGVyZSBpcyBzb21ldGhpbmcgd3Jvbmcgd2l0aCB0ZW1wbGF0ZS4gUGxlYXNlIGNoZWNrIGxvZ3MuPC9iPicsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEludGVydmFsVW5pdHMge1xyXG4gIGRheSA9ICdkYXknLFxyXG4gIHdlZWsgPSAnd2VlaycsXHJcbiAgbW9udGggPSAnbW9udGgnLFxyXG4gIHllYXIgPSAneWVhcicsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFF1ZXN0aW9uVHlwZSB7XHJcbiAgVGV4dCA9ICdUZXh0JyxcclxuICBFbWFpbCA9ICdFbWFpbCcsXHJcbiAgUmFkaW8gPSAnUmFkaW8nLFxyXG4gIE11bHRpU2VsZWN0ID0gJ011bHRpU2VsZWN0JyxcclxuICBTZWxlY3QgPSAnU2VsZWN0JyxcclxuICBEYXRlID0gJ0RhdGUnLFxyXG4gIFBob25lTnVtYmVyID0gJ1Bob25lTnVtYmVyJyxcclxuICBDcmVkaXRDYXJkID0gJ0NyZWRpdENhcmQnLFxyXG4gIE51bWJlciA9ICdOdW1iZXInLFxyXG4gIE11bHRpTGluZVRleHQgPSAnbXVsdGlMaW5lVGV4dCcsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFF1ZXN0aW9uVmFsaWRhdGlvbiB7XHJcbiAgUmVxdWlyZWQgPSAnUmVxdWlyZWQnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBRdWVzdGlvbkZpZWxkIHtcclxuICBRdWVzdGlvbiA9ICdxdWVzdGlvbicsXHJcbiAgUGxhY2Vob2xkZXIgPSAncGxhY2Vob2xkZXInLFxyXG4gIE9wdGlvbnMgPSAnb3B0aW9ucycsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIE1vZGVsS2luZCB7XHJcbiAgV2ViQ29uc2VudE1vZGVsID0gJ1dlYkNvbnNlbnRNb2RlbCcsXHJcbiAgUXVlc3Rpb25Nb2RlbCA9ICdEU1JTdWJtaXNzaW9uTW9kZWwnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBQYWNrYWdlS2luZCB7XHJcbiAgV2ViQ29uc2VudFBhY2thZ2UgPSAnV2ViQ29uc2VudFBhY2thZ2UnLFxyXG4gIEZJREVTUGFja2FnZSA9ICdGSURFU1BhY2thZ2UnLFxyXG4gIERTUlN1Ym1pc3Npb25QYWNrYWdlID0gJ0RTUlN1Ym1pc3Npb25QYWNrYWdlJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gVGVtcGxhdGUge1xyXG4gIFByZWZlcmVuY2VzID0gJ1ByZWZlcmVuY2VzJyxcclxufVxyXG4iLCJpbXBvcnQgeyBQcmVmZXJlbmNlIH0gZnJvbSAnY29yZS9jb25zdGFudHMvZW51bXMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJsb2NraW5nU2VydmljZVV0aWwge1xyXG4gIHB1YmxpYyBzdGF0aWMgU0NSSVBUX0JMT0NLSU5HX1RZUEVfQVRUUklCVVRFX1ZBTFVFID0gJ3RleHQvYmxvY2tlZCc7XHJcbiAgcHVibGljIHN0YXRpYyBNU0ZUX0NPTlNFTlRfQ0FURUdPUklFU19BVFRSSUJVVEUgPSAnbXNmdC1jb25zZW50LWNhdGVnb3JpZXMnO1xyXG4gIHB1YmxpYyBzdGF0aWMgTVNGVF9UUkFDS0VSX0VYRUNVVElPTl9BVFRSSUJVVEUgPSAnbXNmdC10cmFja2VyLWV4ZWN1dGVkJztcclxuICBwdWJsaWMgc3RhdGljIFNSQ19BVFRSSUJVVEUgPSAnc3JjJztcclxuICBwdWJsaWMgc3RhdGljIERBVEFTRVRfU1JDX0FUVFJJQlVURSA9ICdkYXRhLXNyYyc7XHJcbiAgcHVibGljIHN0YXRpYyBTQ1JJUFRfVFlQRV9BVFRSSUJVVEUgPSAndHlwZSc7XHJcbiAgcHVibGljIHN0YXRpYyBNU0ZUX1BPU1RfQ09OU0VOVF9TQ1JJUFRfVFlQRV9BVFRSSUJVVEUgPVxyXG4gICAgJ21zZnQtcG9zdC1jb25zZW50LXR5cGUnO1xyXG4gIHB1YmxpYyBzdGF0aWMgTVNGVF9DT05TRU5UX0lHTk9SRV9BVFRSSUJVVEUgPSAnbXNmdC1pZ25vcmUtY29uc2VudCc7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgc2hvdWxkQmxvY2tUcmFja2VyU291cmNlKGNhdGVnb3JpZXM6IHN0cmluZyB8IG51bGwpOiBib29sZWFuIHtcclxuICAgIC8vIENoZWNrIGZvciAnaXNFc3NlbnRpYWwgIT09IHRydWUnIG1lYW5zIGlmIGNhdGVnb3J5IGlzIG5vbi1lc3NlbnRpYWwgb3IgdW5rbm93biB0aGVuIGJsb2NrIGl0LlxyXG4gICAgcmV0dXJuIEJvb2xlYW4oXHJcbiAgICAgIGNhdGVnb3JpZXM/LnNwbGl0KCcsJykuc29tZShjYXRlZ29yeSA9PiB7XHJcbiAgICAgICAgY29uc3QgdHJhY2tlckNhdGVnb3J5ID1cclxuICAgICAgICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMuYXBwbGljYWJsZVRyYWNrZXJDYXRlZ29yaWVzLmZpbmQoXHJcbiAgICAgICAgICAgICh7IGNhdGVnb3J5TmFtZSB9KSA9PiBjYXRlZ29yeU5hbWUgPT09IGNhdGVnb3J5LFxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gQmxvY2sgYW55IHVua25vd24gY2F0ZWdvcnlcclxuICAgICAgICByZXR1cm4gdHJhY2tlckNhdGVnb3J5ID8gdHJhY2tlckNhdGVnb3J5LmlzRXNzZW50aWFsICE9PSB0cnVlIDogdHJ1ZTtcclxuICAgICAgfSksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBzaG91bGRVbmJsb2NrVHJhY2tlclNvdXJjZShjYXRlZ29yaWVzOiBzdHJpbmcgfCBudWxsKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gQm9vbGVhbihcclxuICAgICAgY2F0ZWdvcmllc1xyXG4gICAgICAgID8uc3BsaXQoJywnKVxyXG4gICAgICAgIC5ldmVyeShcclxuICAgICAgICAgIGNhdGVnb3J5ID0+XHJcbiAgICAgICAgICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMudXNlckNvbnNlbnQ/LnByZWZlcmVuY2VzW1xyXG4gICAgICAgICAgICAgIGNhdGVnb3J5XHJcbiAgICAgICAgICAgIF0gPT09IFByZWZlcmVuY2UuT04sXHJcbiAgICAgICAgKSxcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJsb2NraW5nU2VydmljZVV0aWwgfSBmcm9tICcuL0Jsb2NraW5nU2VydmljZVV0aWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJsb2NraW5nU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBkb21PYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlciB8IG51bGwgPSBudWxsO1xyXG5cclxuICBwcml2YXRlIHN0YXRpYyBtdXRhdGlvbkNhbGxiYWNrKG11dGF0aW9uUmVjb3JkczogTXV0YXRpb25SZWNvcmRbXSk6IHZvaWQge1xyXG4gICAgbXV0YXRpb25SZWNvcmRzLmZvckVhY2gobXV0YXRpb25SZWNvcmQgPT4ge1xyXG4gICAgICBtdXRhdGlvblJlY29yZC5hZGRlZE5vZGVzLmZvckVhY2goYWRkZWROb2RlID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBhZGRlZE5vZGUubm9kZVR5cGUgPT09IDEgJiZcclxuICAgICAgICAgICAgKDxIVE1MRWxlbWVudD5hZGRlZE5vZGUpLmhhc0F0dHJpYnV0ZShcclxuICAgICAgICAgICAgICBCbG9ja2luZ1NlcnZpY2VVdGlsLk1TRlRfQ09OU0VOVF9JR05PUkVfQVRUUklCVVRFLFxyXG4gICAgICAgICAgICApID09PSBmYWxzZVxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICBhZGRlZE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT1cclxuICAgICAgICAgICAgICB3aW5kb3cuX19NU0ZUX1NESy5lbnVtcy5SZWdpc3RlcmVkRGl2VHlwZS5TY3JpcHRcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlLnNjcmlwdE11dGF0aW9uT2JzZXJ2ZXIoXHJcbiAgICAgICAgICAgICAgICA8SFRNTFNjcmlwdEVsZW1lbnQ+YWRkZWROb2RlLFxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgICAgYWRkZWROb2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09XHJcbiAgICAgICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuZW51bXMuUmVnaXN0ZXJlZERpdlR5cGUuSUZyYW1lXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIEJsb2NraW5nU2VydmljZS5pZnJhbWVNdXRhdGlvbk9ic2VydmVyKFxyXG4gICAgICAgICAgICAgICAgPEhUTUxJRnJhbWVFbGVtZW50PmFkZGVkTm9kZSxcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICAgJ0ZhaWxlZCB0byBibG9jayB0aGUgbm9kZSAnLFxyXG4gICAgICAgICAgICBhZGRlZE5vZGUubm9kZU5hbWUsXHJcbiAgICAgICAgICAgICd3aXRoIGVycm9yICcsXHJcbiAgICAgICAgICAgIGVycm9yLFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHdpbmRvdy5fX01TRlRfU0RLLkxvZ2dlci53YXJuKFxyXG4gICAgICAgICAgICAnRmFpbGVkIHRvIGJsb2NrIHRhZyAnICsgYWRkZWROb2RlLm5vZGVOYW1lLFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBzY3JpcHRNdXRhdGlvbk9ic2VydmVyKHNjcmlwdE5vZGU6IEhUTUxTY3JpcHRFbGVtZW50KTogdm9pZCB7XHJcbiAgICBjb25zdCB0eXBlID0gc2NyaXB0Tm9kZS50eXBlO1xyXG4gICAgY29uc3QgbXNmdENvbnNlbnRDYXRlZ29yaWVzID0gc2NyaXB0Tm9kZS5nZXRBdHRyaWJ1dGUoXHJcbiAgICAgIEJsb2NraW5nU2VydmljZVV0aWwuTVNGVF9DT05TRU5UX0NBVEVHT1JJRVNfQVRUUklCVVRFLFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoQmxvY2tpbmdTZXJ2aWNlVXRpbC5zaG91bGRCbG9ja1RyYWNrZXJTb3VyY2UobXNmdENvbnNlbnRDYXRlZ29yaWVzKSkge1xyXG4gICAgICB3aW5kb3cuX19NU0ZUX1NESy5Mb2dnZXIuaW5mbygnQmxvY2tpbmcgc2NyaXB0ICcgKyBzY3JpcHROb2RlLnNyYyk7XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgIXNjcmlwdE5vZGUuaGFzQXR0cmlidXRlKFxyXG4gICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX1RSQUNLRVJfRVhFQ1VUSU9OX0FUVFJJQlVURSxcclxuICAgICAgICApXHJcbiAgICAgICkge1xyXG4gICAgICAgIHNjcmlwdE5vZGUuc2V0QXR0cmlidXRlKFxyXG4gICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX1BPU1RfQ09OU0VOVF9TQ1JJUFRfVFlQRV9BVFRSSUJVVEUsXHJcbiAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgc2NyaXB0Tm9kZS5zZXRBdHRyaWJ1dGUoXHJcbiAgICAgICAgICBCbG9ja2luZ1NlcnZpY2VVdGlsLlNDUklQVF9UWVBFX0FUVFJJQlVURSxcclxuICAgICAgICAgIEJsb2NraW5nU2VydmljZVV0aWwuU0NSSVBUX0JMT0NLSU5HX1RZUEVfQVRUUklCVVRFX1ZBTFVFLFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBGaXJlZm94IGhhcyB0aGlzIGFkZGl0aW9uYWwgZXZlbnQgd2hpY2ggcHJldmVudHMgc2NyaXB0cyBmcm9tIGJlaW5nIGV4ZWN1dGVkXHJcbiAgICBjb25zdCBiZWZvcmVTY3JpcHRFeGVjdXRlTGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xyXG4gICAgICAvLyBQcmV2ZW50IG9ubHkgbWFya2VkIHNjcmlwdHMgZnJvbSBleGVjdXRpbmdcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHNjcmlwdE5vZGUuZ2V0QXR0cmlidXRlKEJsb2NraW5nU2VydmljZVV0aWwuU0NSSVBUX1RZUEVfQVRUUklCVVRFKSA9PT1cclxuICAgICAgICBCbG9ja2luZ1NlcnZpY2VVdGlsLlNDUklQVF9CTE9DS0lOR19UWVBFX0FUVFJJQlVURV9WQUxVRVxyXG4gICAgICApXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgc2NyaXB0Tm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICdiZWZvcmVzY3JpcHRleGVjdXRlJyxcclxuICAgICAgICBiZWZvcmVTY3JpcHRFeGVjdXRlTGlzdGVuZXIsXHJcbiAgICAgICk7XHJcbiAgICB9O1xyXG4gICAgc2NyaXB0Tm9kZS5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAnYmVmb3Jlc2NyaXB0ZXhlY3V0ZScsXHJcbiAgICAgIGJlZm9yZVNjcmlwdEV4ZWN1dGVMaXN0ZW5lcixcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBpZnJhbWVNdXRhdGlvbk9ic2VydmVyKGlmcmFtZU5vZGU6IEhUTUxJRnJhbWVFbGVtZW50KTogdm9pZCB7XHJcbiAgICBjb25zdCBzcmMgPSBpZnJhbWVOb2RlLnNyYztcclxuICAgIGNvbnN0IG1zZnRDb25zZW50Q2F0ZWdvcmllcyA9IGlmcmFtZU5vZGUuZ2V0QXR0cmlidXRlKFxyXG4gICAgICBCbG9ja2luZ1NlcnZpY2VVdGlsLk1TRlRfQ09OU0VOVF9DQVRFR09SSUVTX0FUVFJJQlVURSxcclxuICAgICk7XHJcblxyXG4gICAgaWYgKEJsb2NraW5nU2VydmljZVV0aWwuc2hvdWxkQmxvY2tUcmFja2VyU291cmNlKG1zZnRDb25zZW50Q2F0ZWdvcmllcykpIHtcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuTG9nZ2VyLmluZm8oJ0Jsb2NraW5nIGlmcmFtZSAnICsgaWZyYW1lTm9kZS5zcmMpO1xyXG5cclxuICAgICAgaWZyYW1lTm9kZS5yZW1vdmVBdHRyaWJ1dGUoQmxvY2tpbmdTZXJ2aWNlVXRpbC5TUkNfQVRUUklCVVRFKTtcclxuICAgICAgaWZyYW1lTm9kZS5zZXRBdHRyaWJ1dGUoQmxvY2tpbmdTZXJ2aWNlVXRpbC5EQVRBU0VUX1NSQ19BVFRSSUJVVEUsIHNyYyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyB1bmJsb2NrKCk6IHZvaWQge1xyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuTG9nZ2VyLmluZm8oJ1RyYWNrZXIgQmxvY2tpbmcgdW5ibG9jayBpcyBzdGFydGVkJyk7XHJcbiAgICBCbG9ja2luZ1NlcnZpY2UudW5ibG9ja1NjcmlwdHMoKTtcclxuICAgIEJsb2NraW5nU2VydmljZS51bmJsb2NrSUZyYW1lcygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgdW5ibG9ja1NjcmlwdHMoKTogdm9pZCB7XHJcbiAgICBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvckFsbChcclxuICAgICAgICBgc2NyaXB0WyR7QmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX0NPTlNFTlRfQ0FURUdPUklFU19BVFRSSUJVVEV9XVske0Jsb2NraW5nU2VydmljZVV0aWwuU0NSSVBUX1RZUEVfQVRUUklCVVRFfT1cIiR7QmxvY2tpbmdTZXJ2aWNlVXRpbC5TQ1JJUFRfQkxPQ0tJTkdfVFlQRV9BVFRSSUJVVEVfVkFMVUV9XCJdOm5vdChbJHtCbG9ja2luZ1NlcnZpY2VVdGlsLk1TRlRfQ09OU0VOVF9DQVRFR09SSUVTX0FUVFJJQlVURX09XCJcIl0pYCxcclxuICAgICAgKVxyXG4gICAgICAuZm9yRWFjaChibG9ja2VkTm9kZSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2NyaXB0Tm9kZSA9IDxIVE1MU2NyaXB0RWxlbWVudD5ibG9ja2VkTm9kZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgY29uc2VudENhdGVnb3JpZXMgPSBzY3JpcHROb2RlLmdldEF0dHJpYnV0ZShcclxuICAgICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX0NPTlNFTlRfQ0FURUdPUklFU19BVFRSSUJVVEUsXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHNob3VsZFVuYmxvY2tUcmFja2VyU291cmNlID1cclxuICAgICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5zaG91bGRVbmJsb2NrVHJhY2tlclNvdXJjZShjb25zZW50Q2F0ZWdvcmllcyk7XHJcblxyXG4gICAgICAgICAgaWYgKHNob3VsZFVuYmxvY2tUcmFja2VyU291cmNlKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5fX01TRlRfU0RLLkxvZ2dlci5pbmZvKFxyXG4gICAgICAgICAgICAgICdVbmJsb2NraW5nIHNjcmlwdCAnICsgc2NyaXB0Tm9kZS5zcmMsXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBsZXQgdHlwZVZhbHVlID0gc2NyaXB0Tm9kZS5nZXRBdHRyaWJ1dGUoXHJcbiAgICAgICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX1BPU1RfQ09OU0VOVF9TQ1JJUFRfVFlQRV9BVFRSSUJVVEUsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHR5cGVWYWx1ZSA9XHJcbiAgICAgICAgICAgICAgdHlwZVZhbHVlICE9IG51bGwgPyB0eXBlVmFsdWUgOiAnYXBwbGljYXRpb24vamF2YXNjcmlwdCc7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBzY3JpcHROb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKHNjcmlwdE5vZGUpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbmV3Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjcmlwdE5vZGUuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHNjcmlwdE5vZGUuYXR0cmlidXRlc1tpXTtcclxuICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgIT09ICd0eXBlJykge1xyXG4gICAgICAgICAgICAgICAgbmV3Tm9kZS5zZXRBdHRyaWJ1dGUoXHJcbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICBzY3JpcHROb2RlLmF0dHJpYnV0ZXNbaV0udmFsdWUsXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdOb2RlLnNldEF0dHJpYnV0ZShcclxuICAgICAgICAgICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5TQ1JJUFRfVFlQRV9BVFRSSUJVVEUsXHJcbiAgICAgICAgICAgICAgICAgIHR5cGVWYWx1ZSxcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBuZXdOb2RlLnNldEF0dHJpYnV0ZShcclxuICAgICAgICAgICAgICBCbG9ja2luZ1NlcnZpY2VVdGlsLk1TRlRfVFJBQ0tFUl9FWEVDVVRJT05fQVRUUklCVVRFLFxyXG4gICAgICAgICAgICAgICd0cnVlJyxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgbmV3Tm9kZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzY3JpcHROb2RlLmlubmVySFRNTCkpO1xyXG4gICAgICAgICAgICBwYXJlbnROb2RlID09IG51bGxcclxuICAgICAgICAgICAgICA/IGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobmV3Tm9kZSlcclxuICAgICAgICAgICAgICA6IHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQobmV3Tm9kZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aW5kb3cuX19NU0ZUX1NESy5Mb2dnZXIuaW5mbyhcclxuICAgICAgICAgICAgICBgTm90IFVuYmxvY2tpbmcgc2NyaXB0ICR7c2NyaXB0Tm9kZS5zcmN9IGFzIGNvbnNlbnQgbm90IGdpdmVuYCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuTG9nZ2VyLmluZm8oXHJcbiAgICAgICAgICAgIGBGYWlsZWQgdG8gdW5ibG9jayBzY3JpcHQgJHtzY3JpcHROb2RlLnNyY31gLFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgdW5ibG9ja0lGcmFtZXMoKTogdm9pZCB7XHJcbiAgICBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvckFsbChcclxuICAgICAgICBgaWZyYW1lWyR7QmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX0NPTlNFTlRfQ0FURUdPUklFU19BVFRSSUJVVEV9XVske0Jsb2NraW5nU2VydmljZVV0aWwuREFUQVNFVF9TUkNfQVRUUklCVVRFfV06bm90KFske0Jsb2NraW5nU2VydmljZVV0aWwuTVNGVF9DT05TRU5UX0NBVEVHT1JJRVNfQVRUUklCVVRFfT1cIlwiXVske0Jsb2NraW5nU2VydmljZVV0aWwuREFUQVNFVF9TUkNfQVRUUklCVVRFfT1cIlwiXSlgLFxyXG4gICAgICApXHJcbiAgICAgIC5mb3JFYWNoKGJsb2NrZWROb2RlID0+IHtcclxuICAgICAgICBjb25zdCBpZnJhbWVOb2RlID0gPEhUTUxJRnJhbWVFbGVtZW50PmJsb2NrZWROb2RlO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCBjb25zZW50Q2F0ZWdvcmllcyA9IGlmcmFtZU5vZGUuZ2V0QXR0cmlidXRlKFxyXG4gICAgICAgICAgICBCbG9ja2luZ1NlcnZpY2VVdGlsLk1TRlRfQ09OU0VOVF9DQVRFR09SSUVTX0FUVFJJQlVURSxcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgY29uc3Qgc2hvdWxkVW5ibG9ja1RyYWNrZXJTb3VyY2UgPVxyXG4gICAgICAgICAgICBCbG9ja2luZ1NlcnZpY2VVdGlsLnNob3VsZFVuYmxvY2tUcmFja2VyU291cmNlKGNvbnNlbnRDYXRlZ29yaWVzKTtcclxuXHJcbiAgICAgICAgICBpZiAoc2hvdWxkVW5ibG9ja1RyYWNrZXJTb3VyY2UpIHtcclxuICAgICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuTG9nZ2VyLmluZm8oXHJcbiAgICAgICAgICAgICAgJ1VuYmxvY2tpbmcgaWZyYW1lICcgKyBpZnJhbWVOb2RlLnNyYyxcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBpZnJhbWVOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKGlmcmFtZU5vZGUpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdOb2RlID0gPEhUTUxJRnJhbWVFbGVtZW50PmlmcmFtZU5vZGUuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgICAgICBsZXQgZGF0YXNyYyA9IG5ld05vZGUuZ2V0QXR0cmlidXRlKFxyXG4gICAgICAgICAgICAgIEJsb2NraW5nU2VydmljZVV0aWwuREFUQVNFVF9TUkNfQVRUUklCVVRFLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBkYXRhc3JjID0gZGF0YXNyYyAhPT0gbnVsbCA/IGRhdGFzcmMgOiAnJztcclxuICAgICAgICAgICAgbmV3Tm9kZS5zZXRBdHRyaWJ1dGUoQmxvY2tpbmdTZXJ2aWNlVXRpbC5TUkNfQVRUUklCVVRFLCBkYXRhc3JjKTtcclxuICAgICAgICAgICAgbmV3Tm9kZS5zZXRBdHRyaWJ1dGUoXHJcbiAgICAgICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX1RSQUNLRVJfRVhFQ1VUSU9OX0FUVFJJQlVURSxcclxuICAgICAgICAgICAgICAndHJ1ZScsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIG5ld05vZGUucmVtb3ZlQXR0cmlidXRlKEJsb2NraW5nU2VydmljZVV0aWwuREFUQVNFVF9TUkNfQVRUUklCVVRFKTtcclxuICAgICAgICAgICAgcGFyZW50Tm9kZSA9PSBudWxsXHJcbiAgICAgICAgICAgICAgPyBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG5ld05vZGUpXHJcbiAgICAgICAgICAgICAgOiBwYXJlbnROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuTG9nZ2VyLmluZm8oXHJcbiAgICAgICAgICAgICAgYE5vdCBVbmJsb2NraW5nIGlmcmFtZSAke2lmcmFtZU5vZGUuc3JjfSBhcyBjb25zZW50IG5vdCBnaXZlbmAsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIHdpbmRvdy5fX01TRlRfU0RLLkxvZ2dlci5pbmZvKFxyXG4gICAgICAgICAgICBgRmFpbGVkIHRvIHVuYmxvY2sgaWZyYW1lICR7aWZyYW1lTm9kZS5zcmN9YCxcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGFydChlbmFibGVNdXRhdGlvbk9ic2VydmVyOiBib29sZWFuKSB7XHJcbiAgICB3aW5kb3cuX19NU0ZUX1NESy5FdmVudEJ1cy5vbihcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuZW51bXMuUHVibGljRXZlbnRzLkNvbnNlbnRDaGFuZ2VkLFxyXG4gICAgICBCbG9ja2luZ1NlcnZpY2UudW5ibG9jayxcclxuICAgICk7XHJcbiAgICB0aGlzLmRvbU9ic2VydmVyID0gbnVsbDtcclxuICAgIGlmIChlbmFibGVNdXRhdGlvbk9ic2VydmVyKSB7XHJcbiAgICAgIHRoaXMuZG9tT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihcclxuICAgICAgICAobXV0YXRpb25SZWNvcmRzOiBNdXRhdGlvblJlY29yZFtdKSA9PlxyXG4gICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlLm11dGF0aW9uQ2FsbGJhY2sobXV0YXRpb25SZWNvcmRzKSxcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5kb21PYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwge1xyXG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgICAgICBzdWJ0cmVlOiB0cnVlLFxyXG4gICAgICB9KTtcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuTG9nZ2VyLmluZm8oJ1N0YXJ0ZWQgdHJhY2tlciBibG9ja2luZyBzZXJ2aWNlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQmxvY2tpbmdTZXJ2aWNlSW5zdGFuY2UgPSBuZXcgQmxvY2tpbmdTZXJ2aWNlKCk7XHJcbiIsImltcG9ydCB7IEJsb2NraW5nU2VydmljZUluc3RhbmNlLCBCbG9ja2luZ1NlcnZpY2UgfSBmcm9tICcuLi9CbG9ja2luZ1NlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFB1YmxpY0FQSSB7XHJcbiAgcHVibGljIHN0YXRpYyBnZXRCbG9ja2luZ1NlcnZpY2UoKTogQmxvY2tpbmdTZXJ2aWNlIHtcclxuICAgIHJldHVybiBCbG9ja2luZ1NlcnZpY2VJbnN0YW5jZTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUHVibGljQVBJIH0gZnJvbSAnLi9wdWJsaWNBcGknO1xyXG53aW5kb3cuX19NU0ZUX1NESy5IZWxwZXJzLkFkZFB1YmxpY0FwaXMoUHVibGljQVBJKTtcclxud2luZG93Ll9fTVNGVF9TREsuSGVscGVycy5leHBvc2VBcGlzKCk7XHJcblxyXG5pZiAoXHJcbiAgd2luZG93Ll9fTVNGVF9TREsuU3RvcmUuZ2V0dGVycy5wYWNrYWdlQ29uZmlndXJhdGlvbnNcclxuICAgIC5pc1RyYWNrZXJCbG9ja2luZ0VuYWJsZWQgPz9cclxuICB0cnVlXHJcbikge1xyXG4gIFB1YmxpY0FQSS5nZXRCbG9ja2luZ1NlcnZpY2UoKS5zdGFydCh0cnVlKTtcclxufVxyXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBQUEsSUFBWSxnQkFHWDtJQUhELFdBQVksZ0JBQWdCO1FBQzFCLHlDQUFxQixDQUFBO1FBQ3JCLHlDQUFxQixDQUFBO0lBQ3ZCLENBQUMsRUFIVyxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBRzNCO0lBRUQsSUFBWSxZQWdCWDtJQWhCRCxXQUFZLFlBQVk7UUFDdEIsaURBQWlDLENBQUE7UUFDakMsdURBQXVDLENBQUE7UUFDdkMsK0NBQStCLENBQUE7UUFDL0IseURBQXlDLENBQUE7UUFDekMsdUNBQXVCLENBQUE7UUFDdkIsdUNBQXVCLENBQUE7UUFDdkIsNkNBQTZCLENBQUE7UUFDN0IsK0NBQStCLENBQUE7UUFDL0IsK0NBQStCLENBQUE7UUFDL0IscURBQXFDLENBQUE7UUFDckMsMkNBQTJCLENBQUE7UUFDM0IseUZBQXlFLENBQUE7UUFDekUsMkRBQTJDLENBQUE7UUFDM0MsbURBQW1DLENBQUE7UUFDbkMsMkRBQTJDLENBQUE7SUFDN0MsQ0FBQyxFQWhCVyxZQUFZLEtBQVosWUFBWSxRQWdCdkI7SUFFRCxJQUFZLE1BSVg7SUFKRCxXQUFZLE1BQU07UUFDaEIsdUJBQWEsQ0FBQTtRQUNiLCtEQUFxRCxDQUFBO1FBQ3JELHFDQUEyQixDQUFBO0lBQzdCLENBQUMsRUFKVyxNQUFNLEtBQU4sTUFBTSxRQUlqQjtJQUVELElBQVksT0FHWDtJQUhELFdBQVksT0FBTztRQUNqQiw4QkFBbUIsQ0FBQTtRQUNuQixnQ0FBcUIsQ0FBQTtJQUN2QixDQUFDLEVBSFcsT0FBTyxLQUFQLE9BQU8sUUFHbEI7SUFFRCxJQUFZLFNBR1g7SUFIRCxXQUFZLFNBQVM7UUFDbkIsd0JBQVcsQ0FBQTtRQUNYLDBCQUFhLENBQUE7SUFDZixDQUFDLEVBSFcsU0FBUyxLQUFULFNBQVMsUUFHcEI7SUFFRCxJQUFZLFVBR1g7SUFIRCxXQUFZLFVBQVU7UUFDcEIsdUJBQVMsQ0FBQTtRQUNULHNCQUFRLENBQUE7SUFDVixDQUFDLEVBSFcsVUFBVSxLQUFWLFVBQVUsUUFHckI7SUFFRCxJQUFZLE1BRVg7SUFGRCxXQUFZLE1BQU07UUFDaEIsa0NBQXdCLENBQUE7SUFDMUIsQ0FBQyxFQUZXLE1BQU0sS0FBTixNQUFNLFFBRWpCO0lBRUQsSUFBWSxpQkFHWDtJQUhELFdBQVksaUJBQWlCO1FBQzNCLHNDQUFpQixDQUFBO1FBQ2pCLHNDQUFpQixDQUFBO0lBQ25CLENBQUMsRUFIVyxpQkFBaUIsS0FBakIsaUJBQWlCLFFBRzVCO0lBRUQsSUFBWSxVQUdYO0lBSEQsV0FBWSxVQUFVO1FBQ3BCLGlEQUFtQyxDQUFBO1FBQ25DLHFDQUF1QixDQUFBO0lBQ3pCLENBQUMsRUFIVyxVQUFVLEtBQVYsVUFBVSxRQUdyQjtJQUVELElBQVksWUFFWDtJQUZELFdBQVksWUFBWTtRQUN0QixtR0FBbUYsQ0FBQTtJQUNyRixDQUFDLEVBRlcsWUFBWSxLQUFaLFlBQVksUUFFdkI7SUFFRCxJQUFZLGFBS1g7SUFMRCxXQUFZLGFBQWE7UUFDdkIsNEJBQVcsQ0FBQTtRQUNYLDhCQUFhLENBQUE7UUFDYixnQ0FBZSxDQUFBO1FBQ2YsOEJBQWEsQ0FBQTtJQUNmLENBQUMsRUFMVyxhQUFhLEtBQWIsYUFBYSxRQUt4QjtJQUVELElBQVksWUFXWDtJQVhELFdBQVksWUFBWTtRQUN0Qiw2QkFBYSxDQUFBO1FBQ2IsK0JBQWUsQ0FBQTtRQUNmLCtCQUFlLENBQUE7UUFDZiwyQ0FBMkIsQ0FBQTtRQUMzQixpQ0FBaUIsQ0FBQTtRQUNqQiw2QkFBYSxDQUFBO1FBQ2IsMkNBQTJCLENBQUE7UUFDM0IseUNBQXlCLENBQUE7UUFDekIsaUNBQWlCLENBQUE7UUFDakIsK0NBQStCLENBQUE7SUFDakMsQ0FBQyxFQVhXLFlBQVksS0FBWixZQUFZLFFBV3ZCO0lBRUQsSUFBWSxrQkFFWDtJQUZELFdBQVksa0JBQWtCO1FBQzVCLDJDQUFxQixDQUFBO0lBQ3ZCLENBQUMsRUFGVyxrQkFBa0IsS0FBbEIsa0JBQWtCLFFBRTdCO0lBRUQsSUFBWSxhQUlYO0lBSkQsV0FBWSxhQUFhO1FBQ3ZCLHNDQUFxQixDQUFBO1FBQ3JCLDRDQUEyQixDQUFBO1FBQzNCLG9DQUFtQixDQUFBO0lBQ3JCLENBQUMsRUFKVyxhQUFhLEtBQWIsYUFBYSxRQUl4QjtJQUVELElBQVksU0FHWDtJQUhELFdBQVksU0FBUztRQUNuQixnREFBbUMsQ0FBQTtRQUNuQyxpREFBb0MsQ0FBQTtJQUN0QyxDQUFDLEVBSFcsU0FBUyxLQUFULFNBQVMsUUFHcEI7SUFFRCxJQUFZLFdBSVg7SUFKRCxXQUFZLFdBQVc7UUFDckIsc0RBQXVDLENBQUE7UUFDdkMsNENBQTZCLENBQUE7UUFDN0IsNERBQTZDLENBQUE7SUFDL0MsQ0FBQyxFQUpXLFdBQVcsS0FBWCxXQUFXLFFBSXRCO0lBRUQsSUFBWSxRQUVYO0lBRkQsV0FBWSxRQUFRO1FBQ2xCLHVDQUEyQixDQUFBO0lBQzdCLENBQUMsRUFGVyxRQUFRLEtBQVIsUUFBUTs7SUNyR3BCO1FBQUE7U0FzQ0M7UUEzQmUsNENBQXdCLEdBQXRDLFVBQXVDLFVBQXlCOztZQUU5RCxPQUFPLE9BQU8sQ0FDWixVQUFVLGFBQVYsVUFBVSx1QkFBVixVQUFVLENBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBQSxRQUFRO2dCQUNsQyxJQUFNLGVBQWUsR0FDbkIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FDOUQsVUFBQyxFQUFnQjt3QkFBZCxZQUFZLGtCQUFBO29CQUFPLE9BQUEsWUFBWSxLQUFLLFFBQVE7aUJBQUEsQ0FDaEQsQ0FBQzs7Z0JBR0osT0FBTyxlQUFlLEdBQUcsZUFBZSxDQUFDLFdBQVcsS0FBSyxJQUFJLEdBQUcsSUFBSSxDQUFDO2FBQ3RFLENBQUMsQ0FDSCxDQUFDO1NBQ0g7UUFFYSw4Q0FBMEIsR0FBeEMsVUFBeUMsVUFBeUI7WUFDaEUsT0FBTyxPQUFPLENBQ1osVUFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUNOLEtBQUssQ0FBQyxHQUFHLEVBQ1YsS0FBSyxDQUNKLFVBQUEsUUFBUTs7Z0JBQ04sT0FBQSxDQUFBLE1BQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsMENBQUUsV0FBVyxDQUN0RCxRQUFRLENBQ1QsTUFBSyxVQUFVLENBQUMsRUFBRSxDQUFBO2FBQUEsQ0FDdEIsQ0FDSixDQUFDO1NBQ0g7UUFwQ2Esd0RBQW9DLEdBQUcsY0FBYyxDQUFDO1FBQ3RELHFEQUFpQyxHQUFHLHlCQUF5QixDQUFDO1FBQzlELG9EQUFnQyxHQUFHLHVCQUF1QixDQUFDO1FBQzNELGlDQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLHlDQUFxQixHQUFHLFVBQVUsQ0FBQztRQUNuQyx5Q0FBcUIsR0FBRyxNQUFNLENBQUM7UUFDL0IsMkRBQXVDLEdBQ25ELHdCQUF3QixDQUFDO1FBQ2IsaURBQTZCLEdBQUcscUJBQXFCLENBQUM7UUE2QnRFLDBCQUFDO0tBdENEOztJQ0FBO1FBQUE7WUFDVSxnQkFBVyxHQUE0QixJQUFJLENBQUM7U0ErT3JEO1FBN09nQixnQ0FBZ0IsR0FBL0IsVUFBZ0MsZUFBaUM7WUFDL0QsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFBLGNBQWM7Z0JBQ3BDLGNBQWMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUztvQkFDekMsSUFBSTt3QkFDRixJQUNFLFNBQVMsQ0FBQyxRQUFRLEtBQUssQ0FBQzs0QkFDVixTQUFVLENBQUMsWUFBWSxDQUNuQyxtQkFBbUIsQ0FBQyw2QkFBNkIsQ0FDbEQsS0FBSyxLQUFLLEVBQ1g7NEJBQ0EsSUFDRSxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTtnQ0FDaEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUNoRDtnQ0FDQSxlQUFlLENBQUMsc0JBQXNCLENBQ2pCLFNBQVMsQ0FDN0IsQ0FBQzs2QkFDSDtpQ0FBTSxJQUNMLFNBQVMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFO2dDQUNoQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQ2hEO2dDQUNBLGVBQWUsQ0FBQyxzQkFBc0IsQ0FDakIsU0FBUyxDQUM3QixDQUFDOzZCQUNIO3lCQUNGO3FCQUNGO29CQUFDLE9BQU8sS0FBSyxFQUFFO3dCQUNkLE9BQU8sQ0FBQyxJQUFJLENBQ1YsMkJBQTJCLEVBQzNCLFNBQVMsQ0FBQyxRQUFRLEVBQ2xCLGFBQWEsRUFDYixLQUFLLENBQ04sQ0FBQzt3QkFDRixNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQzNCLHNCQUFzQixHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQzVDLENBQUM7cUJBQ0g7aUJBQ0YsQ0FBQyxDQUFDO2FBQ0osQ0FBQyxDQUFDO1NBQ0o7UUFFYyxzQ0FBc0IsR0FBckMsVUFBc0MsVUFBNkI7WUFDakUsSUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztZQUM3QixJQUFNLHFCQUFxQixHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQ25ELG1CQUFtQixDQUFDLGlDQUFpQyxDQUN0RCxDQUFDO1lBRUYsSUFBSSxtQkFBbUIsQ0FBQyx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO2dCQUN2RSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUVuRSxJQUNFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FDdEIsbUJBQW1CLENBQUMsZ0NBQWdDLENBQ3JELEVBQ0Q7b0JBQ0EsVUFBVSxDQUFDLFlBQVksQ0FDckIsbUJBQW1CLENBQUMsdUNBQXVDLEVBQzNELElBQUksQ0FDTCxDQUFDO29CQUNGLFVBQVUsQ0FBQyxZQUFZLENBQ3JCLG1CQUFtQixDQUFDLHFCQUFxQixFQUN6QyxtQkFBbUIsQ0FBQyxvQ0FBb0MsQ0FDekQsQ0FBQztpQkFDSDthQUNGOztZQUdELElBQU0sMkJBQTJCLEdBQUcsVUFBVSxLQUFVOztnQkFFdEQsSUFDRSxVQUFVLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLHFCQUFxQixDQUFDO29CQUNsRSxtQkFBbUIsQ0FBQyxvQ0FBb0M7b0JBRXhELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDekIsVUFBVSxDQUFDLG1CQUFtQixDQUM1QixxQkFBcUIsRUFDckIsMkJBQTJCLENBQzVCLENBQUM7YUFDSCxDQUFDO1lBQ0YsVUFBVSxDQUFDLGdCQUFnQixDQUN6QixxQkFBcUIsRUFDckIsMkJBQTJCLENBQzVCLENBQUM7U0FDSDtRQUVjLHNDQUFzQixHQUFyQyxVQUFzQyxVQUE2QjtZQUNqRSxJQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDO1lBQzNCLElBQU0scUJBQXFCLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FDbkQsbUJBQW1CLENBQUMsaUNBQWlDLENBQ3RELENBQUM7WUFFRixJQUFJLG1CQUFtQixDQUFDLHdCQUF3QixDQUFDLHFCQUFxQixDQUFDLEVBQUU7Z0JBQ3ZFLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBRW5FLFVBQVUsQ0FBQyxlQUFlLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQzlELFVBQVUsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMscUJBQXFCLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDekU7U0FDRjtRQUVjLHVCQUFPLEdBQXRCO1lBQ0UsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxDQUFDLENBQUM7WUFDckUsZUFBZSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ2pDLGVBQWUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUNsQztRQUVjLDhCQUFjLEdBQTdCO1lBQ0UsUUFBUTtpQkFDTCxnQkFBZ0IsQ0FDZixpQkFBVSxtQkFBbUIsQ0FBQyxpQ0FBaUMsZUFBSyxtQkFBbUIsQ0FBQyxxQkFBcUIsZ0JBQUssbUJBQW1CLENBQUMsb0NBQW9DLHNCQUFXLG1CQUFtQixDQUFDLGlDQUFpQyxZQUFPLENBQ2xQO2lCQUNBLE9BQU8sQ0FBQyxVQUFBLFdBQVc7Z0JBQ2xCLElBQU0sVUFBVSxHQUFzQixXQUFXLENBQUM7Z0JBQ2xELElBQUk7b0JBQ0YsSUFBTSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsWUFBWSxDQUMvQyxtQkFBbUIsQ0FBQyxpQ0FBaUMsQ0FDdEQsQ0FBQztvQkFFRixJQUFNLDBCQUEwQixHQUM5QixtQkFBbUIsQ0FBQywwQkFBMEIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO29CQUVwRSxJQUFJLDBCQUEwQixFQUFFO3dCQUM5QixNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQzNCLG9CQUFvQixHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQ3RDLENBQUM7d0JBRUYsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FDckMsbUJBQW1CLENBQUMsdUNBQXVDLENBQzVELENBQUM7d0JBQ0YsU0FBUzs0QkFDUCxTQUFTLElBQUksSUFBSSxHQUFHLFNBQVMsR0FBRyx3QkFBd0IsQ0FBQzt3QkFDM0QsSUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQzt3QkFDekMsVUFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQzt3QkFFcEMsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDakQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOzRCQUNyRCxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUMzQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFO2dDQUM3QixPQUFPLENBQUMsWUFBWSxDQUNsQixTQUFTLENBQUMsSUFBSSxFQUNkLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUMvQixDQUFDOzZCQUNIO2lDQUFNO2dDQUNMLE9BQU8sQ0FBQyxZQUFZLENBQ2xCLG1CQUFtQixDQUFDLHFCQUFxQixFQUN6QyxTQUFTLENBQ1YsQ0FBQzs2QkFDSDt5QkFDRjt3QkFFRCxPQUFPLENBQUMsWUFBWSxDQUNsQixtQkFBbUIsQ0FBQyxnQ0FBZ0MsRUFDcEQsTUFBTSxDQUNQLENBQUM7d0JBQ0YsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO3dCQUNuRSxVQUFVLElBQUksSUFBSTs4QkFDZCxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7OEJBQ2xDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7cUJBQ3JDO3lCQUFNO3dCQUNMLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDM0IsZ0NBQXlCLFVBQVUsQ0FBQyxHQUFHLDBCQUF1QixDQUMvRCxDQUFDO3FCQUNIO2lCQUNGO2dCQUFDLE9BQU8sS0FBSyxFQUFFO29CQUNkLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDM0IsbUNBQTRCLFVBQVUsQ0FBQyxHQUFHLENBQUUsQ0FDN0MsQ0FBQztpQkFDSDthQUNGLENBQUMsQ0FBQztTQUNOO1FBRWMsOEJBQWMsR0FBN0I7WUFDRSxRQUFRO2lCQUNMLGdCQUFnQixDQUNmLGlCQUFVLG1CQUFtQixDQUFDLGlDQUFpQyxlQUFLLG1CQUFtQixDQUFDLHFCQUFxQixvQkFBVSxtQkFBbUIsQ0FBQyxpQ0FBaUMsb0JBQVEsbUJBQW1CLENBQUMscUJBQXFCLFlBQU8sQ0FDck87aUJBQ0EsT0FBTyxDQUFDLFVBQUEsV0FBVztnQkFDbEIsSUFBTSxVQUFVLEdBQXNCLFdBQVcsQ0FBQztnQkFDbEQsSUFBSTtvQkFDRixJQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQy9DLG1CQUFtQixDQUFDLGlDQUFpQyxDQUN0RCxDQUFDO29CQUVGLElBQU0sMEJBQTBCLEdBQzlCLG1CQUFtQixDQUFDLDBCQUEwQixDQUFDLGlCQUFpQixDQUFDLENBQUM7b0JBRXBFLElBQUksMEJBQTBCLEVBQUU7d0JBQzlCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDM0Isb0JBQW9CLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FDdEMsQ0FBQzt3QkFFRixJQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDO3dCQUN6QyxVQUFVLGFBQVYsVUFBVSx1QkFBVixVQUFVLENBQUUsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO3dCQUNwQyxJQUFNLE9BQU8sR0FBc0IsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDOUQsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FDaEMsbUJBQW1CLENBQUMscUJBQXFCLENBQzFDLENBQUM7d0JBQ0YsT0FBTyxHQUFHLE9BQU8sS0FBSyxJQUFJLEdBQUcsT0FBTyxHQUFHLEVBQUUsQ0FBQzt3QkFDMUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7d0JBQ2pFLE9BQU8sQ0FBQyxZQUFZLENBQ2xCLG1CQUFtQixDQUFDLGdDQUFnQyxFQUNwRCxNQUFNLENBQ1AsQ0FBQzt3QkFDRixPQUFPLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLHFCQUFxQixDQUFDLENBQUM7d0JBQ25FLFVBQVUsSUFBSSxJQUFJOzhCQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQzs4QkFDbEMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztxQkFDckM7eUJBQU07d0JBQ0wsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUMzQixnQ0FBeUIsVUFBVSxDQUFDLEdBQUcsMEJBQXVCLENBQy9ELENBQUM7cUJBQ0g7aUJBQ0Y7Z0JBQUMsT0FBTyxLQUFLLEVBQUU7b0JBQ2QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUMzQixtQ0FBNEIsVUFBVSxDQUFDLEdBQUcsQ0FBRSxDQUM3QyxDQUFDO2lCQUNIO2FBQ0YsQ0FBQyxDQUFDO1NBQ047UUFFTSwrQkFBSyxHQUFaLFVBQWEsc0JBQStCO1lBQzFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FDM0IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFDbkQsZUFBZSxDQUFDLE9BQU8sQ0FDeEIsQ0FBQztZQUNGLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1lBQ3hCLElBQUksc0JBQXNCLEVBQUU7Z0JBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxnQkFBZ0IsQ0FDckMsVUFBQyxlQUFpQztvQkFDaEMsT0FBQSxlQUFlLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDO2lCQUFBLENBQ3BELENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRTtvQkFDakQsU0FBUyxFQUFFLElBQUk7b0JBQ2YsT0FBTyxFQUFFLElBQUk7aUJBQ2QsQ0FBQyxDQUFDO2dCQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO2FBQ25FO1NBQ0Y7UUFDSCxzQkFBQztJQUFELENBQUMsSUFBQTtJQUVNLElBQU0sdUJBQXVCLEdBQUcsSUFBSSxlQUFlLEVBQUU7O0lDbFA1RDtRQUFBO1NBSUM7UUFIZSw0QkFBa0IsR0FBaEM7WUFDRSxPQUFPLHVCQUF1QixDQUFDO1NBQ2hDO1FBQ0gsZ0JBQUM7SUFBRCxDQUFDOzs7SUNMRCxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbkQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7SUFFdkMsSUFDRSxNQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUI7U0FDbEQsd0JBQXdCLG1DQUMzQixJQUFJLEVBQ0o7UUFDQSxTQUFTLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Ozs7Ozs7In0=
