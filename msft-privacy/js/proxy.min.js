(function () {
    'use strict';

    window['disableQuestionFormSubmit'] = function () {
        document.querySelectorAll('[msft-questionnaire-form-submit]').forEach(function (elm) {
            elm.setAttribute('disabled', '');
        });
    };
    window['enableQuestionFormSubmit'] = function () {
        document.querySelectorAll('[msft-questionnaire-form-submit]').forEach(function (elm) {
            elm.removeAttribute('disabled');
        });
    };
    var msftCallbackFunction = function (event) {
        event.preventDefault();
        var formData = new FormData(event.target);
        var object = {};
        formData.forEach(function (value, key) {
            if (!Reflect.has(object, key)) {
                object[key] = value;
                return;
            }
            if (!Array.isArray(object[key])) {
                object[key] = [object[key]];
            }
            object[key].push(value);
        });
        window.MSFTConsent.trigger('QuestionsFormSubmitWithoutMetaData', {
            data: object,
        });
    };
    var registerHandlers = function () {
        //handler for accept all button
        document.querySelectorAll('[msft-consent-accept-all]').forEach(function (elm) {
            elm.addEventListener('click', function () {
                window.MSFTConsent.trigger('AcceptAll');
                window.MSFTConsent.trigger('CloseConsentNotice');
            });
        });
        //handler for open preferences button
        document.querySelectorAll('[msft-consent-open-preferences]').forEach(function (elm) {
            elm.addEventListener('click', function () {
                window.MSFTConsent.trigger('ShowTemplate', { templateId: 'Preferences' });
                window.MSFTConsent.trigger('CloseConsentNotice');
            });
        });
        //handler for decline all button
        document.querySelectorAll('[msft-consent-decline-all]').forEach(function (elm) {
            elm.addEventListener('click', function () {
                window.MSFTConsent.trigger('RejectAll');
                window.MSFTConsent.trigger('CloseConsentNotice');
            });
        });
        //handler for save preferences button
        document.querySelectorAll('[msft-consent-save-preferences]').forEach(function (elm) {
            elm.addEventListener('click', function () {
                var trackerCategoriesSelectors = document.querySelectorAll('.msft-consent-tracker-category');
                var currentPreferences = { preferences: {} };
                trackerCategoriesSelectors.forEach(function (category) {
                    currentPreferences.preferences[category.getElementsByTagName('input')[0].id] = category.getElementsByTagName('input')[0].checked ? '1' : '0';
                });
                window.MSFTConsent.trigger('UpdateConsent', {
                    consent: currentPreferences,
                });
                window.MSFTConsent.trigger('CloseTemplate', {
                    templateId: 'Preferences',
                });
                window.MSFTConsent.trigger('CloseConsentNotice');
            });
        });
        //handler for close preferences button
        document.querySelectorAll('[msft-consent-close-preferences]').forEach(function (elm) {
            elm.addEventListener('click', function () {
                window.MSFTConsent.trigger('CloseTemplate', {
                    templateId: 'Preferences',
                });
                window.MSFTConsent.trigger('ShowConsentNotice');
            });
        });
        //handler for form submit
        document.querySelectorAll('[msft-questionnaire-form]').forEach(function (elm) {
            elm.addEventListener('submit', msftCallbackFunction);
        });
    };
    if (document.readyState !== 'loading') {
        registerHandlers();
    }
    else {
        document.addEventListener('DOMContentLoaded', function () {
            registerHandlers();
        });
    }

    var addProxyMethods = function () {
        Promise.resolve().then(function () { return anchorClickHandler; });
        Promise.resolve().then(function () { return proxy; }).then(function (_a) {
            var callMethod = _a.callMethod, sendMessage = _a.sendMessage;
            window.MSFTConsent = {};
            var methodsWithReturnType = ['getConsent', 'getTrackerCategories'];
            var methodsWithoutReturnType = ['trigger', 'showChangeSettingsModal'];
            methodsWithoutReturnType.forEach(function (methodName) {
                window.MSFTConsent[methodName] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    sendMessage(methodName, args);
                };
            });
            methodsWithReturnType.forEach(function (methodName) {
                window.MSFTConsent[methodName] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return callMethod(methodName, args);
                };
            });
        });
    };
    if (!msftData.renderTemplateWithoutIframe) {
        addProxyMethods();
    }

    var ConsentModelType;
    (function (ConsentModelType) {
        ConsentModelType["Explicit"] = "Explicit";
        ConsentModelType["Implicit"] = "Implicit";
    })(ConsentModelType || (ConsentModelType = {}));
    var PublicEvents;
    (function (PublicEvents) {
        PublicEvents["ConsentChanged"] = "ConsentChanged";
        PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
        PublicEvents["ShowFirstPage"] = "ShowFirstPage";
        PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
        PublicEvents["AcceptAll"] = "AcceptAll";
        PublicEvents["RejectAll"] = "RejectAll";
        PublicEvents["ShowTemplate"] = "ShowTemplate";
        PublicEvents["CloseTemplate"] = "CloseTemplate";
        PublicEvents["UpdateConsent"] = "UpdateConsent";
        PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
        PublicEvents["FetchConfig"] = "FetchConfig";
        PublicEvents["QuestionsFormSubmitWithoutMetaData"] = "QuestionsFormSubmitWithoutMetaData";
        PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
        PublicEvents["ShowPreferences"] = "ShowPreferences";
        PublicEvents["ConsentPreference"] = "MSFTConsentPreference";
    })(PublicEvents || (PublicEvents = {}));
    var Events;
    (function (Events) {
        Events["Init"] = "Init";
        Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
        Events["ConfigReady"] = "ConfigReady";
    })(Events || (Events = {}));
    var SDKMode;
    (function (SDKMode) {
        SDKMode["Default"] = "Default";
        SDKMode["HeadLess"] = "HeadLess";
    })(SDKMode || (SDKMode = {}));
    var StyleType;
    (function (StyleType) {
        StyleType["Url"] = "Url";
        StyleType["Text"] = "Text";
    })(StyleType || (StyleType = {}));
    var Preference;
    (function (Preference) {
        Preference["OFF"] = "0";
        Preference["ON"] = "1";
    })(Preference || (Preference = {}));
    var Cookie;
    (function (Cookie) {
        Cookie["Consent"] = "msft-consent";
    })(Cookie || (Cookie = {}));
    var RegisteredDivType;
    (function (RegisteredDivType) {
        RegisteredDivType["Script"] = "script";
        RegisteredDivType["IFrame"] = "iframe";
    })(RegisteredDivType || (RegisteredDivType = {}));
    var NoticeType;
    (function (NoticeType) {
        NoticeType["TrackerCategory"] = "trackerCategory";
        NoticeType["Questions"] = "Questions";
    })(NoticeType || (NoticeType = {}));
    var ErrorStrings;
    (function (ErrorStrings) {
        ErrorStrings["TemplateError"] = "<b>There is something wrong with template. Please check logs.</b>";
    })(ErrorStrings || (ErrorStrings = {}));
    var IntervalUnits;
    (function (IntervalUnits) {
        IntervalUnits["day"] = "day";
        IntervalUnits["week"] = "week";
        IntervalUnits["month"] = "month";
        IntervalUnits["year"] = "year";
    })(IntervalUnits || (IntervalUnits = {}));
    var QuestionType;
    (function (QuestionType) {
        QuestionType["Text"] = "Text";
        QuestionType["Email"] = "Email";
        QuestionType["Radio"] = "Radio";
        QuestionType["MultiSelect"] = "MultiSelect";
        QuestionType["Select"] = "Select";
        QuestionType["Date"] = "Date";
        QuestionType["PhoneNumber"] = "PhoneNumber";
        QuestionType["CreditCard"] = "CreditCard";
        QuestionType["Number"] = "Number";
        QuestionType["MultiLineText"] = "multiLineText";
    })(QuestionType || (QuestionType = {}));
    var QuestionValidation;
    (function (QuestionValidation) {
        QuestionValidation["Required"] = "Required";
    })(QuestionValidation || (QuestionValidation = {}));
    var QuestionField;
    (function (QuestionField) {
        QuestionField["Question"] = "question";
        QuestionField["Placeholder"] = "placeholder";
        QuestionField["Options"] = "options";
    })(QuestionField || (QuestionField = {}));
    var ModelKind;
    (function (ModelKind) {
        ModelKind["WebConsentModel"] = "WebConsentModel";
        ModelKind["QuestionModel"] = "DSRSubmissionModel";
    })(ModelKind || (ModelKind = {}));
    var PackageKind;
    (function (PackageKind) {
        PackageKind["WebConsentPackage"] = " WebConsentPackage";
        PackageKind["FIDESPackage"] = "FIDESPackage";
        PackageKind["DSRSubmissionPackage"] = "DSRSubmissionPackage";
    })(PackageKind || (PackageKind = {}));
    var Template;
    (function (Template) {
        Template["Preferences"] = "Preferences";
    })(Template || (Template = {}));

    var onclickHandler = function (e) {
        if (e.target &&
            e.target.nodeName.toLowerCase() === 'a') {
            var attributes = {};
            var attributeNames = e.target.getAttributeNames();
            e.preventDefault();
            e.stopPropagation();
            for (var i = 0; i < attributeNames.length; i++) {
                var attrName = attributeNames[i];
                attributes[attrName] =
                    e.target.getAttribute(attrName) || '';
            }
            window.MSFTConsent.trigger(PublicEvents.AnchorTagClicked, { attributes: attributes });
        }
    };
    // Options for the observer (which mutations to observe)
    var config = { childList: true, subtree: true };
    // Callback function to execute when mutations are observed
    var callback = function (mutationList) {
        mutationList.forEach(function (mutationRecord) {
            mutationRecord.addedNodes.forEach(function (addedNode) {
                if (addedNode.nodeName.toLowerCase() === 'a') {
                    addedNode.addEventListener('click', { handleEvent: onclickHandler });
                }
            });
        });
    };
    // Create an observer instance linked to the callback function
    var observer = new MutationObserver(callback);
    // Start observing the target node for configured mutations
    observer.observe(document.documentElement, config);

    var anchorClickHandler = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    var AsyncUtils = /** @class */ (function () {
        function AsyncUtils() {
        }
        AsyncUtils.deferred = function () {
            var defer = {};
            defer.promise = new Promise(function (res, rej) {
                defer.resolve = res;
                defer.reject = rej;
            });
            return defer;
        };
        return AsyncUtils;
    }());
    var AsyncUtils$1 = AsyncUtils;

    var promiseMap = {};
    var sendMessage = function (method, args, responseId) {
        if (parent) {
            parent.postMessage({ method: method, params: Object.values(args), responseId: responseId }, msftData.origin);
        }
    };
    var callMethod = function (method, args) {
        var responseId = "".concat(method, "-").concat(new Date().getTime());
        var deferred = AsyncUtils$1.deferred();
        promiseMap[responseId] = deferred;
        sendMessage(method, args, responseId);
        return deferred.promise;
    };
    window.onmessage = function (e) {
        var _a;
        if (e.origin === msftData.origin && ((_a = e === null || e === void 0 ? void 0 : e.data) === null || _a === void 0 ? void 0 : _a.responseId)) {
            e.data.error
                ? promiseMap[e.data.responseId].reject(e.data.error)
                : promiseMap[e.data.responseId].resolve(e.data.response);
        }
    };

    var proxy = /*#__PURE__*/Object.freeze({
        __proto__: null,
        sendMessage: sendMessage,
        callMethod: callMethod
    });

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
