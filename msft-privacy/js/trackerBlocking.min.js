(function () {
    'use strict';

    var ConsentModelType;
    (function (ConsentModelType) {
        ConsentModelType["Explicit"] = "Explicit";
        ConsentModelType["Implicit"] = "Implicit";
    })(ConsentModelType || (ConsentModelType = {}));
    var PublicEvents;
    (function (PublicEvents) {
        PublicEvents["ConsentChanged"] = "ConsentChanged";
        PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
        PublicEvents["ShowFirstPage"] = "ShowFirstPage";
        PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
        PublicEvents["AcceptAll"] = "AcceptAll";
        PublicEvents["RejectAll"] = "RejectAll";
        PublicEvents["ShowTemplate"] = "ShowTemplate";
        PublicEvents["CloseTemplate"] = "CloseTemplate";
        PublicEvents["UpdateConsent"] = "UpdateConsent";
        PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
        PublicEvents["FetchConfig"] = "FetchConfig";
        PublicEvents["QuestionsFormSubmitWithoutMetaData"] = "QuestionsFormSubmitWithoutMetaData";
        PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
        PublicEvents["ShowPreferences"] = "ShowPreferences";
    })(PublicEvents || (PublicEvents = {}));
    var Events;
    (function (Events) {
        Events["Init"] = "Init";
        Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
        Events["ConfigReady"] = "ConfigReady";
    })(Events || (Events = {}));
    var SDKMode;
    (function (SDKMode) {
        SDKMode["Default"] = "Default";
        SDKMode["HeadLess"] = "HeadLess";
    })(SDKMode || (SDKMode = {}));
    var StyleType;
    (function (StyleType) {
        StyleType["Url"] = "Url";
        StyleType["Text"] = "Text";
    })(StyleType || (StyleType = {}));
    var Preference;
    (function (Preference) {
        Preference["OFF"] = "0";
        Preference["ON"] = "1";
    })(Preference || (Preference = {}));
    var Cookie;
    (function (Cookie) {
        Cookie["Consent"] = "msft-consent";
    })(Cookie || (Cookie = {}));
    var RegisteredDivType;
    (function (RegisteredDivType) {
        RegisteredDivType["Script"] = "script";
        RegisteredDivType["IFrame"] = "iframe";
    })(RegisteredDivType || (RegisteredDivType = {}));
    var NoticeType;
    (function (NoticeType) {
        NoticeType["TrackerCategory"] = "trackerCategory";
        NoticeType["Questions"] = "Questions";
    })(NoticeType || (NoticeType = {}));
    var ErrorStrings;
    (function (ErrorStrings) {
        ErrorStrings["TemplateError"] = "<b>There is something wrong with template. Please check logs.</b>";
    })(ErrorStrings || (ErrorStrings = {}));
    var IntervalUnits;
    (function (IntervalUnits) {
        IntervalUnits["day"] = "day";
        IntervalUnits["week"] = "week";
        IntervalUnits["month"] = "month";
        IntervalUnits["year"] = "year";
    })(IntervalUnits || (IntervalUnits = {}));
    var QuestionType;
    (function (QuestionType) {
        QuestionType["Text"] = "Text";
        QuestionType["Email"] = "Email";
        QuestionType["Radio"] = "Radio";
        QuestionType["MultiSelect"] = "MultiSelect";
        QuestionType["Select"] = "Select";
        QuestionType["Date"] = "Date";
        QuestionType["PhoneNumber"] = "PhoneNumber";
        QuestionType["CreditCard"] = "CreditCard";
        QuestionType["Number"] = "Number";
        QuestionType["MultiLineText"] = "multiLineText";
    })(QuestionType || (QuestionType = {}));
    var QuestionValidation;
    (function (QuestionValidation) {
        QuestionValidation["Required"] = "Required";
    })(QuestionValidation || (QuestionValidation = {}));
    var QuestionField;
    (function (QuestionField) {
        QuestionField["Question"] = "question";
        QuestionField["Placeholder"] = "placeholder";
        QuestionField["Options"] = "options";
    })(QuestionField || (QuestionField = {}));
    var ModelKind;
    (function (ModelKind) {
        ModelKind["WebConsentModel"] = "WebConsentModel";
        ModelKind["QuestionModel"] = "DSRSubmissionModel";
    })(ModelKind || (ModelKind = {}));
    var PackageKind;
    (function (PackageKind) {
        PackageKind["WebConsentPackage"] = " WebConsentPackage";
        PackageKind["FIDESPackage"] = "FIDESPackage";
        PackageKind["DSRSubmissionPackage"] = "DSRSubmissionPackage";
    })(PackageKind || (PackageKind = {}));
    var Template;
    (function (Template) {
        Template["Preferences"] = "Preferences";
    })(Template || (Template = {}));

    var BlockingServiceUtil = /** @class */ (function () {
        function BlockingServiceUtil() {
        }
        BlockingServiceUtil.shouldScriptConsented = function (categories) {
            if (categories !== null && categories.split(',').length > 0) {
                return this.consentCategoriesPending(categories);
            }
            return false;
        };
        BlockingServiceUtil.shouldIFrameConsented = function (categories) {
            if (categories !== null && categories.split(',').length > 0) {
                return this.consentCategoriesPending(categories);
            }
            return false;
        };
        BlockingServiceUtil.consentCategoriesPending = function (categories) {
            if (categories != null) {
                var pendingConsent = categories
                    .split(',')
                    .filter(function (x) {
                    var _a;
                    return !(((_a = window.__MSFT_SDK.Store.getters.userConsent) === null || _a === void 0 ? void 0 : _a.preferences[x]) ===
                        Preference.ON);
                });
                return pendingConsent != null && pendingConsent.length > 0;
            }
            return false;
        };
        BlockingServiceUtil.shouldbeUnblocked = function (msftConsentCategories) {
            if (msftConsentCategories != null) {
                var pendingConsent = msftConsentCategories
                    .split(',')
                    .filter(function (x) {
                    var _a;
                    return !(((_a = window.__MSFT_SDK.Store.getters.userConsent) === null || _a === void 0 ? void 0 : _a.preferences[x]) ===
                        Preference.ON);
                });
                return pendingConsent == null || pendingConsent.length == 0;
            }
            return true;
        };
        BlockingServiceUtil.shouldScriptUnblocked = function (type, msftConsentCategories) {
            if (type !== null && type === this.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE) {
                return this.shouldbeUnblocked(msftConsentCategories);
            }
            return false;
        };
        BlockingServiceUtil.shouldIFrameUnblocked = function (dataSrc, msftConsentCategories) {
            if (dataSrc !== null) {
                return this.shouldbeUnblocked(msftConsentCategories);
            }
            return false;
        };
        BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE = 'text/blocked';
        BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE = 'msft-consent-categories';
        BlockingServiceUtil.SRC_ATTRIBUTE = 'src';
        BlockingServiceUtil.DATASET_SRC_ATTRIBUTE = 'data-src';
        BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE = 'type';
        BlockingServiceUtil.MSFT_POST_CONSENT_SCRIPT_TYPE_ATTRIBUTE = 'msft-post-consent-type';
        BlockingServiceUtil.MSFT_CONSENT_IGNORE_ATTRIBUTE = 'msft-ignore-consent';
        return BlockingServiceUtil;
    }());

    var BlockingService = /** @class */ (function () {
        function BlockingService(enableMutationObserver) {
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.ConsentChanged, BlockingService.unblock);
            this.domObserver = null;
            if (enableMutationObserver) {
                this.domObserver = new MutationObserver(function (mutationRecords) {
                    return BlockingService.mutationCallback(mutationRecords);
                });
                this.domObserver.observe(document.documentElement, {
                    childList: true,
                    subtree: true,
                });
                window.__MSFT_SDK.Logger.info('Started tracker blocking service');
            }
        }
        BlockingService.mutationCallback = function (mutationRecords) {
            mutationRecords.forEach(function (mutationRecord) {
                mutationRecord.addedNodes.forEach(function (addedNode) {
                    try {
                        if (addedNode.nodeType === 1 &&
                            addedNode.hasAttribute(BlockingServiceUtil.MSFT_CONSENT_IGNORE_ATTRIBUTE) === false) {
                            if (addedNode.nodeName.toLowerCase() ===
                                window.__MSFT_SDK.enums.RegisteredDivType.Script) {
                                BlockingService.scriptMutationObserver(addedNode);
                            }
                            else if (addedNode.nodeName.toLowerCase() ===
                                window.__MSFT_SDK.enums.RegisteredDivType.IFrame) {
                                BlockingService.iframeMutationObserver(addedNode);
                            }
                        }
                    }
                    catch (error) {
                        console.warn('Failed to block the node ', addedNode.nodeName, 'with error ', error);
                        window.__MSFT_SDK.Logger.warn('Failed to block tag ' + addedNode.nodeName);
                    }
                });
            });
        };
        BlockingService.scriptMutationObserver = function (scriptNode) {
            var type = scriptNode.type;
            var msftConsentCategories = scriptNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE);
            if (BlockingServiceUtil.shouldScriptConsented(msftConsentCategories)) {
                scriptNode.setAttribute(BlockingServiceUtil.MSFT_POST_CONSENT_SCRIPT_TYPE_ATTRIBUTE, type);
                scriptNode.setAttribute(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE, BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE);
            }
            // Firefox has this additional event which prevents scripts from being executed
            var beforeScriptExecuteListener = function (event) {
                // Prevent only marked scripts from executing
                if (scriptNode.getAttribute(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE) ===
                    BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE)
                    event.preventDefault();
                scriptNode.removeEventListener('beforescriptexecute', beforeScriptExecuteListener);
            };
            scriptNode.addEventListener('beforescriptexecute', beforeScriptExecuteListener);
        };
        BlockingService.iframeMutationObserver = function (iframeNode) {
            var src = iframeNode.src;
            var msftConsentCategories = iframeNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE);
            if (BlockingServiceUtil.shouldIFrameConsented(msftConsentCategories)) {
                iframeNode.removeAttribute(BlockingServiceUtil.SRC_ATTRIBUTE);
                iframeNode.setAttribute(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE, src);
            }
        };
        BlockingService.unblock = function () {
            window.__MSFT_SDK.Logger.info('Tracker Blocking unblock is started');
            BlockingService.unblockScripts();
            BlockingService.unblockIFrames();
        };
        BlockingService.unblockScripts = function () {
            document
                .querySelectorAll("script[".concat(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE, "][").concat(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE, "=\"").concat(BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE, "\"]:not([").concat(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE, "=\"\"])"))
                .forEach(function (blockedNode) {
                var scriptNode = blockedNode;
                try {
                    var consentCategories = scriptNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE);
                    var notConsentedCategories = consentCategories === null || consentCategories === void 0 ? void 0 : consentCategories.split(',').filter(function (x) {
                        var _a;
                        return !(((_a = window.__MSFT_SDK.Store.getters.userConsent) === null || _a === void 0 ? void 0 : _a.preferences[x]) === Preference.ON);
                    });
                    if (notConsentedCategories == null ||
                        notConsentedCategories.length === 0) {
                        var typeValue = scriptNode.getAttribute(BlockingServiceUtil.MSFT_POST_CONSENT_SCRIPT_TYPE_ATTRIBUTE);
                        typeValue =
                            typeValue != null ? typeValue : 'application/javascript';
                        var parentNode = scriptNode.parentNode;
                        parentNode === null || parentNode === void 0 ? void 0 : parentNode.removeChild(scriptNode);
                        var newNode = document.createElement('script');
                        for (var i = 0; i < scriptNode.attributes.length; i++) {
                            var attribute = scriptNode.attributes[i];
                            if (attribute.name !== 'type') {
                                newNode.setAttribute(attribute.name, scriptNode.attributes[i].value);
                            }
                            else {
                                newNode.setAttribute(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE, typeValue);
                            }
                        }
                        newNode.appendChild(document.createTextNode(scriptNode.innerHTML));
                        parentNode == null
                            ? document.head.appendChild(newNode)
                            : parentNode.appendChild(newNode);
                    }
                    else {
                        window.__MSFT_SDK.Logger.info('Failed to unblock script ' +
                            scriptNode.src +
                            'not consented for categories ' +
                            (notConsentedCategories === null || notConsentedCategories === void 0 ? void 0 : notConsentedCategories.toString()));
                    }
                }
                catch (error) {
                    // eslint-disable-next-line
                    console.warn('Failed to unblock the script ', scriptNode.src, 'with error ', error);
                    window.__MSFT_SDK.Logger.error('Failed to unblock script ' + scriptNode.src);
                }
            });
        };
        BlockingService.unblockIFrames = function () {
            document
                .querySelectorAll("iframe[".concat(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE, "][").concat(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE, "]:not([").concat(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE, "=\"\"][").concat(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE, "=\"\"])"))
                .forEach(function (blockedNode) {
                var iframeNode = blockedNode;
                try {
                    var consentCategories = iframeNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE);
                    var notConsentedCategories = consentCategories === null || consentCategories === void 0 ? void 0 : consentCategories.split(',').filter(function (x) {
                        var _a;
                        return !(((_a = window.__MSFT_SDK.Store.getters.userConsent) === null || _a === void 0 ? void 0 : _a.preferences[x]) === Preference.ON);
                    });
                    if (notConsentedCategories == null ||
                        notConsentedCategories.length === 0) {
                        var parentNode = iframeNode.parentNode;
                        parentNode === null || parentNode === void 0 ? void 0 : parentNode.removeChild(iframeNode);
                        var newNode = iframeNode.cloneNode(true);
                        var datasrc = newNode.getAttribute(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE);
                        datasrc = datasrc !== null ? datasrc : '';
                        newNode.setAttribute(BlockingServiceUtil.SRC_ATTRIBUTE, datasrc);
                        newNode.removeAttribute(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE);
                        parentNode == null
                            ? document.head.appendChild(newNode)
                            : parentNode.appendChild(newNode);
                    }
                    else {
                        window.__MSFT_SDK.Logger.info('Failed to unblock iframe ' +
                            iframeNode.src +
                            'not consented for categories ' +
                            (notConsentedCategories === null || notConsentedCategories === void 0 ? void 0 : notConsentedCategories.toString()));
                    }
                }
                catch (error) {
                    // eslint-disable-next-line
                    console.warn('Failed to unblock the iframe ', iframeNode.src, 'with error ', error);
                    window.__MSFT_SDK.Logger.error('Failed to unblock iFrame ' + iframeNode.src);
                }
            });
        };
        return BlockingService;
    }());
    var BlockingServiceInstance = new BlockingService(true);

    var PublicAPI = /** @class */ (function () {
        function PublicAPI() {
        }
        //Public API
        PublicAPI.getBlockingService = function () {
            return BlockingServiceInstance;
        };
        return PublicAPI;
    }());

    window.__MSFT_SDK.Helpers.AddPublicApis(PublicAPI);
    window.__MSFT_SDK.Helpers.exposeApis();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2tlckJsb2NraW5nLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9jb3JlL2NvbnN0YW50cy9lbnVtcy50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvdHJhY2tlckJsb2NraW5nL0Jsb2NraW5nU2VydmljZVV0aWwudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL3RyYWNrZXJCbG9ja2luZy9CbG9ja2luZ1NlcnZpY2UudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL3RyYWNrZXJCbG9ja2luZy9wdWJsaWNBcGkvaW5kZXgudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL3RyYWNrZXJCbG9ja2luZy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBDb25zZW50TW9kZWxUeXBlIHtcclxuICBFeHBsaWNpdCA9ICdFeHBsaWNpdCcsXHJcbiAgSW1wbGljaXQgPSAnSW1wbGljaXQnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBQdWJsaWNFdmVudHMge1xyXG4gIENvbnNlbnRDaGFuZ2VkID0gJ0NvbnNlbnRDaGFuZ2VkJyxcclxuICBTaG93Q29uc2VudE5vdGljZSA9ICdTaG93Q29uc2VudE5vdGljZScsXHJcbiAgU2hvd0ZpcnN0UGFnZSA9ICdTaG93Rmlyc3RQYWdlJyxcclxuICBDbG9zZUNvbnNlbnROb3RpY2UgPSAnQ2xvc2VDb25zZW50Tm90aWNlJyxcclxuICBBY2NlcHRBbGwgPSAnQWNjZXB0QWxsJyxcclxuICBSZWplY3RBbGwgPSAnUmVqZWN0QWxsJyxcclxuICBTaG93VGVtcGxhdGUgPSAnU2hvd1RlbXBsYXRlJyxcclxuICBDbG9zZVRlbXBsYXRlID0gJ0Nsb3NlVGVtcGxhdGUnLFxyXG4gIFVwZGF0ZUNvbnNlbnQgPSAnVXBkYXRlQ29uc2VudCcsXHJcbiAgQW5jaG9yVGFnQ2xpY2tlZCA9ICdBbmNob3JUYWdDbGlja2VkJyxcclxuICBGZXRjaENvbmZpZyA9ICdGZXRjaENvbmZpZycsXHJcbiAgUXVlc3Rpb25zRm9ybVN1Ym1pdFdpdGhvdXRNZXRhRGF0YSA9ICdRdWVzdGlvbnNGb3JtU3VibWl0V2l0aG91dE1ldGFEYXRhJyxcclxuICBRdWVzdGlvbnNGb3JtU3VibWl0ID0gJ1F1ZXN0aW9uc0Zvcm1TdWJtaXQnLFxyXG4gIFNob3dQcmVmZXJlbmNlcyA9ICdTaG93UHJlZmVyZW5jZXMnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBFdmVudHMge1xyXG4gIEluaXQgPSAnSW5pdCcsXHJcbiAgQ29yZUNvbnNlbnRNb2RlbFNlbGVjdGVkID0gJ0NvcmVDb25zZW50TW9kZWxTZWxlY3RlZCcsXHJcbiAgQ29uZmlnUmVhZHkgPSAnQ29uZmlnUmVhZHknLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBTREtNb2RlIHtcclxuICBEZWZhdWx0ID0gJ0RlZmF1bHQnLFxyXG4gIEhlYWRMZXNzID0gJ0hlYWRMZXNzJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gU3R5bGVUeXBlIHtcclxuICBVcmwgPSAnVXJsJyxcclxuICBUZXh0ID0gJ1RleHQnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBQcmVmZXJlbmNlIHtcclxuICBPRkYgPSAnMCcsXHJcbiAgT04gPSAnMScsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIENvb2tpZSB7XHJcbiAgQ29uc2VudCA9ICdtc2Z0LWNvbnNlbnQnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBSZWdpc3RlcmVkRGl2VHlwZSB7XHJcbiAgU2NyaXB0ID0gJ3NjcmlwdCcsXHJcbiAgSUZyYW1lID0gJ2lmcmFtZScsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIE5vdGljZVR5cGUge1xyXG4gIFRyYWNrZXJDYXRlZ29yeSA9ICd0cmFja2VyQ2F0ZWdvcnknLFxyXG4gIFF1ZXN0aW9ucyA9ICdRdWVzdGlvbnMnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBFcnJvclN0cmluZ3Mge1xyXG4gIFRlbXBsYXRlRXJyb3IgPSAnPGI+VGhlcmUgaXMgc29tZXRoaW5nIHdyb25nIHdpdGggdGVtcGxhdGUuIFBsZWFzZSBjaGVjayBsb2dzLjwvYj4nLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBJbnRlcnZhbFVuaXRzIHtcclxuICBkYXkgPSAnZGF5JyxcclxuICB3ZWVrID0gJ3dlZWsnLFxyXG4gIG1vbnRoID0gJ21vbnRoJyxcclxuICB5ZWFyID0gJ3llYXInLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBRdWVzdGlvblR5cGUge1xyXG4gIFRleHQgPSAnVGV4dCcsXHJcbiAgRW1haWwgPSAnRW1haWwnLFxyXG4gIFJhZGlvID0gJ1JhZGlvJyxcclxuICBNdWx0aVNlbGVjdCA9ICdNdWx0aVNlbGVjdCcsXHJcbiAgU2VsZWN0ID0gJ1NlbGVjdCcsXHJcbiAgRGF0ZSA9ICdEYXRlJyxcclxuICBQaG9uZU51bWJlciA9ICdQaG9uZU51bWJlcicsXHJcbiAgQ3JlZGl0Q2FyZCA9ICdDcmVkaXRDYXJkJyxcclxuICBOdW1iZXIgPSAnTnVtYmVyJyxcclxuICBNdWx0aUxpbmVUZXh0ID0gJ211bHRpTGluZVRleHQnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBRdWVzdGlvblZhbGlkYXRpb24ge1xyXG4gIFJlcXVpcmVkID0gJ1JlcXVpcmVkJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gUXVlc3Rpb25GaWVsZCB7XHJcbiAgUXVlc3Rpb24gPSAncXVlc3Rpb24nLFxyXG4gIFBsYWNlaG9sZGVyID0gJ3BsYWNlaG9sZGVyJyxcclxuICBPcHRpb25zID0gJ29wdGlvbnMnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBNb2RlbEtpbmQge1xyXG4gIFdlYkNvbnNlbnRNb2RlbCA9ICdXZWJDb25zZW50TW9kZWwnLFxyXG4gIFF1ZXN0aW9uTW9kZWwgPSAnRFNSU3VibWlzc2lvbk1vZGVsJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gUGFja2FnZUtpbmQge1xyXG4gIFdlYkNvbnNlbnRQYWNrYWdlID0gJyBXZWJDb25zZW50UGFja2FnZScsXHJcbiAgRklERVNQYWNrYWdlID0gJ0ZJREVTUGFja2FnZScsXHJcbiAgRFNSU3VibWlzc2lvblBhY2thZ2UgPSAnRFNSU3VibWlzc2lvblBhY2thZ2UnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBUZW1wbGF0ZSB7XHJcbiAgUHJlZmVyZW5jZXMgPSAnUHJlZmVyZW5jZXMnLFxyXG59XHJcbiIsImltcG9ydCB7IFByZWZlcmVuY2UgfSBmcm9tICdjb3JlL2NvbnN0YW50cy9lbnVtcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQmxvY2tpbmdTZXJ2aWNlVXRpbCB7XHJcbiAgc3RhdGljIFNDUklQVF9CTE9DS0lOR19UWVBFX0FUVFJJQlVURV9WQUxVRSA9ICd0ZXh0L2Jsb2NrZWQnO1xyXG4gIHN0YXRpYyBNU0ZUX0NPTlNFTlRfQ0FURUdPUklFU19BVFRSSUJVVEUgPSAnbXNmdC1jb25zZW50LWNhdGVnb3JpZXMnO1xyXG4gIHN0YXRpYyBTUkNfQVRUUklCVVRFID0gJ3NyYyc7XHJcbiAgc3RhdGljIERBVEFTRVRfU1JDX0FUVFJJQlVURSA9ICdkYXRhLXNyYyc7XHJcbiAgc3RhdGljIFNDUklQVF9UWVBFX0FUVFJJQlVURSA9ICd0eXBlJztcclxuICBzdGF0aWMgTVNGVF9QT1NUX0NPTlNFTlRfU0NSSVBUX1RZUEVfQVRUUklCVVRFID0gJ21zZnQtcG9zdC1jb25zZW50LXR5cGUnO1xyXG4gIHN0YXRpYyBNU0ZUX0NPTlNFTlRfSUdOT1JFX0FUVFJJQlVURSA9ICdtc2Z0LWlnbm9yZS1jb25zZW50JztcclxuXHJcbiAgc3RhdGljIHNob3VsZFNjcmlwdENvbnNlbnRlZChjYXRlZ29yaWVzOiBzdHJpbmcgfCBudWxsKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoY2F0ZWdvcmllcyAhPT0gbnVsbCAmJiBjYXRlZ29yaWVzLnNwbGl0KCcsJykubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jb25zZW50Q2F0ZWdvcmllc1BlbmRpbmcoY2F0ZWdvcmllcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2hvdWxkSUZyYW1lQ29uc2VudGVkKGNhdGVnb3JpZXM6IHN0cmluZyB8IG51bGwpOiBib29sZWFuIHtcclxuICAgIGlmIChjYXRlZ29yaWVzICE9PSBudWxsICYmIGNhdGVnb3JpZXMuc3BsaXQoJywnKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNvbnNlbnRDYXRlZ29yaWVzUGVuZGluZyhjYXRlZ29yaWVzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb25zZW50Q2F0ZWdvcmllc1BlbmRpbmcoY2F0ZWdvcmllczogc3RyaW5nIHwgbnVsbCk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKGNhdGVnb3JpZXMgIT0gbnVsbCkge1xyXG4gICAgICBjb25zdCBwZW5kaW5nQ29uc2VudCA9IGNhdGVnb3JpZXNcclxuICAgICAgICAuc3BsaXQoJywnKVxyXG4gICAgICAgIC5maWx0ZXIoXHJcbiAgICAgICAgICB4ID0+XHJcbiAgICAgICAgICAgICEoXHJcbiAgICAgICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuU3RvcmUuZ2V0dGVycy51c2VyQ29uc2VudD8ucHJlZmVyZW5jZXNbeF0gPT09XHJcbiAgICAgICAgICAgICAgUHJlZmVyZW5jZS5PTlxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICk7XHJcbiAgICAgIHJldHVybiBwZW5kaW5nQ29uc2VudCAhPSBudWxsICYmIHBlbmRpbmdDb25zZW50Lmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2hvdWxkYmVVbmJsb2NrZWQobXNmdENvbnNlbnRDYXRlZ29yaWVzOiBzdHJpbmcgfCBudWxsKSB7XHJcbiAgICBpZiAobXNmdENvbnNlbnRDYXRlZ29yaWVzICE9IG51bGwpIHtcclxuICAgICAgY29uc3QgcGVuZGluZ0NvbnNlbnQgPSBtc2Z0Q29uc2VudENhdGVnb3JpZXNcclxuICAgICAgICAuc3BsaXQoJywnKVxyXG4gICAgICAgIC5maWx0ZXIoXHJcbiAgICAgICAgICB4ID0+XHJcbiAgICAgICAgICAgICEoXHJcbiAgICAgICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuU3RvcmUuZ2V0dGVycy51c2VyQ29uc2VudD8ucHJlZmVyZW5jZXNbeF0gPT09XHJcbiAgICAgICAgICAgICAgUHJlZmVyZW5jZS5PTlxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICk7XHJcbiAgICAgIHJldHVybiBwZW5kaW5nQ29uc2VudCA9PSBudWxsIHx8IHBlbmRpbmdDb25zZW50Lmxlbmd0aCA9PSAwO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2hvdWxkU2NyaXB0VW5ibG9ja2VkKFxyXG4gICAgdHlwZTogc3RyaW5nIHwgbnVsbCxcclxuICAgIG1zZnRDb25zZW50Q2F0ZWdvcmllczogc3RyaW5nIHwgbnVsbCxcclxuICApOiBib29sZWFuIHtcclxuICAgIGlmICh0eXBlICE9PSBudWxsICYmIHR5cGUgPT09IHRoaXMuU0NSSVBUX0JMT0NLSU5HX1RZUEVfQVRUUklCVVRFX1ZBTFVFKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnNob3VsZGJlVW5ibG9ja2VkKG1zZnRDb25zZW50Q2F0ZWdvcmllcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2hvdWxkSUZyYW1lVW5ibG9ja2VkKFxyXG4gICAgZGF0YVNyYzogc3RyaW5nIHwgbnVsbCxcclxuICAgIG1zZnRDb25zZW50Q2F0ZWdvcmllczogc3RyaW5nIHwgbnVsbCxcclxuICApOiBib29sZWFuIHtcclxuICAgIGlmIChkYXRhU3JjICE9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnNob3VsZGJlVW5ibG9ja2VkKG1zZnRDb25zZW50Q2F0ZWdvcmllcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFByZWZlcmVuY2UgfSBmcm9tICdjb3JlL2NvbnN0YW50cy9lbnVtcyc7XHJcbmltcG9ydCB7IEJsb2NraW5nU2VydmljZVV0aWwgfSBmcm9tICcuL0Jsb2NraW5nU2VydmljZVV0aWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJsb2NraW5nU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBkb21PYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlciB8IG51bGw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVuYWJsZU11dGF0aW9uT2JzZXJ2ZXI6IGJvb2xlYW4pIHtcclxuICAgIHdpbmRvdy5fX01TRlRfU0RLLkV2ZW50QnVzLm9uKFxyXG4gICAgICB3aW5kb3cuX19NU0ZUX1NESy5lbnVtcy5QdWJsaWNFdmVudHMuQ29uc2VudENoYW5nZWQsXHJcbiAgICAgIEJsb2NraW5nU2VydmljZS51bmJsb2NrLFxyXG4gICAgKTtcclxuICAgIHRoaXMuZG9tT2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgaWYgKGVuYWJsZU11dGF0aW9uT2JzZXJ2ZXIpIHtcclxuICAgICAgdGhpcy5kb21PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKFxyXG4gICAgICAgIChtdXRhdGlvblJlY29yZHM6IE11dGF0aW9uUmVjb3JkW10pID0+XHJcbiAgICAgICAgICBCbG9ja2luZ1NlcnZpY2UubXV0YXRpb25DYWxsYmFjayhtdXRhdGlvblJlY29yZHMpLFxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmRvbU9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7XHJcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxyXG4gICAgICAgIHN1YnRyZWU6IHRydWUsXHJcbiAgICAgIH0pO1xyXG4gICAgICB3aW5kb3cuX19NU0ZUX1NESy5Mb2dnZXIuaW5mbygnU3RhcnRlZCB0cmFja2VyIGJsb2NraW5nIHNlcnZpY2UnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIG11dGF0aW9uQ2FsbGJhY2sobXV0YXRpb25SZWNvcmRzOiBNdXRhdGlvblJlY29yZFtdKTogdm9pZCB7XHJcbiAgICBtdXRhdGlvblJlY29yZHMuZm9yRWFjaChtdXRhdGlvblJlY29yZCA9PiB7XHJcbiAgICAgIG11dGF0aW9uUmVjb3JkLmFkZGVkTm9kZXMuZm9yRWFjaChhZGRlZE5vZGUgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIGFkZGVkTm9kZS5ub2RlVHlwZSA9PT0gMSAmJlxyXG4gICAgICAgICAgICAoPEhUTUxFbGVtZW50PmFkZGVkTm9kZSkuaGFzQXR0cmlidXRlKFxyXG4gICAgICAgICAgICAgIEJsb2NraW5nU2VydmljZVV0aWwuTVNGVF9DT05TRU5UX0lHTk9SRV9BVFRSSUJVVEUsXHJcbiAgICAgICAgICAgICkgPT09IGZhbHNlXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgIGFkZGVkTm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PVxyXG4gICAgICAgICAgICAgIHdpbmRvdy5fX01TRlRfU0RLLmVudW1zLlJlZ2lzdGVyZWREaXZUeXBlLlNjcmlwdFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICBCbG9ja2luZ1NlcnZpY2Uuc2NyaXB0TXV0YXRpb25PYnNlcnZlcihcclxuICAgICAgICAgICAgICAgIDxIVE1MU2NyaXB0RWxlbWVudD5hZGRlZE5vZGUsXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgICBhZGRlZE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT1cclxuICAgICAgICAgICAgICB3aW5kb3cuX19NU0ZUX1NESy5lbnVtcy5SZWdpc3RlcmVkRGl2VHlwZS5JRnJhbWVcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlLmlmcmFtZU11dGF0aW9uT2JzZXJ2ZXIoXHJcbiAgICAgICAgICAgICAgICA8SFRNTElGcmFtZUVsZW1lbnQ+YWRkZWROb2RlLFxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgICAnRmFpbGVkIHRvIGJsb2NrIHRoZSBub2RlICcsXHJcbiAgICAgICAgICAgIGFkZGVkTm9kZS5ub2RlTmFtZSxcclxuICAgICAgICAgICAgJ3dpdGggZXJyb3IgJyxcclxuICAgICAgICAgICAgZXJyb3IsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuTG9nZ2VyLndhcm4oXHJcbiAgICAgICAgICAgICdGYWlsZWQgdG8gYmxvY2sgdGFnICcgKyBhZGRlZE5vZGUubm9kZU5hbWUsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHNjcmlwdE11dGF0aW9uT2JzZXJ2ZXIoc2NyaXB0Tm9kZTogSFRNTFNjcmlwdEVsZW1lbnQpOiB2b2lkIHtcclxuICAgIGNvbnN0IHR5cGUgPSBzY3JpcHROb2RlLnR5cGU7XHJcbiAgICBjb25zdCBtc2Z0Q29uc2VudENhdGVnb3JpZXMgPSBzY3JpcHROb2RlLmdldEF0dHJpYnV0ZShcclxuICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX0NPTlNFTlRfQ0FURUdPUklFU19BVFRSSUJVVEUsXHJcbiAgICApO1xyXG4gICAgaWYgKEJsb2NraW5nU2VydmljZVV0aWwuc2hvdWxkU2NyaXB0Q29uc2VudGVkKG1zZnRDb25zZW50Q2F0ZWdvcmllcykpIHtcclxuICAgICAgc2NyaXB0Tm9kZS5zZXRBdHRyaWJ1dGUoXHJcbiAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX1BPU1RfQ09OU0VOVF9TQ1JJUFRfVFlQRV9BVFRSSUJVVEUsXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgKTtcclxuICAgICAgc2NyaXB0Tm9kZS5zZXRBdHRyaWJ1dGUoXHJcbiAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5TQ1JJUFRfVFlQRV9BVFRSSUJVVEUsXHJcbiAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5TQ1JJUFRfQkxPQ0tJTkdfVFlQRV9BVFRSSUJVVEVfVkFMVUUsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmlyZWZveCBoYXMgdGhpcyBhZGRpdGlvbmFsIGV2ZW50IHdoaWNoIHByZXZlbnRzIHNjcmlwdHMgZnJvbSBiZWluZyBleGVjdXRlZFxyXG4gICAgY29uc3QgYmVmb3JlU2NyaXB0RXhlY3V0ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50OiBhbnkpIHtcclxuICAgICAgLy8gUHJldmVudCBvbmx5IG1hcmtlZCBzY3JpcHRzIGZyb20gZXhlY3V0aW5nXHJcbiAgICAgIGlmIChcclxuICAgICAgICBzY3JpcHROb2RlLmdldEF0dHJpYnV0ZShCbG9ja2luZ1NlcnZpY2VVdGlsLlNDUklQVF9UWVBFX0FUVFJJQlVURSkgPT09XHJcbiAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5TQ1JJUFRfQkxPQ0tJTkdfVFlQRV9BVFRSSUJVVEVfVkFMVUVcclxuICAgICAgKVxyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHNjcmlwdE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAnYmVmb3Jlc2NyaXB0ZXhlY3V0ZScsXHJcbiAgICAgICAgYmVmb3JlU2NyaXB0RXhlY3V0ZUxpc3RlbmVyLFxyXG4gICAgICApO1xyXG4gICAgfTtcclxuICAgIHNjcmlwdE5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgJ2JlZm9yZXNjcmlwdGV4ZWN1dGUnLFxyXG4gICAgICBiZWZvcmVTY3JpcHRFeGVjdXRlTGlzdGVuZXIsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgaWZyYW1lTXV0YXRpb25PYnNlcnZlcihpZnJhbWVOb2RlOiBIVE1MSUZyYW1lRWxlbWVudCk6IHZvaWQge1xyXG4gICAgY29uc3Qgc3JjID0gaWZyYW1lTm9kZS5zcmM7XHJcbiAgICBjb25zdCBtc2Z0Q29uc2VudENhdGVnb3JpZXMgPSBpZnJhbWVOb2RlLmdldEF0dHJpYnV0ZShcclxuICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX0NPTlNFTlRfQ0FURUdPUklFU19BVFRSSUJVVEUsXHJcbiAgICApO1xyXG4gICAgaWYgKEJsb2NraW5nU2VydmljZVV0aWwuc2hvdWxkSUZyYW1lQ29uc2VudGVkKG1zZnRDb25zZW50Q2F0ZWdvcmllcykpIHtcclxuICAgICAgaWZyYW1lTm9kZS5yZW1vdmVBdHRyaWJ1dGUoQmxvY2tpbmdTZXJ2aWNlVXRpbC5TUkNfQVRUUklCVVRFKTtcclxuICAgICAgaWZyYW1lTm9kZS5zZXRBdHRyaWJ1dGUoQmxvY2tpbmdTZXJ2aWNlVXRpbC5EQVRBU0VUX1NSQ19BVFRSSUJVVEUsIHNyYyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyB1bmJsb2NrKCk6IHZvaWQge1xyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuTG9nZ2VyLmluZm8oJ1RyYWNrZXIgQmxvY2tpbmcgdW5ibG9jayBpcyBzdGFydGVkJyk7XHJcbiAgICBCbG9ja2luZ1NlcnZpY2UudW5ibG9ja1NjcmlwdHMoKTtcclxuICAgIEJsb2NraW5nU2VydmljZS51bmJsb2NrSUZyYW1lcygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgdW5ibG9ja1NjcmlwdHMoKTogdm9pZCB7XHJcbiAgICBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvckFsbChcclxuICAgICAgICBgc2NyaXB0WyR7QmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX0NPTlNFTlRfQ0FURUdPUklFU19BVFRSSUJVVEV9XVske0Jsb2NraW5nU2VydmljZVV0aWwuU0NSSVBUX1RZUEVfQVRUUklCVVRFfT1cIiR7QmxvY2tpbmdTZXJ2aWNlVXRpbC5TQ1JJUFRfQkxPQ0tJTkdfVFlQRV9BVFRSSUJVVEVfVkFMVUV9XCJdOm5vdChbJHtCbG9ja2luZ1NlcnZpY2VVdGlsLk1TRlRfQ09OU0VOVF9DQVRFR09SSUVTX0FUVFJJQlVURX09XCJcIl0pYCxcclxuICAgICAgKVxyXG4gICAgICAuZm9yRWFjaChibG9ja2VkTm9kZSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2NyaXB0Tm9kZSA9IDxIVE1MU2NyaXB0RWxlbWVudD5ibG9ja2VkTm9kZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgY29uc2VudENhdGVnb3JpZXMgPSBzY3JpcHROb2RlLmdldEF0dHJpYnV0ZShcclxuICAgICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX0NPTlNFTlRfQ0FURUdPUklFU19BVFRSSUJVVEUsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgY29uc3Qgbm90Q29uc2VudGVkQ2F0ZWdvcmllcyA9IGNvbnNlbnRDYXRlZ29yaWVzXHJcbiAgICAgICAgICAgID8uc3BsaXQoJywnKVxyXG4gICAgICAgICAgICAuZmlsdGVyKFxyXG4gICAgICAgICAgICAgIHggPT5cclxuICAgICAgICAgICAgICAgICEoXHJcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMudXNlckNvbnNlbnQ/LnByZWZlcmVuY2VzW1xyXG4gICAgICAgICAgICAgICAgICAgIHhcclxuICAgICAgICAgICAgICAgICAgXSA9PT0gUHJlZmVyZW5jZS5PTlxyXG4gICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgbm90Q29uc2VudGVkQ2F0ZWdvcmllcyA9PSBudWxsIHx8XHJcbiAgICAgICAgICAgIG5vdENvbnNlbnRlZENhdGVnb3JpZXMubGVuZ3RoID09PSAwXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IHR5cGVWYWx1ZSA9IHNjcmlwdE5vZGUuZ2V0QXR0cmlidXRlKFxyXG4gICAgICAgICAgICAgIEJsb2NraW5nU2VydmljZVV0aWwuTVNGVF9QT1NUX0NPTlNFTlRfU0NSSVBUX1RZUEVfQVRUUklCVVRFLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0eXBlVmFsdWUgPVxyXG4gICAgICAgICAgICAgIHR5cGVWYWx1ZSAhPSBudWxsID8gdHlwZVZhbHVlIDogJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnROb2RlID0gc2NyaXB0Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBwYXJlbnROb2RlPy5yZW1vdmVDaGlsZChzY3JpcHROb2RlKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY3JpcHROb2RlLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBzY3JpcHROb2RlLmF0dHJpYnV0ZXNbaV07XHJcbiAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lICE9PSAndHlwZScpIHtcclxuICAgICAgICAgICAgICAgIG5ld05vZGUuc2V0QXR0cmlidXRlKFxyXG4gICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgc2NyaXB0Tm9kZS5hdHRyaWJ1dGVzW2ldLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV3Tm9kZS5zZXRBdHRyaWJ1dGUoXHJcbiAgICAgICAgICAgICAgICAgIEJsb2NraW5nU2VydmljZVV0aWwuU0NSSVBUX1RZUEVfQVRUUklCVVRFLFxyXG4gICAgICAgICAgICAgICAgICB0eXBlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuZXdOb2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHNjcmlwdE5vZGUuaW5uZXJIVE1MKSk7XHJcbiAgICAgICAgICAgIHBhcmVudE5vZGUgPT0gbnVsbFxyXG4gICAgICAgICAgICAgID8gZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChuZXdOb2RlKVxyXG4gICAgICAgICAgICAgIDogcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChuZXdOb2RlKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5fX01TRlRfU0RLLkxvZ2dlci5pbmZvKFxyXG4gICAgICAgICAgICAgICdGYWlsZWQgdG8gdW5ibG9jayBzY3JpcHQgJyArXHJcbiAgICAgICAgICAgICAgICBzY3JpcHROb2RlLnNyYyArXHJcbiAgICAgICAgICAgICAgICAnbm90IGNvbnNlbnRlZCBmb3IgY2F0ZWdvcmllcyAnICtcclxuICAgICAgICAgICAgICAgIG5vdENvbnNlbnRlZENhdGVnb3JpZXM/LnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgICAnRmFpbGVkIHRvIHVuYmxvY2sgdGhlIHNjcmlwdCAnLFxyXG4gICAgICAgICAgICBzY3JpcHROb2RlLnNyYyxcclxuICAgICAgICAgICAgJ3dpdGggZXJyb3IgJyxcclxuICAgICAgICAgICAgZXJyb3IsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuTG9nZ2VyLmVycm9yKFxyXG4gICAgICAgICAgICAnRmFpbGVkIHRvIHVuYmxvY2sgc2NyaXB0ICcgKyBzY3JpcHROb2RlLnNyYyxcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHVuYmxvY2tJRnJhbWVzKCk6IHZvaWQge1xyXG4gICAgZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgICAgYGlmcmFtZVske0Jsb2NraW5nU2VydmljZVV0aWwuTVNGVF9DT05TRU5UX0NBVEVHT1JJRVNfQVRUUklCVVRFfV1bJHtCbG9ja2luZ1NlcnZpY2VVdGlsLkRBVEFTRVRfU1JDX0FUVFJJQlVURX1dOm5vdChbJHtCbG9ja2luZ1NlcnZpY2VVdGlsLk1TRlRfQ09OU0VOVF9DQVRFR09SSUVTX0FUVFJJQlVURX09XCJcIl1bJHtCbG9ja2luZ1NlcnZpY2VVdGlsLkRBVEFTRVRfU1JDX0FUVFJJQlVURX09XCJcIl0pYCxcclxuICAgICAgKVxyXG4gICAgICAuZm9yRWFjaChibG9ja2VkTm9kZSA9PiB7XHJcbiAgICAgICAgY29uc3QgaWZyYW1lTm9kZSA9IDxIVE1MSUZyYW1lRWxlbWVudD5ibG9ja2VkTm9kZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgY29uc2VudENhdGVnb3JpZXMgPSBpZnJhbWVOb2RlLmdldEF0dHJpYnV0ZShcclxuICAgICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5NU0ZUX0NPTlNFTlRfQ0FURUdPUklFU19BVFRSSUJVVEUsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgY29uc3Qgbm90Q29uc2VudGVkQ2F0ZWdvcmllcyA9IGNvbnNlbnRDYXRlZ29yaWVzXHJcbiAgICAgICAgICAgID8uc3BsaXQoJywnKVxyXG4gICAgICAgICAgICAuZmlsdGVyKFxyXG4gICAgICAgICAgICAgIHggPT5cclxuICAgICAgICAgICAgICAgICEoXHJcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMudXNlckNvbnNlbnQ/LnByZWZlcmVuY2VzW1xyXG4gICAgICAgICAgICAgICAgICAgIHhcclxuICAgICAgICAgICAgICAgICAgXSA9PT0gUHJlZmVyZW5jZS5PTlxyXG4gICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgbm90Q29uc2VudGVkQ2F0ZWdvcmllcyA9PSBudWxsIHx8XHJcbiAgICAgICAgICAgIG5vdENvbnNlbnRlZENhdGVnb3JpZXMubGVuZ3RoID09PSAwXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgY29uc3QgcGFyZW50Tm9kZSA9IGlmcmFtZU5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgcGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQoaWZyYW1lTm9kZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld05vZGUgPSA8SFRNTElGcmFtZUVsZW1lbnQ+aWZyYW1lTm9kZS5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIGxldCBkYXRhc3JjID0gbmV3Tm9kZS5nZXRBdHRyaWJ1dGUoXHJcbiAgICAgICAgICAgICAgQmxvY2tpbmdTZXJ2aWNlVXRpbC5EQVRBU0VUX1NSQ19BVFRSSUJVVEUsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGRhdGFzcmMgPSBkYXRhc3JjICE9PSBudWxsID8gZGF0YXNyYyA6ICcnO1xyXG4gICAgICAgICAgICBuZXdOb2RlLnNldEF0dHJpYnV0ZShCbG9ja2luZ1NlcnZpY2VVdGlsLlNSQ19BVFRSSUJVVEUsIGRhdGFzcmMpO1xyXG4gICAgICAgICAgICBuZXdOb2RlLnJlbW92ZUF0dHJpYnV0ZShCbG9ja2luZ1NlcnZpY2VVdGlsLkRBVEFTRVRfU1JDX0FUVFJJQlVURSk7XHJcbiAgICAgICAgICAgIHBhcmVudE5vZGUgPT0gbnVsbFxyXG4gICAgICAgICAgICAgID8gZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChuZXdOb2RlKVxyXG4gICAgICAgICAgICAgIDogcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChuZXdOb2RlKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5fX01TRlRfU0RLLkxvZ2dlci5pbmZvKFxyXG4gICAgICAgICAgICAgICdGYWlsZWQgdG8gdW5ibG9jayBpZnJhbWUgJyArXHJcbiAgICAgICAgICAgICAgICBpZnJhbWVOb2RlLnNyYyArXHJcbiAgICAgICAgICAgICAgICAnbm90IGNvbnNlbnRlZCBmb3IgY2F0ZWdvcmllcyAnICtcclxuICAgICAgICAgICAgICAgIG5vdENvbnNlbnRlZENhdGVnb3JpZXM/LnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgICAnRmFpbGVkIHRvIHVuYmxvY2sgdGhlIGlmcmFtZSAnLFxyXG4gICAgICAgICAgICBpZnJhbWVOb2RlLnNyYyxcclxuICAgICAgICAgICAgJ3dpdGggZXJyb3IgJyxcclxuICAgICAgICAgICAgZXJyb3IsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuTG9nZ2VyLmVycm9yKFxyXG4gICAgICAgICAgICAnRmFpbGVkIHRvIHVuYmxvY2sgaUZyYW1lICcgKyBpZnJhbWVOb2RlLnNyYyxcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBCbG9ja2luZ1NlcnZpY2VJbnN0YW5jZSA9IG5ldyBCbG9ja2luZ1NlcnZpY2UodHJ1ZSk7XHJcbiIsImltcG9ydCB7IEJsb2NraW5nU2VydmljZUluc3RhbmNlLCBCbG9ja2luZ1NlcnZpY2UgfSBmcm9tICcuLi9CbG9ja2luZ1NlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFB1YmxpY0FQSSB7XHJcbiAgLy9QdWJsaWMgQVBJXHJcbiAgcHVibGljIHN0YXRpYyBnZXRCbG9ja2luZ1NlcnZpY2UoKTogQmxvY2tpbmdTZXJ2aWNlIHtcclxuICAgIHJldHVybiBCbG9ja2luZ1NlcnZpY2VJbnN0YW5jZTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUHVibGljQVBJIH0gZnJvbSAnLi9wdWJsaWNBcGknO1xyXG53aW5kb3cuX19NU0ZUX1NESy5IZWxwZXJzLkFkZFB1YmxpY0FwaXMoUHVibGljQVBJKTtcclxud2luZG93Ll9fTVNGVF9TREsuSGVscGVycy5leHBvc2VBcGlzKCk7XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFBQSxJQUFZLGdCQUdYO0lBSEQsV0FBWSxnQkFBZ0I7UUFDMUIseUNBQXFCLENBQUE7UUFDckIseUNBQXFCLENBQUE7SUFDdkIsQ0FBQyxFQUhXLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFHM0I7SUFFRCxJQUFZLFlBZVg7SUFmRCxXQUFZLFlBQVk7UUFDdEIsaURBQWlDLENBQUE7UUFDakMsdURBQXVDLENBQUE7UUFDdkMsK0NBQStCLENBQUE7UUFDL0IseURBQXlDLENBQUE7UUFDekMsdUNBQXVCLENBQUE7UUFDdkIsdUNBQXVCLENBQUE7UUFDdkIsNkNBQTZCLENBQUE7UUFDN0IsK0NBQStCLENBQUE7UUFDL0IsK0NBQStCLENBQUE7UUFDL0IscURBQXFDLENBQUE7UUFDckMsMkNBQTJCLENBQUE7UUFDM0IseUZBQXlFLENBQUE7UUFDekUsMkRBQTJDLENBQUE7UUFDM0MsbURBQW1DLENBQUE7SUFDckMsQ0FBQyxFQWZXLFlBQVksS0FBWixZQUFZLFFBZXZCO0lBRUQsSUFBWSxNQUlYO0lBSkQsV0FBWSxNQUFNO1FBQ2hCLHVCQUFhLENBQUE7UUFDYiwr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
