(function () {
    'use strict';

    var ConsentModelType;
    (function (ConsentModelType) {
        ConsentModelType["Explicit"] = "Explicit";
        ConsentModelType["Implicit"] = "Implicit";
    })(ConsentModelType || (ConsentModelType = {}));
    var PublicEvents;
    (function (PublicEvents) {
        PublicEvents["ConsentChanged"] = "ConsentChanged";
        PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
        PublicEvents["ShowFirstPage"] = "ShowFirstPage";
        PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
        PublicEvents["AcceptAll"] = "AcceptAll";
        PublicEvents["RejectAll"] = "RejectAll";
        PublicEvents["ShowTemplate"] = "ShowTemplate";
        PublicEvents["CloseTemplate"] = "CloseTemplate";
        PublicEvents["UpdateConsent"] = "UpdateConsent";
        PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
        PublicEvents["FetchConfig"] = "FetchConfig";
        PublicEvents["QuestionsFormSubmitWithoutMetaData"] = "QuestionsFormSubmitWithoutMetaData";
        PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
        PublicEvents["ShowPreferences"] = "ShowPreferences";
    })(PublicEvents || (PublicEvents = {}));
    var Events;
    (function (Events) {
        Events["Init"] = "Init";
        Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
        Events["ConfigReady"] = "ConfigReady";
    })(Events || (Events = {}));
    var SDKMode;
    (function (SDKMode) {
        SDKMode["Default"] = "Default";
        SDKMode["HeadLess"] = "HeadLess";
    })(SDKMode || (SDKMode = {}));
    var StyleType;
    (function (StyleType) {
        StyleType["Url"] = "Url";
        StyleType["Text"] = "Text";
    })(StyleType || (StyleType = {}));
    var Preference;
    (function (Preference) {
        Preference["OFF"] = "0";
        Preference["ON"] = "1";
    })(Preference || (Preference = {}));
    var Cookie;
    (function (Cookie) {
        Cookie["Consent"] = "msft-consent";
    })(Cookie || (Cookie = {}));
    var RegisteredDivType;
    (function (RegisteredDivType) {
        RegisteredDivType["Script"] = "script";
        RegisteredDivType["IFrame"] = "iframe";
    })(RegisteredDivType || (RegisteredDivType = {}));
    var NoticeType;
    (function (NoticeType) {
        NoticeType["TrackerCategory"] = "trackerCategory";
    })(NoticeType || (NoticeType = {}));
    var ErrorStrings;
    (function (ErrorStrings) {
        ErrorStrings["TemplateError"] = "<b>There is something wrong with template. Please check logs.</b>";
    })(ErrorStrings || (ErrorStrings = {}));
    var IntervalUnits;
    (function (IntervalUnits) {
        IntervalUnits["day"] = "day";
        IntervalUnits["week"] = "week";
        IntervalUnits["month"] = "month";
        IntervalUnits["year"] = "year";
    })(IntervalUnits || (IntervalUnits = {}));
    var QuestionType;
    (function (QuestionType) {
        QuestionType["Text"] = "Text";
        QuestionType["Email"] = "Email";
        QuestionType["Radio"] = "Radio";
        QuestionType["MultiSelect"] = "MultiSelect";
        QuestionType["Select"] = "Select";
        QuestionType["Date"] = "Date";
        QuestionType["PhoneNumber"] = "PhoneNumber";
        QuestionType["CreditCard"] = "CreditCard";
        QuestionType["Number"] = "Number";
        QuestionType["MultiLineText"] = "multiLineText";
    })(QuestionType || (QuestionType = {}));
    var QuestionValidation;
    (function (QuestionValidation) {
        QuestionValidation["Required"] = "required";
    })(QuestionValidation || (QuestionValidation = {}));
    var QuestionField;
    (function (QuestionField) {
        QuestionField["Question"] = "question";
        QuestionField["Placeholder"] = "placeholder";
        QuestionField["Options"] = "options";
    })(QuestionField || (QuestionField = {}));
    var ModelKind;
    (function (ModelKind) {
        ModelKind["WebConsentModel"] = "WebConsentModel";
        ModelKind["QuestionModel"] = "DSRSubmissionModel";
    })(ModelKind || (ModelKind = {}));
    var Template;
    (function (Template) {
        Template["Preferences"] = "Preferences";
    })(Template || (Template = {}));

    var BlockingServiceUtil = /** @class */ (function () {
        function BlockingServiceUtil() {
        }
        BlockingServiceUtil.shouldScriptConsented = function (categories) {
            if (categories !== null && categories.split(',').length > 0) {
                return this.consentCategoriesPending(categories);
            }
            return false;
        };
        BlockingServiceUtil.shouldIFrameConsented = function (categories) {
            if (categories !== null && categories.split(',').length > 0) {
                return this.consentCategoriesPending(categories);
            }
            return false;
        };
        BlockingServiceUtil.consentCategoriesPending = function (categories) {
            if (categories != null) {
                var pendingConsent = categories
                    .split(',')
                    .filter(function (x) {
                    var _a;
                    return !(((_a = window.__MSFT_SDK.Store.getters.userConsent) === null || _a === void 0 ? void 0 : _a.preferences[x]) ===
                        Preference.ON);
                });
                return pendingConsent != null && pendingConsent.length > 0;
            }
            return false;
        };
        BlockingServiceUtil.shouldbeUnblocked = function (msftConsentCategories) {
            if (msftConsentCategories != null) {
                var pendingConsent = msftConsentCategories
                    .split(',')
                    .filter(function (x) {
                    var _a;
                    return !(((_a = window.__MSFT_SDK.Store.getters.userConsent) === null || _a === void 0 ? void 0 : _a.preferences[x]) ===
                        Preference.ON);
                });
                return pendingConsent == null || pendingConsent.length == 0;
            }
            return true;
        };
        BlockingServiceUtil.shouldScriptUnblocked = function (type, msftConsentCategories) {
            if (type !== null && type === this.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE) {
                return this.shouldbeUnblocked(msftConsentCategories);
            }
            return false;
        };
        BlockingServiceUtil.shouldIFrameUnblocked = function (dataSrc, msftConsentCategories) {
            if (dataSrc !== null) {
                return this.shouldbeUnblocked(msftConsentCategories);
            }
            return false;
        };
        BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE = 'text/blocked';
        BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE = 'msft-consent-categories';
        BlockingServiceUtil.SRC_ATTRIBUTE = 'src';
        BlockingServiceUtil.DATASET_SRC_ATTRIBUTE = 'data-src';
        BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE = 'type';
        BlockingServiceUtil.MSFT_POST_CONSENT_SCRIPT_TYPE_ATTRIBUTE = 'msft-post-consent-type';
        BlockingServiceUtil.MSFT_CONSENT_IGNORE_ATTRIBUTE = 'msft-ignore-consent';
        return BlockingServiceUtil;
    }());

    var BlockingService = /** @class */ (function () {
        function BlockingService(enableMutationObserver) {
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.ConsentChanged, BlockingService.unblock);
            this.domObserver = null;
            if (enableMutationObserver) {
                this.domObserver = new MutationObserver(function (mutationRecords) {
                    return BlockingService.mutationCallback(mutationRecords);
                });
                this.domObserver.observe(document.documentElement, {
                    childList: true,
                    subtree: true,
                });
                window.__MSFT_SDK.Logger.info('Started tracker blocking service');
            }
        }
        BlockingService.mutationCallback = function (mutationRecords) {
            mutationRecords.forEach(function (mutationRecord) {
                mutationRecord.addedNodes.forEach(function (addedNode) {
                    try {
                        if (addedNode.nodeType === 1 &&
                            addedNode.hasAttribute(BlockingServiceUtil.MSFT_CONSENT_IGNORE_ATTRIBUTE) === false) {
                            if (addedNode.nodeName.toLowerCase() ===
                                window.__MSFT_SDK.enums.RegisteredDivType.Script) {
                                BlockingService.scriptMutationObserver(addedNode);
                            }
                            else if (addedNode.nodeName.toLowerCase() ===
                                window.__MSFT_SDK.enums.RegisteredDivType.IFrame) {
                                BlockingService.iframeMutationObserver(addedNode);
                            }
                        }
                    }
                    catch (error) {
                        console.warn('Failed to block the node ', addedNode.nodeName, 'with error ', error);
                        window.__MSFT_SDK.Logger.warn('Failed to block tag ' + addedNode.nodeName);
                    }
                });
            });
        };
        BlockingService.scriptMutationObserver = function (scriptNode) {
            var type = scriptNode.type;
            var msftConsentCategories = scriptNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE);
            if (BlockingServiceUtil.shouldScriptConsented(msftConsentCategories)) {
                scriptNode.setAttribute(BlockingServiceUtil.MSFT_POST_CONSENT_SCRIPT_TYPE_ATTRIBUTE, type);
                scriptNode.setAttribute(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE, BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE);
            }
            // Firefox has this additional event which prevents scripts from being executed
            var beforeScriptExecuteListener = function (event) {
                // Prevent only marked scripts from executing
                if (scriptNode.getAttribute(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE) ===
                    BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE)
                    event.preventDefault();
                scriptNode.removeEventListener('beforescriptexecute', beforeScriptExecuteListener);
            };
            scriptNode.addEventListener('beforescriptexecute', beforeScriptExecuteListener);
        };
        BlockingService.iframeMutationObserver = function (iframeNode) {
            var src = iframeNode.src;
            var msftConsentCategories = iframeNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE);
            if (BlockingServiceUtil.shouldIFrameConsented(msftConsentCategories)) {
                iframeNode.removeAttribute(BlockingServiceUtil.SRC_ATTRIBUTE);
                iframeNode.setAttribute(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE, src);
            }
        };
        BlockingService.unblock = function () {
            window.__MSFT_SDK.Logger.info('Tracker Blocking unblock is started');
            BlockingService.unblockScripts();
            BlockingService.unblockIFrames();
        };
        BlockingService.unblockScripts = function () {
            document
                .querySelectorAll("script[".concat(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE, "][").concat(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE, "=\"").concat(BlockingServiceUtil.SCRIPT_BLOCKING_TYPE_ATTRIBUTE_VALUE, "\"]:not([").concat(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE, "=\"\"])"))
                .forEach(function (blockedNode) {
                var scriptNode = blockedNode;
                try {
                    var consentCategories = scriptNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE);
                    var notConsentedCategories = consentCategories === null || consentCategories === void 0 ? void 0 : consentCategories.split(',').filter(function (x) {
                        var _a;
                        return !(((_a = window.__MSFT_SDK.Store.getters.userConsent) === null || _a === void 0 ? void 0 : _a.preferences[x]) === Preference.ON);
                    });
                    if (notConsentedCategories == null ||
                        notConsentedCategories.length === 0) {
                        var typeValue = scriptNode.getAttribute(BlockingServiceUtil.MSFT_POST_CONSENT_SCRIPT_TYPE_ATTRIBUTE);
                        typeValue =
                            typeValue != null ? typeValue : 'application/javascript';
                        var parentNode = scriptNode.parentNode;
                        parentNode === null || parentNode === void 0 ? void 0 : parentNode.removeChild(scriptNode);
                        var newNode = document.createElement('script');
                        for (var i = 0; i < scriptNode.attributes.length; i++) {
                            var attribute = scriptNode.attributes[i];
                            if (attribute.name !== 'type') {
                                newNode.setAttribute(attribute.name, scriptNode.attributes[i].value);
                            }
                            else {
                                newNode.setAttribute(BlockingServiceUtil.SCRIPT_TYPE_ATTRIBUTE, typeValue);
                            }
                        }
                        newNode.appendChild(document.createTextNode(scriptNode.innerHTML));
                        parentNode == null
                            ? document.head.appendChild(newNode)
                            : parentNode.appendChild(newNode);
                    }
                    else {
                        window.__MSFT_SDK.Logger.info('Failed to unblock script ' +
                            scriptNode.src +
                            'not consented for categories ' +
                            (notConsentedCategories === null || notConsentedCategories === void 0 ? void 0 : notConsentedCategories.toString()));
                    }
                }
                catch (error) {
                    // eslint-disable-next-line
                    console.warn('Failed to unblock the script ', scriptNode.src, 'with error ', error);
                    window.__MSFT_SDK.Logger.error('Failed to unblock script ' + scriptNode.src);
                }
            });
        };
        BlockingService.unblockIFrames = function () {
            document
                .querySelectorAll("iframe[".concat(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE, "][").concat(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE, "]:not([").concat(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE, "=\"\"][").concat(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE, "=\"\"])"))
                .forEach(function (blockedNode) {
                var iframeNode = blockedNode;
                try {
                    var consentCategories = iframeNode.getAttribute(BlockingServiceUtil.MSFT_CONSENT_CATEGORIES_ATTRIBUTE);
                    var notConsentedCategories = consentCategories === null || consentCategories === void 0 ? void 0 : consentCategories.split(',').filter(function (x) {
                        var _a;
                        return !(((_a = window.__MSFT_SDK.Store.getters.userConsent) === null || _a === void 0 ? void 0 : _a.preferences[x]) === Preference.ON);
                    });
                    if (notConsentedCategories == null ||
                        notConsentedCategories.length === 0) {
                        var parentNode = iframeNode.parentNode;
                        parentNode === null || parentNode === void 0 ? void 0 : parentNode.removeChild(iframeNode);
                        var newNode = iframeNode.cloneNode(true);
                        var datasrc = newNode.getAttribute(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE);
                        datasrc = datasrc !== null ? datasrc : '';
                        newNode.setAttribute(BlockingServiceUtil.SRC_ATTRIBUTE, datasrc);
                        newNode.removeAttribute(BlockingServiceUtil.DATASET_SRC_ATTRIBUTE);
                        parentNode == null
                            ? document.head.appendChild(newNode)
                            : parentNode.appendChild(newNode);
                    }
                    else {
                        window.__MSFT_SDK.Logger.info('Failed to unblock iframe ' +
                            iframeNode.src +
                            'not consented for categories ' +
                            (notConsentedCategories === null || notConsentedCategories === void 0 ? void 0 : notConsentedCategories.toString()));
                    }
                }
                catch (error) {
                    // eslint-disable-next-line
                    console.warn('Failed to unblock the iframe ', iframeNode.src, 'with error ', error);
                    window.__MSFT_SDK.Logger.error('Failed to unblock iFrame ' + iframeNode.src);
                }
            });
        };
        return BlockingService;
    }());
    var BlockingServiceInstance = new BlockingService(true);

    var PublicAPI = /** @class */ (function () {
        function PublicAPI() {
        }
        //Public API
        PublicAPI.getBlockingService = function () {
            return BlockingServiceInstance;
        };
        return PublicAPI;
    }());

    window.__MSFT_SDK.Helpers.AddPublicApis(PublicAPI);
    window.__MSFT_SDK.Helpers.exposeApis();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
