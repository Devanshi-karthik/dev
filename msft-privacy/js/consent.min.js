/* eslint-disable @microsoft/sdl/no-cookies */
/* eslint-disable @microsoft/sdl/no-inner-html */
(function () {
    'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var ObjectUtils = /** @class */ (function () {
        function ObjectUtils() {
        }
        ObjectUtils.isObject = function (item) {
            return item && typeof item === 'object' && !Array.isArray(item);
        };
        ObjectUtils.mergeDeep = function (target) {
            var _a, _b;
            var sources = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                sources[_i - 1] = arguments[_i];
            }
            if (!sources.length)
                return target;
            var source = sources.shift();
            if (this.isObject(target) && this.isObject(source)) {
                for (var key in source) {
                    if (this.isObject(source[key])) {
                        if (!target[key])
                            Object.assign(target, (_a = {}, _a[key] = {}, _a));
                        this.mergeDeep(target[key], source[key]);
                    }
                    else {
                        Object.assign(target, (_b = {}, _b[key] = source[key], _b));
                    }
                }
            }
            return this.mergeDeep.apply(this, __spreadArray([target], __read(sources), false));
        };
        return ObjectUtils;
    }());

    var SDKModules;
    (function (SDKModules) {
        SDKModules["PRESENTATION"] = "presentation";
        SDKModules["PREVIEW"] = "preview";
        SDKModules["CONFIG"] = "config";
        SDKModules["HANDLEBAR"] = "handlebar";
        SDKModules["PROXY"] = "proxy";
        SDKModules["DSR"] = "dsr";
    })(SDKModules || (SDKModules = {}));
    var SDKModulesPath;
    (function (SDKModulesPath) {
        SDKModulesPath["PRESENTATION"] = "$jsRootPath/msft-privacy/js/presentation.min.js";
        SDKModulesPath["PREVIEW"] = "$jsRootPath/msft-privacy/js/preview.min.js";
        SDKModulesPath["HANDLEBAR"] = "$jsRootPath/msft-privacy/js/vendor/handlebars.min.js";
        SDKModulesPath["PROXY"] = "$jsRootPath/msft-privacy/js/proxy.min.js";
        SDKModulesPath["DSR"] = "$jsRootPath/msft-privacy/js/dsr.min.js";
    })(SDKModulesPath || (SDKModulesPath = {}));
    var SDKModulesSourceVariable;
    (function (SDKModulesSourceVariable) {
        SDKModulesSourceVariable["PRESENTATION"] = "msft-presentation.js";
        SDKModulesSourceVariable["HANDLEBAR"] = "msft-handlebars.js";
        SDKModulesSourceVariable["PROXY"] = "msft-proxy.js";
        SDKModulesSourceVariable["DSR"] = "dsr.js";
    })(SDKModulesSourceVariable || (SDKModulesSourceVariable = {}));
    var ModuleSourceType;
    (function (ModuleSourceType) {
        ModuleSourceType["PATH"] = "path";
        ModuleSourceType["VARIABLE"] = "variable";
    })(ModuleSourceType || (ModuleSourceType = {}));

    var State$1 = /** @class */ (function () {
        function State(state) {
            this.state = state || {
                config: {},
                debug: {
                    logs: [],
                    events: [],
                },
                custom: {},
            };
        }
        return State;
    }());

    var Getters$1 = /** @class */ (function (_super) {
        __extends(Getters, _super);
        function Getters(state) {
            return _super.call(this, state) || this;
        }
        Object.defineProperty(Getters.prototype, "debugInfo", {
            get: function () {
                return this.state.debug;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "config", {
            get: function () {
                return this.state.config;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "userConsent", {
            get: function () {
                return this.state.custom.userConsent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isHeadless", {
            // TODO: Implement below getters
            get: function () {
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isPreviewMode", {
            get: function () {
                var _a;
                return ((_a = this.state.config.initConfig) === null || _a === void 0 ? void 0 : _a.preview) || false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isActionDisabled", {
            get: function () {
                var _a;
                return ((_a = this.state.config.initConfig) === null || _a === void 0 ? void 0 : _a.disableActions) || false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isLivePreviewMode", {
            get: function () {
                var _a;
                return ((_a = window.parent) === null || _a === void 0 ? void 0 : _a.name) === 'ConsentLivePreview';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "presentationVariable", {
            get: function () {
                return SDKModulesSourceVariable.PRESENTATION;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "handlebarVariable", {
            get: function () {
                return SDKModulesSourceVariable.HANDLEBAR;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "proxyVariable", {
            get: function () {
                return SDKModulesSourceVariable.PROXY;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "dsrVariable", {
            get: function () {
                return SDKModulesSourceVariable.DSR;
            },
            enumerable: false,
            configurable: true
        });
        return Getters;
    }(State$1));

    var Reducers$1 = /** @class */ (function (_super) {
        __extends(Reducers, _super);
        function Reducers(state) {
            return _super.call(this, state) || this;
        }
        Reducers.prototype.saveDebugInfo = function (_a) {
            var event = _a.event, log = _a.log;
            if (event) {
                this.state.debug.events.push(event);
            }
            if (log) {
                this.state.debug.logs.push(log);
            }
        };
        Reducers.prototype.setUserConsent = function (consent) {
            this.state.custom.userConsent = consent;
        };
        Reducers.prototype.setInitConfig = function (initConfig) {
            this.state.config.initConfig = initConfig;
        };
        return Reducers;
    }(State$1));

    var state$1 = new State$1().state;
    var getter$1 = new Getters$1(state$1);
    var reducer$1 = new Reducers$1(state$1);
    var Store = {
        getters: getter$1,
        reducers: reducer$1,
        addReducers: function (reducers) {
            this.reducers = ObjectUtils.mergeDeep(this.reducers, reducers);
        },
        addGetters: function (getters) {
            Object.defineProperties(this.getters, Object.getOwnPropertyDescriptors(getters.prototype));
        },
    };

    var LogLevels;
    (function (LogLevels) {
        LogLevels[LogLevels["INFO"] = 0] = "INFO";
        LogLevels[LogLevels["WARN"] = 1] = "WARN";
        LogLevels[LogLevels["ERROR"] = 2] = "ERROR";
    })(LogLevels || (LogLevels = {}));

    var ConsoleLogger = /** @class */ (function () {
        function ConsoleLogger() {
        }
        /**
         * Browser's console logger plugin.
         *
         * @param {LogLevels} level Log level
         * @param {string} message Log message
         */
        ConsoleLogger.log = function (level, message) {
            switch (level) {
                case LogLevels.WARN:
                    console.warn(message);
                    break;
                case LogLevels.ERROR:
                    console.error(message);
                    break;
                default:
                    {
                        console.log(message);
                    }
                    break;
            }
        };
        return ConsoleLogger;
    }());

    /**
     * @typedef {import("core/types/interfaces").IGenericObject} IGenericObject
     */
    var Logger = /** @class */ (function () {
        function Logger() {
        }
        /**
         * Info logs
         *
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         */
        Logger.info = function (message, data) {
            Logger.log(LogLevels.INFO, message, data);
        };
        /**
         * Warning logs
         *
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         */
        Logger.warn = function (message, data) {
            Logger.log(LogLevels.WARN, message, data);
        };
        /**
         * Error logs
         *
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         */
        Logger.error = function (message, data) {
            Logger.log(LogLevels.ERROR, message, data);
        };
        /**
         * Logs the message using the plugin based in level.
         *
         * @param {LogLevels} logLevel Log level
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         */
        Logger.log = function (logLevel, message, data) {
            var formattedMessage = Logger.formatLogMessage(logLevel, message, data);
            Store.reducers.saveDebugInfo({ log: formattedMessage });
            ConsoleLogger.log(logLevel, formattedMessage);
        };
        /**
         * Formats the logger message.
         *
         * @param {LogLevels} logLevel Log level
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         * @returns {string} Formatted logger message
         */
        Logger.formatLogMessage = function (logLevel, message, data) {
            var stringifiedData = data ? "| ".concat(JSON.stringify(data)) : '';
            return "[".concat(LogLevels[logLevel], "] ").concat(message, " ").concat(stringifiedData);
        };
        return Logger;
    }());

    var EventsReplayStrategy;
    (function (EventsReplayStrategy) {
        EventsReplayStrategy[EventsReplayStrategy["REPLAY_ALL"] = 0] = "REPLAY_ALL";
        EventsReplayStrategy[EventsReplayStrategy["REPLAY_LATEST"] = 1] = "REPLAY_LATEST";
        EventsReplayStrategy[EventsReplayStrategy["SKIP"] = 2] = "SKIP";
    })(EventsReplayStrategy || (EventsReplayStrategy = {}));

    var ReplayAllEvents = /** @class */ (function () {
        function ReplayAllEvents() {
            this.strategy = EventsReplayStrategy.REPLAY_ALL;
        }
        ReplayAllEvents.prototype.execute = function (callback, events) {
            events.forEach(function (_a) {
                var payload = _a.payload;
                return callback(payload);
            });
        };
        return ReplayAllEvents;
    }());
    var ReplayAllEvents$1 = new ReplayAllEvents();

    var ReplayLatestEvent = /** @class */ (function () {
        function ReplayLatestEvent() {
            this.strategy = EventsReplayStrategy.REPLAY_LATEST;
        }
        ReplayLatestEvent.prototype.execute = function (callback, events) {
            if (events.length) {
                callback(events[events.length - 1].payload);
            }
        };
        return ReplayLatestEvent;
    }());
    var ReplayLatestEvent$1 = new ReplayLatestEvent();

    var SkipEventReplay = /** @class */ (function () {
        function SkipEventReplay() {
            this.strategy = EventsReplayStrategy.SKIP;
        }
        SkipEventReplay.prototype.execute = function () {
            return void 0;
        };
        return SkipEventReplay;
    }());
    var SkipEventReplay$1 = new SkipEventReplay();

    var _a$1;
    var ReplayStrategy = (_a$1 = {},
        _a$1[EventsReplayStrategy.REPLAY_ALL] = ReplayAllEvents$1,
        _a$1[EventsReplayStrategy.REPLAY_LATEST] = ReplayLatestEvent$1,
        _a$1[EventsReplayStrategy.SKIP] = SkipEventReplay$1,
        _a$1);

    var EventsRecording = /** @class */ (function () {
        function EventsRecording() {
        }
        EventsRecording.record = function (event, payload) {
            this.eventsLogs[event] = this.eventsLogs[event] || [];
            this.eventsLogs[event].push({ payload: payload });
        };
        EventsRecording.replay = function (event, callback, strategy) {
            if (strategy === void 0) { strategy = this.DEFAULT_STRATEGY; }
            ReplayStrategy[strategy].execute(callback, this.eventsLogs[event] || []);
        };
        EventsRecording.eventsLogs = {};
        EventsRecording.DEFAULT_STRATEGY = EventsReplayStrategy.REPLAY_LATEST;
        return EventsRecording;
    }());

    var EventBus = /** @class */ (function () {
        function EventBus() {
            this.events = {};
            this.eventIdCounter = 0;
        }
        /**
         * Gets default event details.
         *
         * @returns {IEventDetails} Default event details
         */
        EventBus.getDefaultEventDetails = function () {
            return {
                executionCount: 0,
                callbacks: [],
            };
        };
        /**
         * Add an event listener.
         *
         * @param {string} event Event name
         * @param {ICallback} callback Listener callback
         * @param {IEventHandlerProperties} properties Additional configuration properties
         * @returns {number} Event ID
         */
        EventBus.prototype.on = function (event, callback, _a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.sync, sync = _c === void 0 ? false : _c, replayStrategy = _b.replayStrategy;
            Logger.info("Callback registered for event : ".concat(event));
            this.eventIdCounter++;
            var eventDetails = {
                id: this.eventIdCounter,
                fn: callback,
                sync: sync,
            };
            this.events[event] =
                this.events[event] || EventBus.getDefaultEventDetails();
            this.events[event].callbacks.push(eventDetails);
            EventsRecording.replay(event, callback, replayStrategy);
            return this.eventIdCounter;
        };
        /**
         * Execute an event.
         *
         * @param {string} event Event name
         * @param {import("core/types/interfaces").IGenericObject} payload Payload data
         */
        EventBus.prototype.trigger = function (event, payload) {
            var _this = this;
            var _a;
            if (payload === void 0) { payload = {}; }
            var callbacks = ((_a = this.events[event]) === null || _a === void 0 ? void 0 : _a.callbacks) || [];
            // Let the logic run even if no active listeners so that we can record the events.
            Logger.info("Started executing '".concat(callbacks.length, "' callbacks for event '").concat(event, "'"), payload);
            Store.reducers.saveDebugInfo({ event: event });
            callbacks.forEach(function (eventHandler) { return __awaiter(_this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            if (!!eventHandler.sync) return [3 /*break*/, 2];
                            return [4 /*yield*/, Promise.resolve()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            eventHandler.fn(payload);
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            Logger.error("Error in executing callback id : ".concat(eventHandler.id), e_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
            EventsRecording.record(event, payload);
            Logger.info("Completed executing '".concat(callbacks.length, "' callbacks for event '").concat(event, "'"), payload);
            if (this.events[event]) {
                this.events[event].executionCount++;
            }
        };
        /**
         * Detach an event listener.
         *
         * @param {string} event Event name
         * @param {number | ICallback} eventIdOrCallback Event listener ID or callback to remove
         */
        EventBus.prototype.off = function (event, eventIdOrCallback) {
            var _a;
            var idx = (_a = this.events[event]) === null || _a === void 0 ? void 0 : _a.callbacks.findIndex(function (eventDetails) {
                return eventDetails.id === eventIdOrCallback ||
                    eventDetails.fn === eventIdOrCallback;
            });
            if (typeof idx === 'number' && ~idx) {
                Logger.info("Removing event listener '".concat(this.events[event].callbacks[idx].id, "' of '").concat(event, "' event"));
                this.events[event].callbacks.splice(idx, 1);
            }
            else {
                Logger.error("Unable to remove event listener for event '".concat(event, "'. No matching event id or callback found."));
            }
        };
        return EventBus;
    }());
    var EventBus$1 = new EventBus();

    var ConsentModelType;
    (function (ConsentModelType) {
        ConsentModelType["Explicit"] = "Explicit";
        ConsentModelType["Implicit"] = "Implicit";
    })(ConsentModelType || (ConsentModelType = {}));
    var PublicEvents;
    (function (PublicEvents) {
        PublicEvents["ConsentChanged"] = "ConsentChanged";
        PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
        PublicEvents["ShowFirstPage"] = "ShowFirstPage";
        PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
        PublicEvents["AcceptAll"] = "AcceptAll";
        PublicEvents["RejectAll"] = "RejectAll";
        PublicEvents["ShowTemplate"] = "ShowTemplate";
        PublicEvents["CloseTemplate"] = "CloseTemplate";
        PublicEvents["UpdateConsent"] = "UpdateConsent";
        PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
        PublicEvents["FetchConfig"] = "FetchConfig";
        PublicEvents["QuestionsFormSubmitWithoutMetaData"] = "QuestionsFormSubmitWithoutMetaData";
        PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
        PublicEvents["ShowPreferences"] = "ShowPreferences";
    })(PublicEvents || (PublicEvents = {}));
    var Events;
    (function (Events) {
        Events["Init"] = "Init";
        Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
        Events["ConfigReady"] = "ConfigReady";
    })(Events || (Events = {}));
    var SDKMode;
    (function (SDKMode) {
        SDKMode["Default"] = "Default";
        SDKMode["HeadLess"] = "HeadLess";
    })(SDKMode || (SDKMode = {}));
    var StyleType;
    (function (StyleType) {
        StyleType["Url"] = "Url";
        StyleType["Text"] = "Text";
    })(StyleType || (StyleType = {}));
    var Preference;
    (function (Preference) {
        Preference["OFF"] = "0";
        Preference["ON"] = "1";
    })(Preference || (Preference = {}));
    var Cookie;
    (function (Cookie) {
        Cookie["Consent"] = "msft-consent";
    })(Cookie || (Cookie = {}));
    var RegisteredDivType;
    (function (RegisteredDivType) {
        RegisteredDivType["Script"] = "script";
        RegisteredDivType["IFrame"] = "iframe";
    })(RegisteredDivType || (RegisteredDivType = {}));
    var NoticeType;
    (function (NoticeType) {
        NoticeType["TrackerCategory"] = "trackerCategory";
    })(NoticeType || (NoticeType = {}));
    var ErrorStrings;
    (function (ErrorStrings) {
        ErrorStrings["TemplateError"] = "<b>There is something wrong with template. Please check logs.</b>";
    })(ErrorStrings || (ErrorStrings = {}));
    var IntervalUnits;
    (function (IntervalUnits) {
        IntervalUnits["day"] = "day";
        IntervalUnits["week"] = "week";
        IntervalUnits["month"] = "month";
        IntervalUnits["year"] = "year";
    })(IntervalUnits || (IntervalUnits = {}));
    var QuestionType;
    (function (QuestionType) {
        QuestionType["Text"] = "Text";
        QuestionType["Email"] = "Email";
        QuestionType["Radio"] = "Radio";
        QuestionType["MultiSelect"] = "MultiSelect";
        QuestionType["Select"] = "Select";
        QuestionType["Date"] = "Date";
        QuestionType["PhoneNumber"] = "PhoneNumber";
        QuestionType["CreditCard"] = "CreditCard";
        QuestionType["Number"] = "Number";
        QuestionType["MultiLineText"] = "multiLineText";
    })(QuestionType || (QuestionType = {}));
    var QuestionValidation;
    (function (QuestionValidation) {
        QuestionValidation["Required"] = "required";
    })(QuestionValidation || (QuestionValidation = {}));
    var QuestionField;
    (function (QuestionField) {
        QuestionField["Question"] = "question";
        QuestionField["Placeholder"] = "placeholder";
        QuestionField["Options"] = "options";
    })(QuestionField || (QuestionField = {}));
    var ModelKind;
    (function (ModelKind) {
        ModelKind["WebConsentModel"] = "WebConsentModel";
        ModelKind["QuestionModel"] = "DSRSubmissionModel";
    })(ModelKind || (ModelKind = {}));
    var Template;
    (function (Template) {
        Template["Preferences"] = "Preferences";
    })(Template || (Template = {}));

    var enums = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get ConsentModelType () { return ConsentModelType; },
        get PublicEvents () { return PublicEvents; },
        get Events () { return Events; },
        get SDKMode () { return SDKMode; },
        get StyleType () { return StyleType; },
        get Preference () { return Preference; },
        get Cookie () { return Cookie; },
        get RegisteredDivType () { return RegisteredDivType; },
        get NoticeType () { return NoticeType; },
        get ErrorStrings () { return ErrorStrings; },
        get IntervalUnits () { return IntervalUnits; },
        get QuestionType () { return QuestionType; },
        get QuestionValidation () { return QuestionValidation; },
        get QuestionField () { return QuestionField; },
        get ModelKind () { return ModelKind; },
        get Template () { return Template; }
    });

    var InternalAPI = /** @class */ (function () {
        function InternalAPI() {
        }
        InternalAPI.initConsent = function (config) {
            Store.reducers.setInitConfig(config);
            EventBus$1.trigger(Events.Init, config);
        };
        return InternalAPI;
    }());

    var MSFTConsent = /** @class */ (function () {
        function MSFTConsent() {
        }
        /**
         * Init will initialize the sdk.
         *
         * @param  {import("core/types/interfaces").IInitConfig} config init config
         */
        MSFTConsent.init = function (config) {
            InternalAPI.initConsent(config);
        };
        /**
         * Add an event listener.
         *
         * @param {string} event Event name
         * @param {ICallback} callback Listener callback
         * @param {IEventHandlerProperties} properties Additional configuration properties
         * @returns {number} Event ID
         */
        MSFTConsent.on = function (event, callback, _a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.sync, sync = _c === void 0 ? false : _c;
            if (event in Events) {
                Logger.error("Cannot subscribe to internal event '".concat(event, "'."));
                return;
            }
            return EventBus$1.on(event, callback, { sync: sync });
        };
        /**
         * Execute an event.
         *
         * @param {string} event Event name
         * @param {import("core/types/interfaces").IGenericObject} payload Payload data
         */
        MSFTConsent.trigger = function (event, payload) {
            if (event in Events) {
                Logger.error("Cannot trigger internal event '".concat(event, "'."));
                return;
            }
            EventBus$1.trigger(event, payload);
        };
        /**
         * Detach an event listener.
         *
         * @param {string} event Event name
         * @param {number | ICallback} eventIdOrCallback Event listener ID or callback to remove
         */
        MSFTConsent.off = function (event, eventIdOrCallback) {
            if (event in Events) {
                Logger.error("Cannot detach listener for internal event '".concat(event, "'."));
                return;
            }
            EventBus$1.off(event, eventIdOrCallback);
        };
        return MSFTConsent;
    }());

    var IFrameUtils = /** @class */ (function () {
        function IFrameUtils() {
        }
        /**
         * Create and add new iframe
         *
         * @param  {string} bodyHtml body html content
         * @param  {string} iframeId id to be assigned to iframe
         * @param  {HTMLElement|null} parentElement parent element to which iframe will be added
         * @param  {window.__MSFT_SDK.interfaces.IStyle[]} styles user provided styles
         */
        IFrameUtils.createIFrame = function (bodyHtml, iframeId, parentElement, styles) {
            var _a;
            var renderWithoutIframe = (_a = Store.getters.config.initConfig) === null || _a === void 0 ? void 0 : _a.renderTemplateWithoutIframe;
            if (document.body) {
                IFrameUtils.appendElement(renderWithoutIframe
                    ? IFrameUtils.getDivElement(bodyHtml, iframeId, parentElement == null)
                    : IFrameUtils.getIframeObject(bodyHtml, iframeId, parentElement == null, styles), parentElement);
            }
            else {
                window.addEventListener('DOMContentLoaded', function () {
                    IFrameUtils.appendElement(renderWithoutIframe
                        ? IFrameUtils.getDivElement(bodyHtml, iframeId, parentElement == null)
                        : IFrameUtils.getIframeObject(bodyHtml, iframeId, parentElement == null, styles), parentElement);
                });
            }
        };
        IFrameUtils.getIframeObject = function (bodyHtml, iframeId, fixedPosition, styles) {
            var html = "<html><head><style>.msft-iframe-body{background-color: rgb(204 204 204 / 60%);}</style>".concat(IFrameUtils.getAllStylesAsText(styles), "</head><body class=\"msft-iframe-body\">").concat(bodyHtml, "</body></html>");
            var iframe = document.createElement('iframe');
            iframe.setAttribute('style', "height:100%;width:100%;border:0;position:".concat(fixedPosition ? 'fixed' : 'relative', ";top:0;left:0;z-index:5000;"));
            iframe.className = 'msft-model-container';
            iframe.setAttribute('sandbox', 'allow-scripts allow-forms');
            iframe.id = iframeId;
            iframe.srcdoc = html;
            return iframe;
        };
        IFrameUtils.getDivElement = function (bodyHtml, divId, fixedPosition) {
            var css = '.msft-iframe-body{background-color: rgb(204 204 204 / 60%);height:100%;width:100%}';
            var styleElement = document.createElement('style');
            styleElement.appendChild(document.createTextNode(css));
            var childDiv = document.createElement('div');
            // eslint-disable-next-line @microsoft/sdl/no-inner-html
            childDiv.innerHTML = bodyHtml;
            childDiv.className = 'msft-iframe-body';
            var containerDiv = document.createElement('div');
            containerDiv.setAttribute('style', "height:100%;width:100%;border:0;position:".concat(fixedPosition ? 'fixed' : 'relative', ";top:0;left:0;z-index:5000;"));
            containerDiv.className = 'msft-model-container';
            containerDiv.id = divId;
            containerDiv.appendChild(styleElement);
            containerDiv.appendChild(childDiv);
            var scripts = containerDiv.getElementsByTagName('script');
            var scriptsToBeAdded = [];
            for (var i = 0; i < scripts.length; i++) {
                var script = document.createElement('script');
                if (scripts[i].src) {
                    script.src = scripts[i].src;
                }
                else {
                    var inlineScript = document.createTextNode(scripts[i].innerHTML);
                    script.appendChild(inlineScript);
                }
                scriptsToBeAdded.push(script);
            }
            setTimeout(function () {
                scriptsToBeAdded.forEach(function (script) {
                    var _a;
                    (_a = document.getElementById(divId)) === null || _a === void 0 ? void 0 : _a.appendChild(script);
                });
            });
            return containerDiv;
        };
        /**
         * Append iframe element to dom
         *
         * @param  {HTMLElement} element element
         * @param  {HTMLElement|null} parentElement parent container
         */
        IFrameUtils.appendElement = function (element, parentElement) {
            (parentElement || document.body).appendChild(element);
        };
        /**
         * @param  {IStyle[]} styles user provided styles
         * @returns {string} style text
         */
        IFrameUtils.getAllStylesAsText = function (styles) {
            var styleText = '';
            var styleElements = __spreadArray(__spreadArray([], __read(document.getElementsByTagName('style')), false), __read(document.getElementsByTagName('link')), false);
            styleElements.forEach(function (elm) { return (styleText += elm.outerHTML); });
            styles === null || styles === void 0 ? void 0 : styles.forEach(function (style) {
                if (style.type == StyleType.Text) {
                    var css = document.createElement('style');
                    css.appendChild(document.createTextNode(style.value));
                    styleText += css.outerHTML;
                }
                else if (style.type == StyleType.Url) {
                    var link = document.createElement('link');
                    link.rel = 'stylesheet';
                    link.href = style.value;
                    styleText += link.outerHTML;
                }
            });
            return styleText;
        };
        return IFrameUtils;
    }());

    var PublicApiHelper = /** @class */ (function () {
        function PublicApiHelper() {
        }
        PublicApiHelper.AddPublicApis = function (Apis) {
            this.PublicApis = Apis;
        };
        PublicApiHelper.exposeApis = function () {
            var PublicApis = Object.getOwnPropertyNames(window.MSFTConsent).filter(function (element) {
                return typeof element == 'function';
            });
            var toBeAddedApis = Object.getOwnPropertyNames(this.PublicApis);
            PublicApis.forEach(function (element) {
                if (toBeAddedApis.includes(element))
                    Logger.warn("Already existing Public Api with the same name '".concat(element, "'"));
            });
            Object.defineProperties(window.MSFTConsent, Object.getOwnPropertyDescriptors(this.PublicApis));
        };
        return PublicApiHelper;
    }());

    var Constants = {
        OFF: '0',
        ON: '1',
        COOKIE_NAME: 'APCC',
        ConsentConfig: 'MicrosoftConsentConfig',
    };

    var constants = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Constants: Constants
    });

    var GraphUtils = /** @class */ (function () {
        function GraphUtils() {
        }
        GraphUtils.topologicalSort = function (directedEdges) {
            var _this = this;
            var adjacencyList = this.getAdjacencyList(directedEdges);
            var sortedNodesMap = {};
            return Object.keys(adjacencyList).reduce(function (sortedNodes, currentNode) {
                return sortedNodes.concat(_this.dfs(currentNode, adjacencyList, sortedNodesMap));
            }, []);
        };
        GraphUtils.dfs = function (currentNode, adjacencyList, sortedNodesMap, visitedNodes) {
            var _this = this;
            var _a;
            if (visitedNodes === void 0) { visitedNodes = {}; }
            if (visitedNodes[currentNode]) {
                throw new Error('Circular dependency found!');
            }
            if (!sortedNodesMap[currentNode]) {
                visitedNodes[currentNode] = true;
                var sortedNodes = ((_a = adjacencyList[currentNode]) === null || _a === void 0 ? void 0 : _a.reduce(function (partiallySortedNodes, dependentNode) {
                    return partiallySortedNodes.concat(_this.dfs(dependentNode, adjacencyList, sortedNodesMap, visitedNodes));
                }, [])) || [];
                sortedNodesMap[currentNode] = true;
                visitedNodes[currentNode] = false;
                return sortedNodes.concat(currentNode);
            }
            return [];
        };
        GraphUtils.getAdjacencyList = function (directedEdges) {
            var adjacencyList = {};
            directedEdges.forEach(function (_a) {
                var _b;
                var _c = __read(_a, 2), nodeA = _c[0], dependencyNodes = _c[1];
                adjacencyList[nodeA] = adjacencyList[nodeA] || [];
                (_b = adjacencyList[nodeA]).push.apply(_b, __spreadArray([], __read(dependencyNodes), false));
            });
            return adjacencyList;
        };
        return GraphUtils;
    }());

    var ConfigCallbacks = {
        Translation: function (noticeName, translation) {
            var _a;
            Logger.info('fetch translation callback invoked', {
                noticeName: noticeName,
                translation: translation,
            });
            window.__MSFT_SDK.Store.reducers.setTranslations(__spreadArray(__spreadArray([], __read((window.__MSFT_SDK.Store.getters.translations || [])), false), [
                (_a = {}, _a[noticeName] = translation.translations, _a),
            ], false));
        },
        Model: function (val) {
            Logger.info('fetch model callback invoked', { val: val });
            window.__MSFT_SDK.Store.reducers.setCurrentModel(val);
        },
        Template: function (val) {
            Logger.info('fetch template callback invoked', { val: val });
            window.__MSFT_SDK.Store.reducers.setTemplate(val);
        },
        Question: function (val) {
            Logger.info('fetch questions callback invoked', { val: val });
            window.__MSFT_SDK.Store.reducers.setQuestions(__spreadArray(__spreadArray([], __read(window.__MSFT_SDK.Store.getters.questions), false), [
                val,
            ], false));
        },
    };

    // TODO: Add real store getters and path names
    var SDKDependency = {
        getDependencies: function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            return ({
                fields: {
                    configId: (_a = window.__MSFT_SDK.config) === null || _a === void 0 ? void 0 : _a.id,
                    packageName: (_b = window.__MSFT_SDK.config) === null || _b === void 0 ? void 0 : _b.name,
                    model: ((_c = Store.getters.selectedCoreModel) === null || _c === void 0 ? void 0 : _c.name) || '',
                    lcid: Store.getters.lcid,
                    sdkRootPath: ((_d = Store.getters.config.initConfig) === null || _d === void 0 ? void 0 : _d.assetPath) ||
                        ((_e = Store.getters.selectedCoreModel) === null || _e === void 0 ? void 0 : _e.assetsPath) ||
                        '',
                    jsRootPath: ((_f = Store.getters.config.initConfig) === null || _f === void 0 ? void 0 : _f.jsPath) ||
                        ((_g = Store.getters.selectedCoreModel) === null || _g === void 0 ? void 0 : _g.assetsPath) ||
                        '',
                    modelVersion: ((_h = Store.getters.selectedCoreModel) === null || _h === void 0 ? void 0 : _h.version.toString()) || '0',
                    packageVersion: 'latest',
                },
                modules: __spreadArray([
                    {
                        module: SDKModules.CONFIG,
                        source: {
                            type: ModuleSourceType.VARIABLE,
                            value: 'config.js',
                        },
                        dependency: [],
                        callback: function () {
                            window.__MSFT_SDK.EventBus.trigger(window.__MSFT_SDK.enums.Events.ConfigReady);
                        },
                        condition: function () {
                            return !(Store.getters.isPreviewMode || Store.getters.isLivePreviewMode);
                        },
                        configs: __spreadArray(__spreadArray(__spreadArray([], __read((((_j = Store.getters.selectedCoreModel) === null || _j === void 0 ? void 0 : _j.kind) ===
                            ModelKind.WebConsentModel
                            ? (_k = Store.getters.selectedCoreModel) === null || _k === void 0 ? void 0 : _k.trackerCategories.map(function (category) { return ({
                                source: {
                                    type: ModuleSourceType.PATH,
                                    value: "$sdkRootPath/msft-privacy/packages/$packageName/$packageVersion/models/$model/translations/".concat(category.categoryName, "/").concat(category.version, "/$lcid.json"),
                                },
                                callback: function (val) {
                                    return ConfigCallbacks.Translation(category.categoryName, val);
                                },
                            }); })
                            : [])), false), [
                            {
                                source: {
                                    type: ModuleSourceType.PATH,
                                    value: "$sdkRootPath/msft-privacy/packages/$packageName/$packageVersion/models/$model/translations/$model/$modelVersion/$lcid.json",
                                },
                                callback: function (val) {
                                    var _a;
                                    return ConfigCallbacks.Translation(((_a = Store.getters.selectedCoreModel) === null || _a === void 0 ? void 0 : _a.name) ||
                                        '', val);
                                },
                            },
                            {
                                source: {
                                    type: ModuleSourceType.PATH,
                                    value: "$sdkRootPath/msft-privacy/packages/$packageName/$packageVersion/models/$model/model.json",
                                },
                                callback: ConfigCallbacks.Model,
                            },
                            {
                                source: {
                                    type: ModuleSourceType.PATH,
                                    value: "$sdkRootPath/msft-privacy/packages/$packageName/$packageVersion/models/$model/templates/".concat((_l = Store.getters.selectedCoreModel) === null || _l === void 0 ? void 0 : _l.layouts[0].name, "/template.json"),
                                },
                                callback: ConfigCallbacks.Template,
                            }
                        ], false), __read((((_m = Store.getters.selectedCoreModel) === null || _m === void 0 ? void 0 : _m.kind) === ModelKind.QuestionModel
                            ? __spreadArray(__spreadArray([], __read((_o = Store.getters.selectedCoreModel) === null || _o === void 0 ? void 0 : _o.questions.map(function (question) { return ({
                                source: {
                                    type: ModuleSourceType.PATH,
                                    value: "$sdkRootPath/msft-privacy/packages/$packageName/$packageVersion/models/$model/translations/".concat(question, "/1/$lcid.json"),
                                },
                                callback: function (val) {
                                    return ConfigCallbacks.Translation(question, val);
                                },
                            }); })), false), __read((_p = Store.getters.selectedCoreModel) === null || _p === void 0 ? void 0 : _p.questions.map(function (question) { return ({
                                source: {
                                    type: ModuleSourceType.PATH,
                                    value: "$sdkRootPath/msft-privacy/packages/$packageName/$packageVersion/models/$model/questions/".concat(question, "/1/question.json"),
                                },
                                callback: function (val) { return ConfigCallbacks.Question(val); },
                            }); })), false) : [])), false),
                    },
                    {
                        module: SDKModules.PRESENTATION,
                        source: Store.getters.isPreviewMode
                            ? {
                                type: ModuleSourceType.VARIABLE,
                                value: Store.getters.presentationVariable,
                            }
                            : {
                                type: ModuleSourceType.PATH,
                                value: SDKModulesPath.PRESENTATION,
                            },
                        condition: function () { return !Store.getters.isHeadless; },
                        dependency: __spreadArray([
                            SDKModules.HANDLEBAR,
                            SDKModules.CONFIG,
                            SDKModules.PROXY
                        ], __read((((_q = Store.getters.selectedCoreModel) === null || _q === void 0 ? void 0 : _q.kind) === ModelKind.QuestionModel
                            ? [SDKModules.DSR]
                            : [])), false),
                    },
                    {
                        module: SDKModules.HANDLEBAR,
                        source: Store.getters.isPreviewMode
                            ? {
                                type: ModuleSourceType.VARIABLE,
                                value: Store.getters.handlebarVariable,
                            }
                            : {
                                type: ModuleSourceType.PATH,
                                value: SDKModulesPath.HANDLEBAR,
                            },
                        condition: function () { return !Store.getters.isHeadless; },
                        dependency: [],
                    },
                    {
                        module: SDKModules.PREVIEW,
                        source: {
                            type: ModuleSourceType.PATH,
                            value: SDKModulesPath.PREVIEW,
                        },
                        condition: function () { return Store.getters.isLivePreviewMode; },
                        dependency: [],
                    },
                    {
                        module: SDKModules.PROXY,
                        source: Store.getters.isPreviewMode
                            ? {
                                type: ModuleSourceType.VARIABLE,
                                value: Store.getters.proxyVariable,
                            }
                            : {
                                type: ModuleSourceType.PATH,
                                value: SDKModulesPath.PROXY,
                            },
                        callback: function (js) {
                            window.__MSFT_SDK.Store.reducers.setProxyJS(js);
                        },
                        dependency: [],
                    }
                ], __read((((_r = Store.getters.selectedCoreModel) === null || _r === void 0 ? void 0 : _r.kind) === ModelKind.QuestionModel
                    ? [
                        {
                            module: SDKModules.DSR,
                            source: Store.getters.isPreviewMode
                                ? {
                                    type: ModuleSourceType.VARIABLE,
                                    value: Store.getters.dsrVariable,
                                }
                                : {
                                    type: ModuleSourceType.PATH,
                                    value: SDKModulesPath.DSR,
                                },
                            dependency: [],
                        },
                    ]
                    : [])), false),
            });
        },
    };

    var AsyncUtils = /** @class */ (function () {
        function AsyncUtils() {
        }
        AsyncUtils.deferred = function () {
            var defer = {};
            defer.promise = new Promise(function (res, rej) {
                defer.resolve = res;
                defer.reject = rej;
            });
            return defer;
        };
        return AsyncUtils;
    }());

    var DomUtils = /** @class */ (function () {
        function DomUtils() {
        }
        DomUtils.addScriptToDOM = function (value) {
            var defer = AsyncUtils.deferred();
            var script = document.createElement('script');
            script.type = 'text/javascript';
            script.appendChild(document.createTextNode(value));
            script.onload = function () { return defer.resolve(); };
            script.onerror = function () { return defer.reject(); };
            if (document.body) {
                document.body.appendChild(script);
            }
            else {
                window.addEventListener('DOMContentLoaded', function () {
                    document.body.appendChild(script);
                });
            }
            return defer.promise;
        };
        return DomUtils;
    }());

    var EventUtils = /** @class */ (function () {
        function EventUtils() {
        }
        EventUtils.fetch = function (path) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, promise, resolve;
                return __generator(this, function (_b) {
                    _a = AsyncUtils.deferred(), promise = _a.promise, resolve = _a.resolve;
                    window.__MSFT_SDK.EventBus.trigger(PublicEvents.FetchConfig, {
                        path: path,
                        callback: function (response) {
                            resolve(response.data);
                        },
                    });
                    return [2 /*return*/, promise];
                });
            });
        };
        return EventUtils;
    }());

    var HTTPUtils = /** @class */ (function () {
        function HTTPUtils() {
        }
        HTTPUtils.fetch = function (url) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    try {
                        return [2 /*return*/, this.exponentialRetry(function () {
                                return fetch(url).then(function (res) {
                                    if (!res.ok) {
                                        throw new Error(res.statusText);
                                    }
                                    return res;
                                });
                            })];
                    }
                    catch (_err) {
                        Logger.error("Unable to fetch asset '".concat(url, "'"));
                    }
                    return [2 /*return*/];
                });
            });
        };
        HTTPUtils.exponentialRetry = function (callback, currentRetryCount) {
            if (currentRetryCount === void 0) { currentRetryCount = 0; }
            return __awaiter(this, void 0, void 0, function () {
                var err_1, retryCount_1, defer_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, callback()];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            err_1 = _a.sent();
                            retryCount_1 = currentRetryCount + 1;
                            if (retryCount_1 < this.MAX_RETRY_COUNT) {
                                defer_1 = AsyncUtils.deferred();
                                setTimeout(function () {
                                    _this.exponentialRetry(callback, retryCount_1)
                                        .then(function () { return defer_1.resolve(); })
                                        .catch(function () { return defer_1.reject(); });
                                }, this.EXPONENTIAL_DELAY_FACTOR_IN_MS * retryCount_1);
                                return [2 /*return*/, defer_1.promise];
                            }
                            throw err_1;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        HTTPUtils.MAX_RETRY_COUNT = 3;
        HTTPUtils.EXPONENTIAL_DELAY_FACTOR_IN_MS = 250;
        return HTTPUtils;
    }());

    var BaseModule = /** @class */ (function () {
        function BaseModule(source, callback) {
            this.source = source;
            this.value = '';
            this.callback = callback;
        }
        BaseModule.fetchWrapper = function (path, fetchUsingEvent) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var value;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!fetchUsingEvent) return [3 /*break*/, 2];
                            return [4 /*yield*/, EventUtils.fetch(path)];
                        case 1: return [2 /*return*/, _b.sent()];
                        case 2: return [4 /*yield*/, HTTPUtils.fetch(path)];
                        case 3:
                            value = _b.sent();
                            return [4 /*yield*/, (value === null || value === void 0 ? void 0 : value.text())];
                        case 4: return [2 /*return*/, (_a = (_b.sent())) !== null && _a !== void 0 ? _a : ''];
                    }
                });
            });
        };
        return BaseModule;
    }());

    var JavascriptModule = /** @class */ (function (_super) {
        __extends(JavascriptModule, _super);
        function JavascriptModule(source, callback) {
            return _super.call(this, source, callback) || this;
        }
        JavascriptModule.prototype.fetch = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            Logger.info('Fetching js module', this.source);
                            if (!(this.source.type === ModuleSourceType.VARIABLE)) return [3 /*break*/, 1];
                            this.value = window[this.source.value];
                            return [3 /*break*/, 3];
                        case 1:
                            _a = this;
                            return [4 /*yield*/, JavascriptModule.fetchWrapper(this.source.value, this.source.fetchUsingEvent)];
                        case 2:
                            _a.value = _b.sent();
                            _b.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        JavascriptModule.prototype.addToDOM = function () {
            return DomUtils.addScriptToDOM(this.value);
        };
        JavascriptModule.prototype.execute = function () {
            if (this.callback) {
                this.callback(this.value);
                return Promise.resolve();
            }
            else {
                return this.addToDOM();
            }
        };
        return JavascriptModule;
    }(BaseModule));

    var JSONModule = /** @class */ (function (_super) {
        __extends(JSONModule, _super);
        function JSONModule(source, callback) {
            return _super.call(this, source, callback) || this;
        }
        JSONModule.prototype.fetch = function () {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var _b, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            Logger.info('Fetching json module', this.source);
                            if (!(this.source.type === ModuleSourceType.VARIABLE)) return [3 /*break*/, 1];
                            this.value = window[this.source.value];
                            return [3 /*break*/, 4];
                        case 1:
                            _e.trys.push([1, 3, , 4]);
                            _b = this;
                            _d = (_c = JSON).parse;
                            return [4 /*yield*/, JSONModule.fetchWrapper(this.source.value, this.source.fetchUsingEvent)];
                        case 2:
                            _b.value = _d.apply(_c, [_e.sent()]);
                            return [3 /*break*/, 4];
                        case 3:
                            _e.sent();
                            Logger.error("Error in fetching : ".concat((_a = this.source) === null || _a === void 0 ? void 0 : _a.value));
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        JSONModule.prototype.execute = function () {
            if (this.callback && this.value) {
                this.callback(this.value);
                return Promise.resolve();
            }
            return Promise.reject(new Error('Callback not provided'));
        };
        return JSONModule;
    }(BaseModule));

    var DependencyManager = /** @class */ (function () {
        function DependencyManager() {
        }
        DependencyManager.resolveDependencies = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, moduleMap, moduleDependency, assetsFetchingPromises, executionSequence;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this.getModuleMapAndDependency(), moduleMap = _a.moduleMap, moduleDependency = _a.moduleDependency;
                            assetsFetchingPromises = this.fetchAllAssets(moduleMap);
                            executionSequence = GraphUtils.topologicalSort(moduleDependency);
                            Logger.info('dependencies execution sequence', executionSequence);
                            return [4 /*yield*/, Promise.all(assetsFetchingPromises)];
                        case 1:
                            _b.sent();
                            executionSequence.forEach(function (id) {
                                if (moduleMap[id]) {
                                    moduleMap[id].forEach(function (asset) { return asset.execute(); });
                                }
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        DependencyManager.fetchAllAssets = function (moduleMap) {
            var promises = [];
            Object.values(moduleMap).forEach(function (assets) {
                assets.forEach(function (asset) {
                    promises.push(asset.fetch());
                });
            });
            return promises;
        };
        DependencyManager.getModuleMapAndDependency = function () {
            var _this = this;
            var moduleMap = {};
            var moduleDependency = [];
            var _a = SDKDependency.getDependencies(), fields = _a.fields, modules = _a.modules;
            modules.forEach(function (_a) {
                var module = _a.module, source = _a.source, configs = _a.configs, condition = _a.condition, dependency = _a.dependency, callback = _a.callback;
                if (!condition || condition()) {
                    moduleMap[module] = __spreadArray([], __read(_this.getModuleTypeInstances({
                        source: source,
                        callback: callback,
                        fields: fields,
                    })), false);
                    moduleDependency.push([module, dependency || []]);
                    if (configs) {
                        moduleMap["".concat(module, ".configs")] = configs.reduce(function (acc, config) {
                            return acc.concat(_this.getModuleTypeInstances(__assign(__assign({}, config), { fields: fields })));
                        }, []);
                        moduleDependency.push([module, ["".concat(module, ".configs")]]);
                    }
                }
            });
            return { moduleMap: moduleMap, moduleDependency: moduleDependency };
        };
        DependencyManager.getModuleTypeInstances = function (_a) {
            var source = _a.source, callback = _a.callback, fields = _a.fields;
            if (source === undefined)
                return [];
            var modules = [];
            var extension = source.value.split('.').pop();
            if (source.type === ModuleSourceType.PATH) {
                var resolvedPaths = this.resolvePathFields({
                    path: source.value,
                    fields: fields,
                });
                resolvedPaths.forEach(function (path) {
                    DependencyManager.addModuleResolver({
                        value: path,
                        type: ModuleSourceType.PATH,
                        fetchUsingEvent: source.fetchUsingEvent,
                    }, modules, extension, callback);
                });
            }
            else {
                DependencyManager.addModuleResolver(source, modules, extension, callback);
            }
            return modules;
        };
        DependencyManager.addModuleResolver = function (source, modules, extension, callback) {
            switch (extension) {
                case 'js':
                    modules.push(new JavascriptModule(source, callback));
                    break;
                case 'json':
                    if (!callback) {
                        Logger.error("No callback provided for json asset with ".concat(source.type, " '").concat(source.value, "'. Skipping it."));
                    }
                    else {
                        modules.push(new JSONModule(source, callback));
                    }
                    break;
                default:
                    Logger.error("Cannot resolve dependency. Unknown extension identified for ".concat(source.type, " '").concat(source.value, "'"));
            }
        };
        DependencyManager.resolvePathFields = function (_a) {
            var path = _a.path, fields = _a.fields;
            var matches = __spreadArray([], __read(path.matchAll(/\$(\w+)/g)), false);
            var paths = [path];
            matches.forEach(function (match) {
                var rawFieldValue = fields[match[1]];
                var fieldValues = Array.isArray(rawFieldValue)
                    ? rawFieldValue
                    : [rawFieldValue];
                var tempPaths = [];
                fieldValues.forEach(function (value) {
                    paths.forEach(function (partialResolvedPath) {
                        tempPaths.push(partialResolvedPath.replace(match[0], value));
                    });
                });
                paths = tempPaths;
            });
            return paths;
        };
        return DependencyManager;
    }());

    var _a;
    window.__MSFT_SDK = {
        EventBus: EventBus$1,
        Logger: Logger,
        Store: Store,
        Utils: { IFrameUtils: IFrameUtils, ObjectUtils: ObjectUtils },
        enums: enums,
        constants: constants,
        Helpers: PublicApiHelper,
        config: ((_a = window.__MSFT_SDK) === null || _a === void 0 ? void 0 : _a.config) || null,
        initConsent: InternalAPI.initConsent,
        debug: function () {
            return {
                events: window.__MSFT_SDK.Store.getters.debugInfo.events,
                logs: window.__MSFT_SDK.Store.getters.debugInfo.logs,
                state: window.__MSFT_SDK.Store.getters.state,
            };
        },
    };
    window.MSFTConsent = MSFTConsent;
    EventBus$1.on(Events.CoreConsentModelSelected, function () {
        DependencyManager.resolveDependencies();
    });

    var IntervalUtils = /** @class */ (function () {
        function IntervalUtils() {
        }
        IntervalUtils.ConvertToMilliseconds = function (interval) {
            switch (interval.unit) {
                case IntervalUnits.day:
                    return interval.value * 86400000;
                case IntervalUnits.week:
                    return interval.value * 86400000 * 7;
                case IntervalUnits.month:
                    return interval.value * 86400000 * 30;
                case IntervalUnits.year:
                    return interval.value * 86400000 * 365;
                default:
                    Logger.error("Invalid unit for interval : ".concat(interval.unit));
                    return interval.value;
            }
        };
        return IntervalUtils;
    }());

    var ConsentEncodingService = /** @class */ (function () {
        function ConsentEncodingService() {
        }
        /**
         * Encode user's consent preference
         *
         * @param  {import("core/types/interfaces").IUserConsent} consent user's consent object
         * @param  {import("core/types/interfaces").ICoreConsentModel} model current selected consent model
         * @returns {string} encoded consent
         */
        ConsentEncodingService.encodeConsent = function (consent, model) {
            Logger.info('encoding consent', { consent: consent, model: model });
            var preferences = consent.preferences;
            var encodedConsentString = "".concat(ConsentEncodingService.VERSION, "=") + model.version.toString() + '%';
            encodedConsentString +=
                "".concat(ConsentEncodingService.ModelId, "=") + model.id + '%';
            encodedConsentString += Object.keys(preferences)
                .map(function (category) {
                return "".concat(category, "=").concat(preferences[category] === Preference.ON
                    ? Preference.ON
                    : Preference.OFF);
            })
                .join('%');
            Logger.info("encoded consent string: ".concat(encodedConsentString));
            return encodedConsentString;
        };
        /**
         * Decode encoded consent string.
         *
         * @param  {string} encodedConsentString encoded consent
         * @returns {import("core/types/interfaces").IUserConsent} object having user preference for all tracker categories
         */
        ConsentEncodingService.decodeConsentString = function (encodedConsentString) {
            Logger.info("decoding consent string: ".concat(encodedConsentString));
            var preferences = {};
            encodedConsentString.split('%').forEach(function (pairStr) {
                var pair = pairStr.split('=');
                if (pair.length !== 2)
                    return;
                var key = pair[0];
                var val = pair[1];
                if (key !== ConsentEncodingService.VERSION &&
                    key !== ConsentEncodingService.ModelId) {
                    preferences[key] = val;
                }
            });
            Logger.info('decoded consent', { preferences: preferences });
            return { preferences: preferences };
        };
        /**
         * Get version from encoded consent string
         *
         * @param  {string} encodedConsentString encoding consent
         * @returns {number} version
         */
        ConsentEncodingService.getVersionFromString = function (encodedConsentString) {
            var match = encodedConsentString.match(/version=([\d.]+)%/);
            if (match == null) {
                return -1;
            }
            var res = parseInt(match[1]);
            if (isNaN(res)) {
                return -1;
            }
            Logger.info("getVersionString str: ".concat(encodedConsentString, " found version: ").concat(res));
            return res;
        };
        /**
         * Get model name from encoded consent string
         *
         * @param  {string} encodedConsentString encoding consent
         * @returns {string | undefined} name
         */
        ConsentEncodingService.getModelIdFromString = function (encodedConsentString) {
            var match = encodedConsentString.match(/modelId=([^%]+)%/);
            if (match == null) {
                return undefined;
            }
            Logger.info("getModelIdFromString str: ".concat(encodedConsentString, " found version: ").concat(match[1]));
            return match[1];
        };
        ConsentEncodingService.VERSION = 'version';
        ConsentEncodingService.ModelId = 'modelId';
        return ConsentEncodingService;
    }());

    var State = /** @class */ (function () {
        function State(state) {
            this.state = state || {
                config: {
                    sdkConfig: window.__MSFT_SDK.config,
                },
                custom: {
                    lcid: '',
                    proxyJS: '',
                    languageBlockList: [],
                    lcidList: [],
                    templateData: {},
                },
            };
        }
        return State;
    }());

    /* eslint-disable @microsoft/sdl/no-cookies */
    var CookiePlugin = /** @class */ (function () {
        function CookiePlugin() {
        }
        /**
         * Get all values from cookie storage.
         *
         * @returns {string} Cookie values
         */
        CookiePlugin.get = function () {
            return document.cookie;
        };
        /**
         * Get specific value of a key name.
         *
         * @param {string} key Key name
         * @returns {string} Value corresponding to the input key
         */
        CookiePlugin.getItem = function (key) {
            Logger.info("get cookie key: ".concat(key));
            return (document.cookie.split('; ').find(function (row) { return row.startsWith("".concat(key, "=")); }) || '');
        };
        /**
         * Set values in cookie storage.
         *
         * @param {string} values Values to store
         */
        CookiePlugin.set = function (values) {
            Logger.info("set cookie: ".concat(values));
            document.cookie = values;
        };
        /**
         * Set value for a key name.
         *
         * @param {string} key Key name
         * @param {string} value Value to save
         * @param {number} [ttl] Optional expiry time in milli seconds
         */
        CookiePlugin.setItem = function (key, value, ttl) {
            var expiry;
            Logger.info("set cookie key: ".concat(key, " value: ").concat(value, " ttl: ").concat(ttl));
            if (ttl) {
                var date = new Date();
                date.setTime(date.getTime() + ttl);
                expiry = date.toUTCString();
            }
            document.cookie = "".concat(key, "=").concat(value).concat(expiry ? "; expires=".concat(expiry) : '', "; path=/");
        };
        return CookiePlugin;
    }());

    var Getters = /** @class */ (function (_super) {
        __extends(Getters, _super);
        function Getters(state) {
            var _this = _super.call(this, state) || this;
            _this.state.custom = __assign(__assign({}, state.custom), { languageBlockList: ['ca-Es-VALENCIA', 'kok'], lcidList: [
                    'af',
                    'am',
                    'ar',
                    'az',
                    'bg',
                    'bn',
                    'bs',
                    'ca',
                    'cs',
                    'cy',
                    'da',
                    'de',
                    'el',
                    'en-GB',
                    'en',
                    'es-MX',
                    'es',
                    'et',
                    'eu',
                    'fa',
                    'fil',
                    'fi',
                    'fr-CA',
                    'fr',
                    'ga',
                    'gd',
                    'gl',
                    'gu',
                    'he',
                    'hi',
                    'hr',
                    'hu',
                    'id',
                    'is',
                    'it',
                    'ja',
                    'ka',
                    'kk',
                    'km',
                    'kn',
                    'ko',
                    'lb',
                    'lo',
                    'lt',
                    'lv',
                    'mi',
                    'mk',
                    'ml',
                    'mr',
                    'ms',
                    'mt',
                    'nl',
                    'ne',
                    'nb',
                    'nn',
                    'or',
                    'pa',
                    'pl',
                    'pt-BR',
                    'pt',
                    'qu',
                    'ro',
                    'ru',
                    'sk',
                    'sl',
                    'sq',
                    'sr',
                    'sv',
                    'ta',
                    'te',
                    'th',
                    'tr',
                    'tt',
                    'ug',
                    'uk',
                    'ur',
                    'vi',
                    'zh-CN',
                    'zh-TW',
                    'zh',
                ] });
            return _this;
        }
        Object.defineProperty(Getters.prototype, "currentModel", {
            get: function () {
                return this.state.config.currentModel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "selectedCoreModel", {
            get: function () {
                return this.state.config.selectedCoreModel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "models", {
            get: function () {
                return this.state.config.sdkConfig.models;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "template", {
            get: function () {
                return this.state.config.template;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "translations", {
            get: function () {
                return this.state.config.translations || [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "styles", {
            get: function () {
                return this.state.custom.styles || [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "timezone", {
            get: function () {
                return window.Intl.DateTimeFormat().resolvedOptions().timeZone;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "languages", {
            get: function () {
                var _this = this;
                var userLanguages = navigator.languages;
                var userLcids = [];
                userLanguages.forEach(function (userLanguage) {
                    if (!_this.state.custom.languageBlockList.includes(userLanguage)) {
                        for (var index = 0; index < _this.state.custom.lcidList.length; index++) {
                            if (userLanguage.startsWith(_this.state.custom.lcidList[index])) {
                                if (!userLcids.includes(_this.state.custom.lcidList[index]))
                                    userLcids.push(_this.state.custom.lcidList[index]);
                                break;
                            }
                        }
                    }
                });
                return userLcids;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "encodedConsent", {
            get: function () {
                return CookiePlugin.getItem(window.__MSFT_SDK.enums.Cookie.Consent);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "templateParentMap", {
            get: function () {
                var _a;
                return ((_a = this.state.config.template) === null || _a === void 0 ? void 0 : _a.componentParentMap) || {};
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "extendedTrackers", {
            get: function () {
                return this.state.config.sdkConfig.extendedTrackers;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "defaultModel", {
            get: function () {
                var _a;
                return (_a = this.state.config.sdkConfig) === null || _a === void 0 ? void 0 : _a.defaultConsentModel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "lcid", {
            get: function () {
                return this.state.custom.lcid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "components", {
            get: function () {
                return this.state.config.components || {};
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "proxyJS", {
            get: function () {
                return this.state.custom.proxyJS;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "questions", {
            get: function () {
                return this.state.config.questions || [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "templateData", {
            get: function () {
                return this.state.custom.templateData;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "sdkConfig", {
            get: function () {
                return this.state.config.sdkConfig;
            },
            enumerable: false,
            configurable: true
        });
        return Getters;
    }(State));

    var Reducers = /** @class */ (function (_super) {
        __extends(Reducers, _super);
        function Reducers(state) {
            return _super.call(this, state) || this;
        }
        Reducers.prototype.setCurrentModel = function (val) {
            this.state.config.currentModel = val;
        };
        Reducers.prototype.setSelectedCoreModel = function (val) {
            this.state.config.selectedCoreModel = val;
        };
        Reducers.prototype.setTemplate = function (val) {
            this.state.config.template = val;
        };
        Reducers.prototype.setTranslations = function (val) {
            this.state.config.translations = val;
        };
        Reducers.prototype.setStyles = function (styles) {
            this.state.custom.styles = styles;
        };
        Reducers.prototype.setEncodedConsentString = function (key, value, ttl) {
            CookiePlugin.setItem(key, value, ttl);
        };
        Reducers.prototype.setLcid = function (lcid) {
            this.state.custom.lcid = lcid;
        };
        Reducers.prototype.setComponents = function (val) {
            this.state.config.components = val;
        };
        Reducers.prototype.setProxyJS = function (js) {
            this.state.custom.proxyJS = js;
        };
        Reducers.prototype.setQuestions = function (val) {
            this.state.config.questions = val;
        };
        Reducers.prototype.setTemplateData = function (val) {
            this.state.custom.templateData = val;
        };
        Reducers.prototype.setSDKconfig = function (val) {
            this.state.config.sdkConfig = val;
        };
        return Reducers;
    }(State));

    var state = new State().state;
    var getter = new Getters(state);
    var reducer = new Reducers(state);
    var store = {
        getters: getter,
        reducers: reducer,
    };

    var ConsentModelService = /** @class */ (function () {
        function ConsentModelService() {
            window.__MSFT_SDK.Store.addReducers(store.reducers);
            window.__MSFT_SDK.Store.addGetters(Getters);
            ConsentModelService.registerEvents();
        }
        /**
         * Register for init event to update consent model
         */
        ConsentModelService.registerEvents = function () {
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.Events.Init, ConsentModelService.onInit);
        };
        ConsentModelService.matchLocation = function (location, options) {
            if (!options || !Array.isArray(options)) {
                return false;
            }
            for (var i = 0; i < options.length; i++) {
                var option = options[i];
                if (option.toLowerCase() === 'all' || option === location) {
                    return true;
                }
            }
            return options.length === 0;
        };
        /**
         * Select Consent Model as per rules like location etc.
         *
         * @param {IInitConfig} initConfig init configuration
         */
        ConsentModelService.selectConsentModel = function (initConfig) {
            var countryCode = initConfig.countryOrRegion, coreModels = initConfig.coreModels, LCID = initConfig.LCID;
            var models = coreModels || window.__MSFT_SDK.Store.getters.models;
            Logger.info('selecting consent model', {
                models: models,
                countryCode: countryCode,
                timezone: window.__MSFT_SDK.Store.getters.timezone,
            });
            if (!Array.isArray(models) || models.length === 0) {
                window.__MSFT_SDK.Logger.info('Models not found.');
                return;
            }
            var selectedModel = models.find(function (m) { return m.name === window.__MSFT_SDK.Store.getters.defaultModel; }) || models[0];
            for (var i = 0; i < models.length; i++) {
                var model = models[i];
                var match = countryCode === undefined
                    ? ConsentModelService.matchLocation(window.__MSFT_SDK.Store.getters.timezone, model.attributes.geoLocations)
                    : ConsentModelService.matchLocation(countryCode, model.attributes.countriesOrRegions);
                if (match) {
                    selectedModel = model;
                    break;
                }
            }
            window.__MSFT_SDK.Store.reducers.setSelectedCoreModel(selectedModel);
            ConsentModelService.selectLanguageCode(selectedModel.translations, selectedModel.defaultLCID, LCID);
            window.__MSFT_SDK.EventBus.trigger(Events.CoreConsentModelSelected);
            window.__MSFT_SDK.Logger.info('Consent model selected.');
        };
        /**
         * Set LCID depending on user's preference and available translations
         *
         * @param {string[]} noticesLanguages available notice langs
         * @param  {string} defaultLCID default LCID
         * @param  {string} overrideLCID override user LCID list
         */
        ConsentModelService.selectLanguageCode = function (noticesLanguages, defaultLCID, overrideLCID) {
            var lcid = defaultLCID;
            var userLanguages = overrideLCID
                ? [overrideLCID]
                : window.__MSFT_SDK.Store.getters.languages;
            for (var i = 0; i < userLanguages.length; i++) {
                if (noticesLanguages.includes(userLanguages[i])) {
                    lcid = userLanguages[i];
                    break;
                }
            }
            Logger.info('selected language code', { lcid: lcid });
            window.__MSFT_SDK.Store.reducers.setLcid(lcid);
        };
        /**
         * Update consent model after init as per init config
         *
         * @param  {import("core/types/interfaces").IInitConfig} initConfig init config passed by user
         */
        ConsentModelService.onInit = function (initConfig) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, ConsentModelService.fetchCoreConfig(initConfig)];
                        case 1:
                            _a.sent();
                            ConsentModelService.selectConsentModel(initConfig);
                            ConsentModelService.updateConfigIfPresent(initConfig);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConsentModelService.updateConfigIfPresent = function (initConfig) {
            var translations = initConfig.translations, templates = initConfig.templates, models = initConfig.models;
            if (models) {
                var model = models.find(function (model) {
                    var _a;
                    return model.name ===
                        ((_a = window.__MSFT_SDK.Store.getters.selectedCoreModel) === null || _a === void 0 ? void 0 : _a.name);
                });
                if (model) {
                    window.__MSFT_SDK.Store.reducers.setCurrentModel(model);
                }
            }
            if (translations) {
                window.__MSFT_SDK.Store.reducers.setTranslations(translations[window.__MSFT_SDK.Store.getters.lcid]);
            }
            if (templates) {
                var template = templates.find(function (t) {
                    var _a;
                    return t.name ===
                        ((_a = window.__MSFT_SDK.Store.getters.selectedCoreModel) === null || _a === void 0 ? void 0 : _a.layouts[0].name);
                }) || templates[0];
                window.__MSFT_SDK.Store.reducers.setTemplate(template);
                window.__MSFT_SDK.EventBus.trigger(window.__MSFT_SDK.enums.Events.ConfigReady);
            }
        };
        ConsentModelService.fetchCoreConfig = function (initConfig) {
            return __awaiter(this, void 0, void 0, function () {
                var config, _a, promise, resolve_1, data;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            config = window.__MSFT_SDK.Store.getters.sdkConfig;
                            if (initConfig.preview) {
                                return [2 /*return*/];
                            }
                            if (!(config == null || config.models == null)) return [3 /*break*/, 2];
                            _a = AsyncUtils.deferred(), promise = _a.promise, resolve_1 = _a.resolve;
                            return [4 /*yield*/, EventUtils.fetch("/msft-privacy/packages/".concat(window.__MSFT_SDK.config.name, "/latest/core-config.js"))];
                        case 1:
                            data = _b.sent();
                            DomUtils.addScriptToDOM(data);
                            //TODO full proof this logic
                            setTimeout(function () {
                                var _a;
                                window.__MSFT_SDK.Store.reducers.setSDKconfig((_a = window.__MSFT_SDK) === null || _a === void 0 ? void 0 : _a.config);
                                resolve_1();
                            });
                            return [2 /*return*/, promise];
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        return ConsentModelService;
    }());
    new ConsentModelService();

    var TrackerCategoryService = /** @class */ (function () {
        function TrackerCategoryService() {
        }
        /**
         * Returns tracker categories in current selected model
         *
         * @returns {import("core/types/interfaces").ITrackerCategory[]} tracker category list
         */
        TrackerCategoryService.getTrackerCategories = function () {
            if (window.__MSFT_SDK.Store.getters.currentModel !== undefined) {
                return window.__MSFT_SDK.Store.getters.currentModel
                    .trackerCategories;
            }
            throw new Error('Consent Model not selected.');
        };
        /**
         * Returns default consent setting as per consent model
         *
         * @param {import("core/types/interfaces").ConsentModelType} consentModelType consent model type
         * @returns {import("core/types/interfaces").IUserConsent} user consent object
         */
        TrackerCategoryService.getDefaultConsent = function (consentModelType) {
            var _a, _b;
            var consent = { preferences: {} };
            (_b = (_a = window.__MSFT_SDK.Store.getters.currentModel) === null || _a === void 0 ? void 0 : _a.trackerCategories) === null || _b === void 0 ? void 0 : _b.forEach(function (category) {
                consent.preferences[category.categoryName] =
                    category.isEssential ||
                        consentModelType === window.__MSFT_SDK.enums.ConsentModelType.Implicit
                        ? window.__MSFT_SDK.enums.Preference.ON
                        : window.__MSFT_SDK.enums.Preference.OFF;
            });
            Logger.info('evaluating default consent', { consentModelType: consentModelType, consent: consent });
            return consent;
        };
        return TrackerCategoryService;
    }());

    var ConsentManager = /** @class */ (function () {
        function ConsentManager() {
            ConsentManager.registerEvents();
        }
        /**
         * Register for window.__MSFT_SDK.enums.Events.
         */
        ConsentManager.registerEvents = function () {
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.Events.ConfigReady, ConsentManager.showNoticeIfConsentInvalid);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.AcceptAll, ConsentManager.acceptAllCategories);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.RejectAll, ConsentManager.rejectAllNonEssentialCategories);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.UpdateConsent, ConsentManager.setConsent);
        };
        /**
         * Get user's consent.
         *
         * @returns {import("core/types/interfaces").IUserConsent} consent object
         */
        ConsentManager.getConsent = function () {
            return (window.__MSFT_SDK.Store.getters.userConsent ||
                TrackerCategoryService.getDefaultConsent(window.__MSFT_SDK.enums.ConsentModelType.Explicit));
        };
        /**
         * Get user's consent for specific category
         *
         * @param  {string} trackerCategory category name
         * @returns {number} either on: "1" / off: "0" else null if not found.
         */
        ConsentManager.getConsentFor = function (trackerCategory) {
            return ConsentManager.getConsent().preferences[trackerCategory];
        };
        /**
         * Encode and save user's consent
         *
         * @param  {import("core/types/interfaces").IGenericObject} payload containing consent object
         */
        ConsentManager.setConsent = function (payload) {
            Logger.info('set consent', { payload: payload });
            var consent = payload.consent;
            var model = window.__MSFT_SDK.Store.getters.currentModel;
            var coreModel = window.__MSFT_SDK.Store.getters.selectedCoreModel;
            if (model === undefined || coreModel === undefined) {
                window.__MSFT_SDK.Logger.warn('Cannot set user consent before consent model is ready.');
                return;
            }
            var encodedConsentString = ConsentEncodingService.encodeConsent(consent, coreModel);
            window.__MSFT_SDK.Store.reducers.setEncodedConsentString(window.__MSFT_SDK.enums.Cookie.Consent, encodedConsentString, IntervalUtils.ConvertToMilliseconds(model.expiry));
            window.__MSFT_SDK.Store.reducers.setUserConsent(consent);
            window.__MSFT_SDK.Logger.info('Consent updated.');
            window.__MSFT_SDK.EventBus.trigger(window.__MSFT_SDK.enums.PublicEvents.ConsentChanged);
        };
        /**
         * Check if user has provided consent and its valid or not
         *
         * @returns {boolean} consent is valid or not
         */
        ConsentManager.isConsentValid = function () {
            var _a;
            if ((_a = window.__MSFT_SDK.Store.getters.config.initConfig) === null || _a === void 0 ? void 0 : _a.preview)
                return false;
            var encodedConsentString = window.__MSFT_SDK.Store.getters.encodedConsent;
            if (encodedConsentString === undefined) {
                return false;
            }
            if (window.__MSFT_SDK.Store.getters.selectedCoreModel === undefined) {
                window.__MSFT_SDK.Logger.warn("Consent model not selected, can't validate consent.");
                return true;
            }
            var _b = window.__MSFT_SDK.Store.getters.selectedCoreModel, version = _b.version, id = _b.id;
            return (ConsentEncodingService.getVersionFromString(encodedConsentString) ===
                version &&
                ConsentEncodingService.getModelIdFromString(encodedConsentString) === id);
        };
        /**
         * Show consent notice if required.
         */
        ConsentManager.showNoticeIfConsentInvalid = function () {
            var _a, _b, _c;
            if (((_a = window.__MSFT_SDK.Store.getters.selectedCoreModel) === null || _a === void 0 ? void 0 : _a.kind) !==
                ModelKind.WebConsentModel) {
                return;
            }
            var mode = ((_b = window.__MSFT_SDK.Store.getters.selectedCoreModel) === null || _b === void 0 ? void 0 : _b.consentType) || ConsentModelType.Explicit;
            var consentValid = ConsentManager.isConsentValid();
            Logger.info("consent valid: ".concat(consentValid));
            if (!consentValid && mode === ConsentModelType.Explicit) {
                window.__MSFT_SDK.EventBus.trigger(window.__MSFT_SDK.enums.PublicEvents.ShowFirstPage);
            }
            var preferences = consentValid
                ? ConsentEncodingService.decodeConsentString(window.__MSFT_SDK.Store.getters.encodedConsent).preferences
                : {};
            var consent = { preferences: {} };
            (_c = window.__MSFT_SDK.Store.getters.selectedCoreModel) === null || _c === void 0 ? void 0 : _c.trackerCategories.forEach(function (category) {
                if (category.isEssential) {
                    consent.preferences[category.categoryName] =
                        window.__MSFT_SDK.enums.Preference.ON;
                }
                else {
                    consent.preferences[category.categoryName] =
                        preferences[category.categoryName] ||
                            ConsentManager.getDefaultPreference(mode);
                }
            });
            window.__MSFT_SDK.Store.reducers.setUserConsent(consent);
            window.__MSFT_SDK.EventBus.trigger(window.__MSFT_SDK.enums.PublicEvents.ConsentChanged);
        };
        ConsentManager.getDefaultPreference = function (mode) {
            return mode === ConsentModelType.Explicit ? Preference.OFF : Preference.ON;
        };
        /**
         * Save users consent to accept all categories and hide banner
         */
        ConsentManager.acceptAllCategories = function () {
            var _a;
            var consent = { preferences: {} };
            (_a = window.__MSFT_SDK.Store.getters.selectedCoreModel) === null || _a === void 0 ? void 0 : _a.trackerCategories.forEach(function (category) {
                consent.preferences[category.categoryName] =
                    window.__MSFT_SDK.enums.Preference.ON;
            });
            ConsentManager.setConsent({ consent: consent });
            window.__MSFT_SDK.EventBus.trigger(window.__MSFT_SDK.enums.PublicEvents.CloseConsentNotice);
        };
        /**
         * Save users consent to reject all non essential categories and hide banner
         */
        ConsentManager.rejectAllNonEssentialCategories = function () {
            var _a;
            var consent = { preferences: {} };
            (_a = window.__MSFT_SDK.Store.getters.selectedCoreModel) === null || _a === void 0 ? void 0 : _a.trackerCategories.forEach(function (category) {
                consent.preferences[category.categoryName] = category.isEssential
                    ? window.__MSFT_SDK.enums.Preference.ON
                    : window.__MSFT_SDK.enums.Preference.OFF;
            });
            ConsentManager.setConsent({ consent: consent });
            window.__MSFT_SDK.EventBus.trigger(window.__MSFT_SDK.enums.PublicEvents.CloseConsentNotice);
        };
        return ConsentManager;
    }());
    new ConsentManager();

    var PublicAPI = /** @class */ (function () {
        function PublicAPI() {
        }
        /**
         * Get user's consent containing category preferences
         *
         * @returns {import("core/types/interfaces").IUserConsent} user's consent
         */
        PublicAPI.getConsent = function () {
            return ConsentManager.getConsent();
        };
        /**
         * Get all tracker categories available as part of current selected model
         *
         * @returns {import("core/types/interfaces").ITrackerCategory[]} list of tracker categories
         */
        PublicAPI.getTrackerCategories = function () {
            return TrackerCategoryService.getTrackerCategories();
        };
        /**
         * Get all consent models available as part of sdk
         *
         * @returns {import("core/types/interfaces").IConsentModelExternal[]} list of consent models
         */
        PublicAPI.getConsentModels = function () {
            return window.__MSFT_SDK.Store.getters.models.map(function (_a) {
                var _b;
                var name = _a.name, version = _a.version, id = _a.id;
                return {
                    id: id,
                    name: name,
                    version: version,
                    selected: ((_b = window.__MSFT_SDK.Store.getters.currentModel) === null || _b === void 0 ? void 0 : _b.name) === name,
                };
            });
        };
        return PublicAPI;
    }());

    window.__MSFT_SDK.Helpers.AddPublicApis(PublicAPI);
    window.__MSFT_SDK.Helpers.exposeApis();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvdXRpbHMvT2JqZWN0VXRpbHMudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvZGVwZW5kZW5jeU1hbmFnZXIvZW51bS9tb2R1bGVzLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9jb3JlL3N0b3JlL1N0YXRlLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9jb3JlL3N0b3JlL0dldHRlcnMudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvc3RvcmUvUmVkdWNlcnMudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvc3RvcmUvaW5kZXgudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvbG9nZ2VyL2VudW0udHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvbG9nZ2VyL3BsdWdpbnMvQ29uc29sZUxvZ2dlci50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS9sb2dnZXIvaW5kZXgudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvZXZlbnRCdXMvZXZlbnRzUmVjb3JkZXIvZW51bS9FdmVudHNSZXBsYXkudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvZXZlbnRCdXMvZXZlbnRzUmVjb3JkZXIvZXZlbnRzUmVwbGF5U3RyYXRlZ3kvUmVwbGF5QWxsRXZlbnRzLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9jb3JlL2V2ZW50QnVzL2V2ZW50c1JlY29yZGVyL2V2ZW50c1JlcGxheVN0cmF0ZWd5L1JlcGxheUxhdGVzdEV2ZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9jb3JlL2V2ZW50QnVzL2V2ZW50c1JlY29yZGVyL2V2ZW50c1JlcGxheVN0cmF0ZWd5L1NraXBFdmVudFJlcGxheS50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS9ldmVudEJ1cy9ldmVudHNSZWNvcmRlci9ldmVudHNSZXBsYXlTdHJhdGVneS9pbmRleC50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS9ldmVudEJ1cy9ldmVudHNSZWNvcmRlci9pbmRleC50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS9ldmVudEJ1cy9pbmRleC50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS9jb25zdGFudHMvZW51bXMudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvaW50ZXJuYWxBcGkvaW5kZXgudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvcHVibGljQXBpL1B1YmxpY0FwaS50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS91dGlscy9JRnJhbWVVdGlscy50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS9wdWJsaWNBcGkvaW5kZXgudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvY29uc3RhbnRzL2NvbnN0YW50cy50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS91dGlscy9HcmFwaFV0aWxzLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9jb3JlL2RlcGVuZGVuY3lNYW5hZ2VyL2NvbmZpZy9jYWxsYmFja3MudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvZGVwZW5kZW5jeU1hbmFnZXIvY29uZmlnL3Nka0RlcGVuZGVuY3kudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvdXRpbHMvQXN5bmNVdGlscy50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS91dGlscy9Eb21VdGlscy50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS91dGlscy9FdmVudFV0aWxzLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9jb3JlL3V0aWxzL0h0dHBVdGlscy50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS9kZXBlbmRlbmN5TWFuYWdlci9tb2R1bGVUeXBlcy9CYXNlTW9kdWxlLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9jb3JlL2RlcGVuZGVuY3lNYW5hZ2VyL21vZHVsZVR5cGVzL0phdmFzY3JpcHRNb2R1bGUudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvcmUvZGVwZW5kZW5jeU1hbmFnZXIvbW9kdWxlVHlwZXMvSlNPTk1vZHVsZS50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS9kZXBlbmRlbmN5TWFuYWdlci9pbmRleC50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS9pbmRleC50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29yZS91dGlscy9JbnRlcnZhbFV0aWxzLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9jb25zZW50L0NvbnNlbnRFbmNvZGluZ1NlcnZpY2UudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvbnNlbnQvc3RvcmUvU3RhdGUudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvbnNlbnQvc3RvcmUvcGx1Z2lucy9Db29raWVQbHVnaW4udHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvbnNlbnQvc3RvcmUvR2V0dGVycy50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29uc2VudC9zdG9yZS9SZWR1Y2Vycy50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29uc2VudC9zdG9yZS9pbmRleC50cyIsIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvY29uc2VudC9Db25zZW50TW9kZWxTZXJ2aWNlLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9jb25zZW50L1RyYWNrZXJDYXRlZ29yeVNlcnZpY2UudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvbnNlbnQvQ29uc2VudE1hbmFnZXIudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL2NvbnNlbnQvcHVibGljQXBpL2luZGV4LnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9jb25zZW50L2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcclxuICAgIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcclxufVxyXG4iLCJjbGFzcyBPYmplY3RVdGlscyB7XHJcbiAgcHVibGljIHN0YXRpYyBpc09iamVjdChpdGVtOiBhbnkpIHtcclxuICAgIHJldHVybiBpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpdGVtKTtcclxuICB9XHJcbiAgcHVibGljIHN0YXRpYyBtZXJnZURlZXAodGFyZ2V0OiBhbnksIC4uLnNvdXJjZXM6IGFueSk6IGFueSB7XHJcbiAgICBpZiAoIXNvdXJjZXMubGVuZ3RoKSByZXR1cm4gdGFyZ2V0O1xyXG4gICAgY29uc3Qgc291cmNlID0gc291cmNlcy5zaGlmdCgpO1xyXG5cclxuICAgIGlmICh0aGlzLmlzT2JqZWN0KHRhcmdldCkgJiYgdGhpcy5pc09iamVjdChzb3VyY2UpKSB7XHJcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzT2JqZWN0KHNvdXJjZVtrZXldKSkge1xyXG4gICAgICAgICAgaWYgKCF0YXJnZXRba2V5XSkgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHsgW2tleV06IHt9IH0pO1xyXG4gICAgICAgICAgdGhpcy5tZXJnZURlZXAodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHsgW2tleV06IHNvdXJjZVtrZXldIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMubWVyZ2VEZWVwKHRhcmdldCwgLi4uc291cmNlcyk7XHJcbiAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IE9iamVjdFV0aWxzO1xyXG4iLCJleHBvcnQgZW51bSBTREtNb2R1bGVzIHtcclxuICBQUkVTRU5UQVRJT04gPSAncHJlc2VudGF0aW9uJyxcclxuICBQUkVWSUVXID0gJ3ByZXZpZXcnLFxyXG4gIENPTkZJRyA9ICdjb25maWcnLFxyXG4gIEhBTkRMRUJBUiA9ICdoYW5kbGViYXInLFxyXG4gIFBST1hZID0gJ3Byb3h5JyxcclxuICBEU1IgPSAnZHNyJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gU0RLTW9kdWxlc1BhdGgge1xyXG4gIFBSRVNFTlRBVElPTiA9ICckanNSb290UGF0aC9tc2Z0LXByaXZhY3kvanMvcHJlc2VudGF0aW9uLm1pbi5qcycsXHJcbiAgUFJFVklFVyA9ICckanNSb290UGF0aC9tc2Z0LXByaXZhY3kvanMvcHJldmlldy5taW4uanMnLFxyXG4gIEhBTkRMRUJBUiA9ICckanNSb290UGF0aC9tc2Z0LXByaXZhY3kvanMvdmVuZG9yL2hhbmRsZWJhcnMubWluLmpzJyxcclxuICBQUk9YWSA9ICckanNSb290UGF0aC9tc2Z0LXByaXZhY3kvanMvcHJveHkubWluLmpzJyxcclxuICBEU1IgPSAnJGpzUm9vdFBhdGgvbXNmdC1wcml2YWN5L2pzL2Rzci5taW4uanMnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBTREtNb2R1bGVzU291cmNlVmFyaWFibGUge1xyXG4gIFBSRVNFTlRBVElPTiA9ICdtc2Z0LXByZXNlbnRhdGlvbi5qcycsXHJcbiAgSEFORExFQkFSID0gJ21zZnQtaGFuZGxlYmFycy5qcycsXHJcbiAgUFJPWFkgPSAnbXNmdC1wcm94eS5qcycsXHJcbiAgRFNSID0gJ2Rzci5qcycsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIE1vZHVsZVNvdXJjZVR5cGUge1xyXG4gIFBBVEggPSAncGF0aCcsXHJcbiAgVkFSSUFCTEUgPSAndmFyaWFibGUnLFxyXG59XHJcbiIsImltcG9ydCB7IElTdGF0ZSB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxuY2xhc3MgU3RhdGUge1xyXG4gIHB1YmxpYyBzdGF0ZTogSVN0YXRlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihzdGF0ZT86IElTdGF0ZSkge1xyXG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlIHx8IHtcclxuICAgICAgY29uZmlnOiB7fSxcclxuICAgICAgZGVidWc6IHtcclxuICAgICAgICBsb2dzOiBbXSxcclxuICAgICAgICBldmVudHM6IFtdLFxyXG4gICAgICB9LFxyXG4gICAgICBjdXN0b206IHt9LFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgU3RhdGU7XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cclxuaW1wb3J0IHsgU0RLTW9kdWxlc1NvdXJjZVZhcmlhYmxlIH0gZnJvbSAnY29yZS9kZXBlbmRlbmN5TWFuYWdlci9lbnVtL21vZHVsZXMnO1xyXG5pbXBvcnQgU3RhdGUgZnJvbSAnLi9TdGF0ZSc7XHJcbmltcG9ydCB7IElDb25maWdTdGF0ZSwgSURlYnVnU3RhdGUsIElTdGF0ZSB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxuaW50ZXJmYWNlIEdldHRlcnMgZXh0ZW5kcyBJU3RvcmUuSUdldHRlciB7XHJcbiAgW3g6IHN0cmluZ106IGFueTtcclxufVxyXG5jbGFzcyBHZXR0ZXJzIGV4dGVuZHMgU3RhdGUge1xyXG4gIGNvbnN0cnVjdG9yKHN0YXRlOiBJU3RhdGUpIHtcclxuICAgIHN1cGVyKHN0YXRlKTtcclxuICB9XHJcbiAgZ2V0IGRlYnVnSW5mbygpOiBJRGVidWdTdGF0ZSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5kZWJ1ZztcclxuICB9XHJcblxyXG4gIGdldCBjb25maWcoKTogSUNvbmZpZ1N0YXRlIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLmNvbmZpZztcclxuICB9XHJcbiAgZ2V0IHVzZXJDb25zZW50KCk6IElVc2VyQ29uc2VudCB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5jdXN0b20udXNlckNvbnNlbnQ7XHJcbiAgfVxyXG5cclxuICAvLyBUT0RPOiBJbXBsZW1lbnQgYmVsb3cgZ2V0dGVyc1xyXG4gIGdldCBpc0hlYWRsZXNzKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzUHJldmlld01vZGUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5jb25maWcuaW5pdENvbmZpZz8ucHJldmlldyB8fCBmYWxzZTtcclxuICB9XHJcblxyXG4gIGdldCBpc0FjdGlvbkRpc2FibGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuY29uZmlnLmluaXRDb25maWc/LmRpc2FibGVBY3Rpb25zIHx8IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzTGl2ZVByZXZpZXdNb2RlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5wYXJlbnQ/Lm5hbWUgPT09ICdDb25zZW50TGl2ZVByZXZpZXcnO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHByZXNlbnRhdGlvblZhcmlhYmxlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gU0RLTW9kdWxlc1NvdXJjZVZhcmlhYmxlLlBSRVNFTlRBVElPTjtcclxuICB9XHJcblxyXG4gIGdldCBoYW5kbGViYXJWYXJpYWJsZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFNES01vZHVsZXNTb3VyY2VWYXJpYWJsZS5IQU5ETEVCQVI7XHJcbiAgfVxyXG5cclxuICBnZXQgcHJveHlWYXJpYWJsZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFNES01vZHVsZXNTb3VyY2VWYXJpYWJsZS5QUk9YWTtcclxuICB9XHJcblxyXG4gIGdldCBkc3JWYXJpYWJsZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFNES01vZHVsZXNTb3VyY2VWYXJpYWJsZS5EU1I7XHJcbiAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEdldHRlcnM7XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cclxuaW1wb3J0IFN0YXRlIGZyb20gJy4vU3RhdGUnO1xyXG5pbXBvcnQgeyBJU3RhdGUgfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbmludGVyZmFjZSBSZWR1Y2VycyBleHRlbmRzIElTdG9yZS5JUmVkdWNlciB7XHJcbiAgW3g6IHN0cmluZ106IGFueTtcclxufVxyXG5jbGFzcyBSZWR1Y2VycyBleHRlbmRzIFN0YXRlIHtcclxuICBjb25zdHJ1Y3RvcihzdGF0ZTogSVN0YXRlKSB7XHJcbiAgICBzdXBlcihzdGF0ZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2F2ZURlYnVnSW5mbyh7IGV2ZW50LCBsb2cgfTogeyBldmVudD86IHN0cmluZzsgbG9nPzogc3RyaW5nIH0pIHtcclxuICAgIGlmIChldmVudCkge1xyXG4gICAgICB0aGlzLnN0YXRlLmRlYnVnLmV2ZW50cy5wdXNoKGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobG9nKSB7XHJcbiAgICAgIHRoaXMuc3RhdGUuZGVidWcubG9ncy5wdXNoKGxvZyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0VXNlckNvbnNlbnQoY29uc2VudDogSVVzZXJDb25zZW50KSB7XHJcbiAgICB0aGlzLnN0YXRlLmN1c3RvbS51c2VyQ29uc2VudCA9IGNvbnNlbnQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0SW5pdENvbmZpZyhpbml0Q29uZmlnOiBJSW5pdENvbmZpZykge1xyXG4gICAgdGhpcy5zdGF0ZS5jb25maWcuaW5pdENvbmZpZyA9IGluaXRDb25maWc7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSZWR1Y2VycztcclxuIiwiaW1wb3J0IE9iamVjdFV0aWxzIGZyb20gJy4uL3V0aWxzL09iamVjdFV0aWxzJztcclxuaW1wb3J0IEdldHRlcnMgZnJvbSAnLi9HZXR0ZXJzJztcclxuaW1wb3J0IFJlZHVjZXJzIGZyb20gJy4vUmVkdWNlcnMnO1xyXG5pbXBvcnQgU3RhdGUgZnJvbSAnLi9TdGF0ZSc7XHJcblxyXG5jb25zdCB7IHN0YXRlIH0gPSBuZXcgU3RhdGUoKTtcclxuY29uc3QgZ2V0dGVyID0gbmV3IEdldHRlcnMoc3RhdGUpO1xyXG5jb25zdCByZWR1Y2VyID0gbmV3IFJlZHVjZXJzKHN0YXRlKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBnZXR0ZXJzOiBnZXR0ZXIsXHJcbiAgcmVkdWNlcnM6IHJlZHVjZXIsXHJcbiAgYWRkUmVkdWNlcnM6IGZ1bmN0aW9uIChyZWR1Y2VyczogYW55KSB7XHJcbiAgICB0aGlzLnJlZHVjZXJzID0gT2JqZWN0VXRpbHMubWVyZ2VEZWVwKHRoaXMucmVkdWNlcnMsIHJlZHVjZXJzKTtcclxuICB9LFxyXG4gIGFkZEdldHRlcnM6IGZ1bmN0aW9uIChnZXR0ZXJzOiBhbnkpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxyXG4gICAgICB0aGlzLmdldHRlcnMsXHJcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKGdldHRlcnMucHJvdG90eXBlKSxcclxuICAgICk7XHJcbiAgfSxcclxufTtcclxuIiwiZXhwb3J0IGVudW0gTG9nTGV2ZWxzIHtcclxuICBJTkZPLFxyXG4gIFdBUk4sXHJcbiAgRVJST1IsXHJcbn1cclxuIiwiaW1wb3J0IHsgTG9nTGV2ZWxzIH0gZnJvbSAnLi4vZW51bSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25zb2xlTG9nZ2VyIHtcclxuICAvKipcclxuICAgKiBCcm93c2VyJ3MgY29uc29sZSBsb2dnZXIgcGx1Z2luLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtMb2dMZXZlbHN9IGxldmVsIExvZyBsZXZlbFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIExvZyBtZXNzYWdlXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBsb2cobGV2ZWw6IExvZ0xldmVscywgbWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICBzd2l0Y2ggKGxldmVsKSB7XHJcbiAgICAgIGNhc2UgTG9nTGV2ZWxzLldBUk46XHJcbiAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIExvZ0xldmVscy5FUlJPUjpcclxuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xyXG4gICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgU3RvcmUgZnJvbSAnLi4vc3RvcmUnO1xyXG5pbXBvcnQgeyBMb2dMZXZlbHMgfSBmcm9tICcuL2VudW0nO1xyXG5pbXBvcnQgQ29uc29sZUxvZ2dlciBmcm9tICcuL3BsdWdpbnMvQ29uc29sZUxvZ2dlcic7XHJcblxyXG4vKipcclxuICogQHR5cGVkZWYge2ltcG9ydChcImNvcmUvdHlwZXMvaW50ZXJmYWNlc1wiKS5JR2VuZXJpY09iamVjdH0gSUdlbmVyaWNPYmplY3RcclxuICovXHJcbmNsYXNzIExvZ2dlciB7XHJcbiAgLyoqXHJcbiAgICogSW5mbyBsb2dzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBMb2dnZXIgbWVzc2FnZVxyXG4gICAqIEBwYXJhbSB7SUdlbmVyaWNPYmplY3R9IGRhdGEgQWRkaXRpb25hbCBkZXRhaWxzIHRvIGxvZ1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgaW5mbyhtZXNzYWdlOiBzdHJpbmcsIGRhdGE/OiBJR2VuZXJpY09iamVjdCkge1xyXG4gICAgTG9nZ2VyLmxvZyhMb2dMZXZlbHMuSU5GTywgbWVzc2FnZSwgZGF0YSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXYXJuaW5nIGxvZ3NcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIExvZ2dlciBtZXNzYWdlXHJcbiAgICogQHBhcmFtIHtJR2VuZXJpY09iamVjdH0gZGF0YSBBZGRpdGlvbmFsIGRldGFpbHMgdG8gbG9nXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyB3YXJuKG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IElHZW5lcmljT2JqZWN0KSB7XHJcbiAgICBMb2dnZXIubG9nKExvZ0xldmVscy5XQVJOLCBtZXNzYWdlLCBkYXRhKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVycm9yIGxvZ3NcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIExvZ2dlciBtZXNzYWdlXHJcbiAgICogQHBhcmFtIHtJR2VuZXJpY09iamVjdH0gZGF0YSBBZGRpdGlvbmFsIGRldGFpbHMgdG8gbG9nXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBlcnJvcihtZXNzYWdlOiBzdHJpbmcsIGRhdGE/OiBJR2VuZXJpY09iamVjdCkge1xyXG4gICAgTG9nZ2VyLmxvZyhMb2dMZXZlbHMuRVJST1IsIG1lc3NhZ2UsIGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9ncyB0aGUgbWVzc2FnZSB1c2luZyB0aGUgcGx1Z2luIGJhc2VkIGluIGxldmVsLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtMb2dMZXZlbHN9IGxvZ0xldmVsIExvZyBsZXZlbFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIExvZ2dlciBtZXNzYWdlXHJcbiAgICogQHBhcmFtIHtJR2VuZXJpY09iamVjdH0gZGF0YSBBZGRpdGlvbmFsIGRldGFpbHMgdG8gbG9nXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgbG9nKFxyXG4gICAgbG9nTGV2ZWw6IExvZ0xldmVscyxcclxuICAgIG1lc3NhZ2U6IHN0cmluZyxcclxuICAgIGRhdGE/OiBJR2VuZXJpY09iamVjdCxcclxuICApIHtcclxuICAgIGNvbnN0IGZvcm1hdHRlZE1lc3NhZ2UgPSBMb2dnZXIuZm9ybWF0TG9nTWVzc2FnZShsb2dMZXZlbCwgbWVzc2FnZSwgZGF0YSk7XHJcblxyXG4gICAgU3RvcmUucmVkdWNlcnMuc2F2ZURlYnVnSW5mbyh7IGxvZzogZm9ybWF0dGVkTWVzc2FnZSB9KTtcclxuICAgIENvbnNvbGVMb2dnZXIubG9nKGxvZ0xldmVsLCBmb3JtYXR0ZWRNZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZvcm1hdHMgdGhlIGxvZ2dlciBtZXNzYWdlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtMb2dMZXZlbHN9IGxvZ0xldmVsIExvZyBsZXZlbFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIExvZ2dlciBtZXNzYWdlXHJcbiAgICogQHBhcmFtIHtJR2VuZXJpY09iamVjdH0gZGF0YSBBZGRpdGlvbmFsIGRldGFpbHMgdG8gbG9nXHJcbiAgICogQHJldHVybnMge3N0cmluZ30gRm9ybWF0dGVkIGxvZ2dlciBtZXNzYWdlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZm9ybWF0TG9nTWVzc2FnZShcclxuICAgIGxvZ0xldmVsOiBMb2dMZXZlbHMsXHJcbiAgICBtZXNzYWdlOiBzdHJpbmcsXHJcbiAgICBkYXRhPzogSUdlbmVyaWNPYmplY3QsXHJcbiAgKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHN0cmluZ2lmaWVkRGF0YSA9IGRhdGEgPyBgfCAke0pTT04uc3RyaW5naWZ5KGRhdGEpfWAgOiAnJztcclxuICAgIHJldHVybiBgWyR7TG9nTGV2ZWxzW2xvZ0xldmVsXX1dICR7bWVzc2FnZX0gJHtzdHJpbmdpZmllZERhdGF9YDtcclxuICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgTG9nZ2VyO1xyXG4iLCJleHBvcnQgZW51bSBFdmVudHNSZXBsYXlTdHJhdGVneSB7XHJcbiAgUkVQTEFZX0FMTCxcclxuICBSRVBMQVlfTEFURVNULFxyXG4gIFNLSVAsXHJcbn1cclxuIiwiLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xyXG5pbXBvcnQgeyBJQ2FsbGJhY2sgfSBmcm9tICdjb3JlL2V2ZW50QnVzL3R5cGVzL0lFdmVudCc7XHJcbmltcG9ydCB7IElFdmVudExvZ0luZm8gfSBmcm9tICdjb3JlL2V2ZW50QnVzL3R5cGVzL0lFdmVudHNSZWNvcmRlcic7XHJcbmltcG9ydCB7IElSZXBsYXlTdHJhdGVneSB9IGZyb20gJ2NvcmUvZXZlbnRCdXMvdHlwZXMvSVJlcGxheVN0cmF0ZWd5JztcclxuaW1wb3J0IHsgRXZlbnRzUmVwbGF5U3RyYXRlZ3kgfSBmcm9tICcuLi9lbnVtL0V2ZW50c1JlcGxheSc7XHJcblxyXG5jbGFzcyBSZXBsYXlBbGxFdmVudHMgaW1wbGVtZW50cyBJUmVwbGF5U3RyYXRlZ3kge1xyXG4gIHB1YmxpYyBzdHJhdGVneSA9IEV2ZW50c1JlcGxheVN0cmF0ZWd5LlJFUExBWV9BTEw7XHJcblxyXG4gIHB1YmxpYyBleGVjdXRlKGNhbGxiYWNrOiBJQ2FsbGJhY2ssIGV2ZW50czogSUV2ZW50TG9nSW5mb1tdKTogdm9pZCB7XHJcbiAgICBldmVudHMuZm9yRWFjaCgoeyBwYXlsb2FkIH0pID0+IGNhbGxiYWNrKHBheWxvYWQpKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBSZXBsYXlBbGxFdmVudHMoKTtcclxuIiwiLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xyXG5pbXBvcnQgeyBJQ2FsbGJhY2sgfSBmcm9tICdjb3JlL2V2ZW50QnVzL3R5cGVzL0lFdmVudCc7XHJcbmltcG9ydCB7IElFdmVudExvZ0luZm8gfSBmcm9tICdjb3JlL2V2ZW50QnVzL3R5cGVzL0lFdmVudHNSZWNvcmRlcic7XHJcbmltcG9ydCB7IElSZXBsYXlTdHJhdGVneSB9IGZyb20gJ2NvcmUvZXZlbnRCdXMvdHlwZXMvSVJlcGxheVN0cmF0ZWd5JztcclxuaW1wb3J0IHsgRXZlbnRzUmVwbGF5U3RyYXRlZ3kgfSBmcm9tICcuLi9lbnVtL0V2ZW50c1JlcGxheSc7XHJcblxyXG5jbGFzcyBSZXBsYXlMYXRlc3RFdmVudCBpbXBsZW1lbnRzIElSZXBsYXlTdHJhdGVneSB7XHJcbiAgcHVibGljIHN0cmF0ZWd5ID0gRXZlbnRzUmVwbGF5U3RyYXRlZ3kuUkVQTEFZX0xBVEVTVDtcclxuXHJcbiAgcHVibGljIGV4ZWN1dGUoY2FsbGJhY2s6IElDYWxsYmFjaywgZXZlbnRzOiBJRXZlbnRMb2dJbmZvW10pOiB2b2lkIHtcclxuICAgIGlmIChldmVudHMubGVuZ3RoKSB7XHJcbiAgICAgIGNhbGxiYWNrKGV2ZW50c1tldmVudHMubGVuZ3RoIC0gMV0ucGF5bG9hZCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgUmVwbGF5TGF0ZXN0RXZlbnQoKTtcclxuIiwiLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xyXG5pbXBvcnQgeyBJUmVwbGF5U3RyYXRlZ3kgfSBmcm9tICdjb3JlL2V2ZW50QnVzL3R5cGVzL0lSZXBsYXlTdHJhdGVneSc7XHJcbmltcG9ydCB7IEV2ZW50c1JlcGxheVN0cmF0ZWd5IH0gZnJvbSAnLi4vZW51bS9FdmVudHNSZXBsYXknO1xyXG5cclxuY2xhc3MgU2tpcEV2ZW50UmVwbGF5IGltcGxlbWVudHMgSVJlcGxheVN0cmF0ZWd5IHtcclxuICBwdWJsaWMgc3RyYXRlZ3kgPSBFdmVudHNSZXBsYXlTdHJhdGVneS5TS0lQO1xyXG5cclxuICBwdWJsaWMgZXhlY3V0ZSgpOiB2b2lkIHtcclxuICAgIHJldHVybiB2b2lkIDA7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgU2tpcEV2ZW50UmVwbGF5KCk7XHJcbiIsImltcG9ydCB7IElSZXBsYXlTdHJhdGVneSB9IGZyb20gJ2NvcmUvZXZlbnRCdXMvdHlwZXMvSVJlcGxheVN0cmF0ZWd5JztcclxuaW1wb3J0IHsgRXZlbnRzUmVwbGF5U3RyYXRlZ3kgfSBmcm9tICcuLi9lbnVtL0V2ZW50c1JlcGxheSc7XHJcbmltcG9ydCBSZXBsYXlBbGxFdmVudHMgZnJvbSAnLi9SZXBsYXlBbGxFdmVudHMnO1xyXG5pbXBvcnQgUmVwbGF5TGF0ZXN0RXZlbnQgZnJvbSAnLi9SZXBsYXlMYXRlc3RFdmVudCc7XHJcbmltcG9ydCBTa2lwRXZlbnRSZXBsYXkgZnJvbSAnLi9Ta2lwRXZlbnRSZXBsYXknO1xyXG5cclxudHlwZSBJRXZlbnRzUmVwbGF5U3RyYXRlZ3kgPSB7XHJcbiAgW3N0cmF0ZWd5IGluIEV2ZW50c1JlcGxheVN0cmF0ZWd5XTogSVJlcGxheVN0cmF0ZWd5O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIFtFdmVudHNSZXBsYXlTdHJhdGVneS5SRVBMQVlfQUxMXTogUmVwbGF5QWxsRXZlbnRzLFxyXG4gIFtFdmVudHNSZXBsYXlTdHJhdGVneS5SRVBMQVlfTEFURVNUXTogUmVwbGF5TGF0ZXN0RXZlbnQsXHJcbiAgW0V2ZW50c1JlcGxheVN0cmF0ZWd5LlNLSVBdOiBTa2lwRXZlbnRSZXBsYXksXHJcbn0gYXMgSUV2ZW50c1JlcGxheVN0cmF0ZWd5O1xyXG4iLCJpbXBvcnQgeyBJQ2FsbGJhY2sgfSBmcm9tICcuLi90eXBlcy9JRXZlbnQnO1xyXG5pbXBvcnQgeyBJRXZlbnRzTG9nIH0gZnJvbSAnLi4vdHlwZXMvSUV2ZW50c1JlY29yZGVyJztcclxuaW1wb3J0IHsgRXZlbnRzUmVwbGF5U3RyYXRlZ3kgfSBmcm9tICcuL2VudW0vRXZlbnRzUmVwbGF5JztcclxuaW1wb3J0IFJlcGxheVN0cmF0ZWd5IGZyb20gJy4vZXZlbnRzUmVwbGF5U3RyYXRlZ3knO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50c1JlY29yZGluZyB7XHJcbiAgcHVibGljIHN0YXRpYyBldmVudHNMb2dzOiBJRXZlbnRzTG9nID0ge307XHJcbiAgcHJpdmF0ZSBzdGF0aWMgREVGQVVMVF9TVFJBVEVHWTogRXZlbnRzUmVwbGF5U3RyYXRlZ3kgPVxyXG4gICAgRXZlbnRzUmVwbGF5U3RyYXRlZ3kuUkVQTEFZX0xBVEVTVDtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWNvcmQoZXZlbnQ6IHN0cmluZywgcGF5bG9hZDogSUdlbmVyaWNPYmplY3QpIHtcclxuICAgIHRoaXMuZXZlbnRzTG9nc1tldmVudF0gPSB0aGlzLmV2ZW50c0xvZ3NbZXZlbnRdIHx8IFtdO1xyXG4gICAgdGhpcy5ldmVudHNMb2dzW2V2ZW50XS5wdXNoKHsgcGF5bG9hZCB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVwbGF5KFxyXG4gICAgZXZlbnQ6IHN0cmluZyxcclxuICAgIGNhbGxiYWNrOiBJQ2FsbGJhY2ssXHJcbiAgICBzdHJhdGVneTogRXZlbnRzUmVwbGF5U3RyYXRlZ3kgPSB0aGlzLkRFRkFVTFRfU1RSQVRFR1ksXHJcbiAgKSB7XHJcbiAgICBSZXBsYXlTdHJhdGVneVtzdHJhdGVneV0uZXhlY3V0ZShjYWxsYmFjaywgdGhpcy5ldmVudHNMb2dzW2V2ZW50XSB8fCBbXSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcclxuaW1wb3J0IFN0b3JlIGZyb20gJy4uL3N0b3JlJztcclxuaW1wb3J0IHsgRXZlbnRzUmVjb3JkaW5nIH0gZnJvbSAnLi9ldmVudHNSZWNvcmRlcic7XHJcbmltcG9ydCB7XHJcbiAgSUNhbGxiYWNrLFxyXG4gIElFdmVudERldGFpbHMsXHJcbiAgSUV2ZW50SGFuZGxlckRldGFpbHMsXHJcbiAgSUV2ZW50SGFuZGxlclByb3BlcnRpZXMsXHJcbiAgSUV2ZW50cyxcclxufSBmcm9tICcuL3R5cGVzL0lFdmVudCc7XHJcblxyXG5jbGFzcyBFdmVudEJ1cyB7XHJcbiAgcHJpdmF0ZSBldmVudElkQ291bnRlcjogbnVtYmVyO1xyXG4gIHByaXZhdGUgZXZlbnRzOiBJRXZlbnRzO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuZXZlbnRzID0ge307XHJcbiAgICB0aGlzLmV2ZW50SWRDb3VudGVyID0gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgZGVmYXVsdCBldmVudCBkZXRhaWxzLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge0lFdmVudERldGFpbHN9IERlZmF1bHQgZXZlbnQgZGV0YWlsc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RhdGljIGdldERlZmF1bHRFdmVudERldGFpbHMoKTogSUV2ZW50RGV0YWlscyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBleGVjdXRpb25Db3VudDogMCxcclxuICAgICAgY2FsbGJhY2tzOiBbXSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgRXZlbnQgbmFtZVxyXG4gICAqIEBwYXJhbSB7SUNhbGxiYWNrfSBjYWxsYmFjayBMaXN0ZW5lciBjYWxsYmFja1xyXG4gICAqIEBwYXJhbSB7SUV2ZW50SGFuZGxlclByb3BlcnRpZXN9IHByb3BlcnRpZXMgQWRkaXRpb25hbCBjb25maWd1cmF0aW9uIHByb3BlcnRpZXNcclxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBFdmVudCBJRFxyXG4gICAqL1xyXG4gIHB1YmxpYyBvbihcclxuICAgIGV2ZW50OiBzdHJpbmcsXHJcbiAgICBjYWxsYmFjazogSUNhbGxiYWNrLFxyXG4gICAgeyBzeW5jID0gZmFsc2UsIHJlcGxheVN0cmF0ZWd5IH06IElFdmVudEhhbmRsZXJQcm9wZXJ0aWVzID0ge30sXHJcbiAgKTogbnVtYmVyIHtcclxuICAgIExvZ2dlci5pbmZvKGBDYWxsYmFjayByZWdpc3RlcmVkIGZvciBldmVudCA6ICR7ZXZlbnR9YCk7XHJcbiAgICB0aGlzLmV2ZW50SWRDb3VudGVyKys7XHJcbiAgICBjb25zdCBldmVudERldGFpbHM6IElFdmVudEhhbmRsZXJEZXRhaWxzID0ge1xyXG4gICAgICBpZDogdGhpcy5ldmVudElkQ291bnRlcixcclxuICAgICAgZm46IGNhbGxiYWNrLFxyXG4gICAgICBzeW5jLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmV2ZW50c1tldmVudF0gPVxyXG4gICAgICB0aGlzLmV2ZW50c1tldmVudF0gfHwgRXZlbnRCdXMuZ2V0RGVmYXVsdEV2ZW50RGV0YWlscygpO1xyXG4gICAgdGhpcy5ldmVudHNbZXZlbnRdLmNhbGxiYWNrcy5wdXNoKGV2ZW50RGV0YWlscyk7XHJcblxyXG4gICAgRXZlbnRzUmVjb3JkaW5nLnJlcGxheShldmVudCwgY2FsbGJhY2ssIHJlcGxheVN0cmF0ZWd5KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5ldmVudElkQ291bnRlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4ZWN1dGUgYW4gZXZlbnQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgRXZlbnQgbmFtZVxyXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiY29yZS90eXBlcy9pbnRlcmZhY2VzXCIpLklHZW5lcmljT2JqZWN0fSBwYXlsb2FkIFBheWxvYWQgZGF0YVxyXG4gICAqL1xyXG4gIHB1YmxpYyB0cmlnZ2VyKGV2ZW50OiBzdHJpbmcsIHBheWxvYWQ6IElHZW5lcmljT2JqZWN0ID0ge30pIHtcclxuICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMuZXZlbnRzW2V2ZW50XT8uY2FsbGJhY2tzIHx8IFtdO1xyXG5cclxuICAgIC8vIExldCB0aGUgbG9naWMgcnVuIGV2ZW4gaWYgbm8gYWN0aXZlIGxpc3RlbmVycyBzbyB0aGF0IHdlIGNhbiByZWNvcmQgdGhlIGV2ZW50cy5cclxuICAgIExvZ2dlci5pbmZvKFxyXG4gICAgICBgU3RhcnRlZCBleGVjdXRpbmcgJyR7Y2FsbGJhY2tzLmxlbmd0aH0nIGNhbGxiYWNrcyBmb3IgZXZlbnQgJyR7ZXZlbnR9J2AsXHJcbiAgICAgIHBheWxvYWQsXHJcbiAgICApO1xyXG5cclxuICAgIFN0b3JlLnJlZHVjZXJzLnNhdmVEZWJ1Z0luZm8oeyBldmVudCB9KTtcclxuXHJcbiAgICBjYWxsYmFja3MuZm9yRWFjaChhc3luYyBldmVudEhhbmRsZXIgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGlmICghZXZlbnRIYW5kbGVyLnN5bmMpIHtcclxuICAgICAgICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXZlbnRIYW5kbGVyLmZuKHBheWxvYWQpO1xyXG4gICAgICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgICAgICBMb2dnZXIuZXJyb3IoYEVycm9yIGluIGV4ZWN1dGluZyBjYWxsYmFjayBpZCA6ICR7ZXZlbnRIYW5kbGVyLmlkfWAsIGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBFdmVudHNSZWNvcmRpbmcucmVjb3JkKGV2ZW50LCBwYXlsb2FkKTtcclxuXHJcbiAgICBMb2dnZXIuaW5mbyhcclxuICAgICAgYENvbXBsZXRlZCBleGVjdXRpbmcgJyR7Y2FsbGJhY2tzLmxlbmd0aH0nIGNhbGxiYWNrcyBmb3IgZXZlbnQgJyR7ZXZlbnR9J2AsXHJcbiAgICAgIHBheWxvYWQsXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0aGlzLmV2ZW50c1tldmVudF0pIHtcclxuICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLmV4ZWN1dGlvbkNvdW50Kys7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZXRhY2ggYW4gZXZlbnQgbGlzdGVuZXIuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgRXZlbnQgbmFtZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgSUNhbGxiYWNrfSBldmVudElkT3JDYWxsYmFjayBFdmVudCBsaXN0ZW5lciBJRCBvciBjYWxsYmFjayB0byByZW1vdmVcclxuICAgKi9cclxuICBwdWJsaWMgb2ZmKGV2ZW50OiBzdHJpbmcsIGV2ZW50SWRPckNhbGxiYWNrOiBudW1iZXIgfCBJQ2FsbGJhY2spIHtcclxuICAgIGNvbnN0IGlkeCA9IHRoaXMuZXZlbnRzW2V2ZW50XT8uY2FsbGJhY2tzLmZpbmRJbmRleChcclxuICAgICAgZXZlbnREZXRhaWxzID0+XHJcbiAgICAgICAgZXZlbnREZXRhaWxzLmlkID09PSBldmVudElkT3JDYWxsYmFjayB8fFxyXG4gICAgICAgIGV2ZW50RGV0YWlscy5mbiA9PT0gZXZlbnRJZE9yQ2FsbGJhY2ssXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0eXBlb2YgaWR4ID09PSAnbnVtYmVyJyAmJiB+aWR4KSB7XHJcbiAgICAgIExvZ2dlci5pbmZvKFxyXG4gICAgICAgIGBSZW1vdmluZyBldmVudCBsaXN0ZW5lciAnJHt0aGlzLmV2ZW50c1tldmVudF0uY2FsbGJhY2tzW2lkeF0uaWR9JyBvZiAnJHtldmVudH0nIGV2ZW50YCxcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLmNhbGxiYWNrcy5zcGxpY2UoaWR4LCAxKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIExvZ2dlci5lcnJvcihcclxuICAgICAgICBgVW5hYmxlIHRvIHJlbW92ZSBldmVudCBsaXN0ZW5lciBmb3IgZXZlbnQgJyR7ZXZlbnR9Jy4gTm8gbWF0Y2hpbmcgZXZlbnQgaWQgb3IgY2FsbGJhY2sgZm91bmQuYCxcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBFdmVudEJ1cygpO1xyXG4iLCJleHBvcnQgZW51bSBDb25zZW50TW9kZWxUeXBlIHtcclxuICBFeHBsaWNpdCA9ICdFeHBsaWNpdCcsXHJcbiAgSW1wbGljaXQgPSAnSW1wbGljaXQnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBQdWJsaWNFdmVudHMge1xyXG4gIENvbnNlbnRDaGFuZ2VkID0gJ0NvbnNlbnRDaGFuZ2VkJyxcclxuICBTaG93Q29uc2VudE5vdGljZSA9ICdTaG93Q29uc2VudE5vdGljZScsXHJcbiAgU2hvd0ZpcnN0UGFnZSA9ICdTaG93Rmlyc3RQYWdlJyxcclxuICBDbG9zZUNvbnNlbnROb3RpY2UgPSAnQ2xvc2VDb25zZW50Tm90aWNlJyxcclxuICBBY2NlcHRBbGwgPSAnQWNjZXB0QWxsJyxcclxuICBSZWplY3RBbGwgPSAnUmVqZWN0QWxsJyxcclxuICBTaG93VGVtcGxhdGUgPSAnU2hvd1RlbXBsYXRlJyxcclxuICBDbG9zZVRlbXBsYXRlID0gJ0Nsb3NlVGVtcGxhdGUnLFxyXG4gIFVwZGF0ZUNvbnNlbnQgPSAnVXBkYXRlQ29uc2VudCcsXHJcbiAgQW5jaG9yVGFnQ2xpY2tlZCA9ICdBbmNob3JUYWdDbGlja2VkJyxcclxuICBGZXRjaENvbmZpZyA9ICdGZXRjaENvbmZpZycsXHJcbiAgUXVlc3Rpb25zRm9ybVN1Ym1pdFdpdGhvdXRNZXRhRGF0YSA9ICdRdWVzdGlvbnNGb3JtU3VibWl0V2l0aG91dE1ldGFEYXRhJyxcclxuICBRdWVzdGlvbnNGb3JtU3VibWl0ID0gJ1F1ZXN0aW9uc0Zvcm1TdWJtaXQnLFxyXG4gIFNob3dQcmVmZXJlbmNlcyA9ICdTaG93UHJlZmVyZW5jZXMnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBFdmVudHMge1xyXG4gIEluaXQgPSAnSW5pdCcsXHJcbiAgQ29yZUNvbnNlbnRNb2RlbFNlbGVjdGVkID0gJ0NvcmVDb25zZW50TW9kZWxTZWxlY3RlZCcsXHJcbiAgQ29uZmlnUmVhZHkgPSAnQ29uZmlnUmVhZHknLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBTREtNb2RlIHtcclxuICBEZWZhdWx0ID0gJ0RlZmF1bHQnLFxyXG4gIEhlYWRMZXNzID0gJ0hlYWRMZXNzJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gU3R5bGVUeXBlIHtcclxuICBVcmwgPSAnVXJsJyxcclxuICBUZXh0ID0gJ1RleHQnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBQcmVmZXJlbmNlIHtcclxuICBPRkYgPSAnMCcsXHJcbiAgT04gPSAnMScsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIENvb2tpZSB7XHJcbiAgQ29uc2VudCA9ICdtc2Z0LWNvbnNlbnQnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBSZWdpc3RlcmVkRGl2VHlwZSB7XHJcbiAgU2NyaXB0ID0gJ3NjcmlwdCcsXHJcbiAgSUZyYW1lID0gJ2lmcmFtZScsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIE5vdGljZVR5cGUge1xyXG4gIFRyYWNrZXJDYXRlZ29yeSA9ICd0cmFja2VyQ2F0ZWdvcnknLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBFcnJvclN0cmluZ3Mge1xyXG4gIFRlbXBsYXRlRXJyb3IgPSAnPGI+VGhlcmUgaXMgc29tZXRoaW5nIHdyb25nIHdpdGggdGVtcGxhdGUuIFBsZWFzZSBjaGVjayBsb2dzLjwvYj4nLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBJbnRlcnZhbFVuaXRzIHtcclxuICBkYXkgPSAnZGF5JyxcclxuICB3ZWVrID0gJ3dlZWsnLFxyXG4gIG1vbnRoID0gJ21vbnRoJyxcclxuICB5ZWFyID0gJ3llYXInLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBRdWVzdGlvblR5cGUge1xyXG4gIFRleHQgPSAnVGV4dCcsXHJcbiAgRW1haWwgPSAnRW1haWwnLFxyXG4gIFJhZGlvID0gJ1JhZGlvJyxcclxuICBNdWx0aVNlbGVjdCA9ICdNdWx0aVNlbGVjdCcsXHJcbiAgU2VsZWN0ID0gJ1NlbGVjdCcsXHJcbiAgRGF0ZSA9ICdEYXRlJyxcclxuICBQaG9uZU51bWJlciA9ICdQaG9uZU51bWJlcicsXHJcbiAgQ3JlZGl0Q2FyZCA9ICdDcmVkaXRDYXJkJyxcclxuICBOdW1iZXIgPSAnTnVtYmVyJyxcclxuICBNdWx0aUxpbmVUZXh0ID0gJ211bHRpTGluZVRleHQnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBRdWVzdGlvblZhbGlkYXRpb24ge1xyXG4gIFJlcXVpcmVkID0gJ3JlcXVpcmVkJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gUXVlc3Rpb25GaWVsZCB7XHJcbiAgUXVlc3Rpb24gPSAncXVlc3Rpb24nLFxyXG4gIFBsYWNlaG9sZGVyID0gJ3BsYWNlaG9sZGVyJyxcclxuICBPcHRpb25zID0gJ29wdGlvbnMnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBNb2RlbEtpbmQge1xyXG4gIFdlYkNvbnNlbnRNb2RlbCA9ICdXZWJDb25zZW50TW9kZWwnLFxyXG4gIFF1ZXN0aW9uTW9kZWwgPSAnRFNSU3VibWlzc2lvbk1vZGVsJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gVGVtcGxhdGUge1xyXG4gIFByZWZlcmVuY2VzID0gJ1ByZWZlcmVuY2VzJyxcclxufVxyXG4iLCJpbXBvcnQgc3RvcmUgZnJvbSAnY29yZS9zdG9yZSc7XHJcbmltcG9ydCBFdmVudEJ1cyBmcm9tICcuLi9ldmVudEJ1cyc7XHJcbmltcG9ydCB7IEV2ZW50cyB9IGZyb20gJy4uL2NvbnN0YW50cy9lbnVtcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnRlcm5hbEFQSSB7XHJcbiAgcHVibGljIHN0YXRpYyBpbml0Q29uc2VudChjb25maWc6IElJbml0Q29uZmlnKSB7XHJcbiAgICBzdG9yZS5yZWR1Y2Vycy5zZXRJbml0Q29uZmlnKGNvbmZpZyk7XHJcbiAgICBFdmVudEJ1cy50cmlnZ2VyKEV2ZW50cy5Jbml0LCBjb25maWcpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgRXZlbnRCdXMgZnJvbSAnLi4vZXZlbnRCdXMnO1xyXG5pbXBvcnQgeyBJQ2FsbGJhY2ssIElFdmVudEhhbmRsZXJQcm9wZXJ0aWVzIH0gZnJvbSAnLi4vZXZlbnRCdXMvdHlwZXMvSUV2ZW50JztcclxuaW1wb3J0IExvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xyXG5pbXBvcnQgeyBFdmVudHMgfSBmcm9tICcuLi9jb25zdGFudHMvZW51bXMnO1xyXG5pbXBvcnQgSW50ZXJuYWxBUEkgZnJvbSAnY29yZS9pbnRlcm5hbEFwaSc7XHJcblxyXG5jbGFzcyBNU0ZUQ29uc2VudCB7XHJcbiAgLyoqXHJcbiAgICogSW5pdCB3aWxsIGluaXRpYWxpemUgdGhlIHNkay5cclxuICAgKlxyXG4gICAqIEBwYXJhbSAge2ltcG9ydChcImNvcmUvdHlwZXMvaW50ZXJmYWNlc1wiKS5JSW5pdENvbmZpZ30gY29uZmlnIGluaXQgY29uZmlnXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBpbml0KGNvbmZpZzogSUluaXRDb25maWcpIHtcclxuICAgIEludGVybmFsQVBJLmluaXRDb25zZW50KGNvbmZpZyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgRXZlbnQgbmFtZVxyXG4gICAqIEBwYXJhbSB7SUNhbGxiYWNrfSBjYWxsYmFjayBMaXN0ZW5lciBjYWxsYmFja1xyXG4gICAqIEBwYXJhbSB7SUV2ZW50SGFuZGxlclByb3BlcnRpZXN9IHByb3BlcnRpZXMgQWRkaXRpb25hbCBjb25maWd1cmF0aW9uIHByb3BlcnRpZXNcclxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBFdmVudCBJRFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb24oXHJcbiAgICBldmVudDogc3RyaW5nLFxyXG4gICAgY2FsbGJhY2s6IElDYWxsYmFjayxcclxuICAgIHsgc3luYyA9IGZhbHNlIH06IElFdmVudEhhbmRsZXJQcm9wZXJ0aWVzID0ge30sXHJcbiAgKTogbnVtYmVyIHwgdm9pZCB7XHJcbiAgICBpZiAoZXZlbnQgaW4gRXZlbnRzKSB7XHJcbiAgICAgIExvZ2dlci5lcnJvcihgQ2Fubm90IHN1YnNjcmliZSB0byBpbnRlcm5hbCBldmVudCAnJHtldmVudH0nLmApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIEV2ZW50QnVzLm9uKGV2ZW50LCBjYWxsYmFjaywgeyBzeW5jIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXhlY3V0ZSBhbiBldmVudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBFdmVudCBuYW1lXHJcbiAgICogQHBhcmFtIHtpbXBvcnQoXCJjb3JlL3R5cGVzL2ludGVyZmFjZXNcIikuSUdlbmVyaWNPYmplY3R9IHBheWxvYWQgUGF5bG9hZCBkYXRhXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyB0cmlnZ2VyKGV2ZW50OiBzdHJpbmcsIHBheWxvYWQ/OiBJR2VuZXJpY09iamVjdCkge1xyXG4gICAgaWYgKGV2ZW50IGluIEV2ZW50cykge1xyXG4gICAgICBMb2dnZXIuZXJyb3IoYENhbm5vdCB0cmlnZ2VyIGludGVybmFsIGV2ZW50ICcke2V2ZW50fScuYCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBFdmVudEJ1cy50cmlnZ2VyKGV2ZW50LCBwYXlsb2FkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGFjaCBhbiBldmVudCBsaXN0ZW5lci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBFdmVudCBuYW1lXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50SWQgRXZlbnQgbGlzdGVuZXIgSUQgdG8gcmVtb3ZlXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvZmYoZXZlbnQ6IHN0cmluZywgZXZlbnRJZDogbnVtYmVyKTogdm9pZDtcclxuICAvKipcclxuICAgKiBEZXRhY2ggYW4gZXZlbnQgbGlzdGVuZXIuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgRXZlbnQgbmFtZVxyXG4gICAqIEBwYXJhbSB7SUNhbGxiYWNrfSBjYWxsYmFjayBFdmVudCBsaXN0ZW5lciBjYWxsYmFjayB0byByZW1vdmVcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG9mZihldmVudDogc3RyaW5nLCBjYWxsYmFjazogSUNhbGxiYWNrKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogRGV0YWNoIGFuIGV2ZW50IGxpc3RlbmVyLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IEV2ZW50IG5hbWVcclxuICAgKiBAcGFyYW0ge251bWJlciB8IElDYWxsYmFja30gZXZlbnRJZE9yQ2FsbGJhY2sgRXZlbnQgbGlzdGVuZXIgSUQgb3IgY2FsbGJhY2sgdG8gcmVtb3ZlXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvZmYoZXZlbnQ6IHN0cmluZywgZXZlbnRJZE9yQ2FsbGJhY2s6IG51bWJlciB8IElDYWxsYmFjaykge1xyXG4gICAgaWYgKGV2ZW50IGluIEV2ZW50cykge1xyXG4gICAgICBMb2dnZXIuZXJyb3IoYENhbm5vdCBkZXRhY2ggbGlzdGVuZXIgZm9yIGludGVybmFsIGV2ZW50ICcke2V2ZW50fScuYCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBFdmVudEJ1cy5vZmYoZXZlbnQsIGV2ZW50SWRPckNhbGxiYWNrKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1TRlRDb25zZW50O1xyXG4iLCJpbXBvcnQgeyBTdHlsZVR5cGUgfSBmcm9tICdjb3JlL2NvbnN0YW50cy9lbnVtcyc7XHJcbmltcG9ydCBzdG9yZSBmcm9tICdjb3JlL3N0b3JlJztcclxuXHJcbmNsYXNzIElGcmFtZVV0aWxzIHtcclxuICAvKipcclxuICAgKiBDcmVhdGUgYW5kIGFkZCBuZXcgaWZyYW1lXHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGJvZHlIdG1sIGJvZHkgaHRtbCBjb250ZW50XHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSBpZnJhbWVJZCBpZCB0byBiZSBhc3NpZ25lZCB0byBpZnJhbWVcclxuICAgKiBAcGFyYW0gIHtIVE1MRWxlbWVudHxudWxsfSBwYXJlbnRFbGVtZW50IHBhcmVudCBlbGVtZW50IHRvIHdoaWNoIGlmcmFtZSB3aWxsIGJlIGFkZGVkXHJcbiAgICogQHBhcmFtICB7d2luZG93Ll9fTVNGVF9TREsuaW50ZXJmYWNlcy5JU3R5bGVbXX0gc3R5bGVzIHVzZXIgcHJvdmlkZWQgc3R5bGVzXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVJRnJhbWUoXHJcbiAgICBib2R5SHRtbDogc3RyaW5nLFxyXG4gICAgaWZyYW1lSWQ6IHN0cmluZyxcclxuICAgIHBhcmVudEVsZW1lbnQ/OiBIVE1MRWxlbWVudCB8IG51bGwsXHJcbiAgICBzdHlsZXM/OiBJU3R5bGVbXSxcclxuICApIHtcclxuICAgIGNvbnN0IHJlbmRlcldpdGhvdXRJZnJhbWUgPVxyXG4gICAgICBzdG9yZS5nZXR0ZXJzLmNvbmZpZy5pbml0Q29uZmlnPy5yZW5kZXJUZW1wbGF0ZVdpdGhvdXRJZnJhbWU7XHJcbiAgICBpZiAoZG9jdW1lbnQuYm9keSkge1xyXG4gICAgICBJRnJhbWVVdGlscy5hcHBlbmRFbGVtZW50KFxyXG4gICAgICAgIHJlbmRlcldpdGhvdXRJZnJhbWVcclxuICAgICAgICAgID8gSUZyYW1lVXRpbHMuZ2V0RGl2RWxlbWVudChib2R5SHRtbCwgaWZyYW1lSWQsIHBhcmVudEVsZW1lbnQgPT0gbnVsbClcclxuICAgICAgICAgIDogSUZyYW1lVXRpbHMuZ2V0SWZyYW1lT2JqZWN0KFxyXG4gICAgICAgICAgICAgIGJvZHlIdG1sLFxyXG4gICAgICAgICAgICAgIGlmcmFtZUlkLFxyXG4gICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQgPT0gbnVsbCxcclxuICAgICAgICAgICAgICBzdHlsZXMsXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgcGFyZW50RWxlbWVudCxcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4gICAgICAgIElGcmFtZVV0aWxzLmFwcGVuZEVsZW1lbnQoXHJcbiAgICAgICAgICByZW5kZXJXaXRob3V0SWZyYW1lXHJcbiAgICAgICAgICAgID8gSUZyYW1lVXRpbHMuZ2V0RGl2RWxlbWVudChcclxuICAgICAgICAgICAgICAgIGJvZHlIdG1sLFxyXG4gICAgICAgICAgICAgICAgaWZyYW1lSWQsXHJcbiAgICAgICAgICAgICAgICBwYXJlbnRFbGVtZW50ID09IG51bGwsXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICA6IElGcmFtZVV0aWxzLmdldElmcmFtZU9iamVjdChcclxuICAgICAgICAgICAgICAgIGJvZHlIdG1sLFxyXG4gICAgICAgICAgICAgICAgaWZyYW1lSWQsXHJcbiAgICAgICAgICAgICAgICBwYXJlbnRFbGVtZW50ID09IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdHlsZXMsXHJcbiAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgIHBhcmVudEVsZW1lbnQsXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBnZXRJZnJhbWVPYmplY3QoXHJcbiAgICBib2R5SHRtbDogc3RyaW5nLFxyXG4gICAgaWZyYW1lSWQ6IHN0cmluZyxcclxuICAgIGZpeGVkUG9zaXRpb246IGJvb2xlYW4sXHJcbiAgICBzdHlsZXM/OiBJU3R5bGVbXSxcclxuICApIHtcclxuICAgIGNvbnN0IGh0bWwgPSBgPGh0bWw+PGhlYWQ+PHN0eWxlPi5tc2Z0LWlmcmFtZS1ib2R5e2JhY2tncm91bmQtY29sb3I6IHJnYigyMDQgMjA0IDIwNCAvIDYwJSk7fTwvc3R5bGU+JHtJRnJhbWVVdGlscy5nZXRBbGxTdHlsZXNBc1RleHQoXHJcbiAgICAgIHN0eWxlcyxcclxuICAgICl9PC9oZWFkPjxib2R5IGNsYXNzPVwibXNmdC1pZnJhbWUtYm9keVwiPiR7Ym9keUh0bWx9PC9ib2R5PjwvaHRtbD5gO1xyXG4gICAgY29uc3QgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XHJcbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKFxyXG4gICAgICAnc3R5bGUnLFxyXG4gICAgICBgaGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtib3JkZXI6MDtwb3NpdGlvbjoke1xyXG4gICAgICAgIGZpeGVkUG9zaXRpb24gPyAnZml4ZWQnIDogJ3JlbGF0aXZlJ1xyXG4gICAgICB9O3RvcDowO2xlZnQ6MDt6LWluZGV4OjUwMDA7YCxcclxuICAgICk7XHJcbiAgICBpZnJhbWUuY2xhc3NOYW1lID0gJ21zZnQtbW9kZWwtY29udGFpbmVyJztcclxuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3NhbmRib3gnLCAnYWxsb3ctc2NyaXB0cyBhbGxvdy1mb3JtcycpO1xyXG4gICAgaWZyYW1lLmlkID0gaWZyYW1lSWQ7XHJcbiAgICBpZnJhbWUuc3JjZG9jID0gaHRtbDtcclxuICAgIHJldHVybiBpZnJhbWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBnZXREaXZFbGVtZW50KFxyXG4gICAgYm9keUh0bWw6IHN0cmluZyxcclxuICAgIGRpdklkOiBzdHJpbmcsXHJcbiAgICBmaXhlZFBvc2l0aW9uOiBib29sZWFuLFxyXG4gICkge1xyXG4gICAgY29uc3QgY3NzID1cclxuICAgICAgJy5tc2Z0LWlmcmFtZS1ib2R5e2JhY2tncm91bmQtY29sb3I6IHJnYigyMDQgMjA0IDIwNCAvIDYwJSk7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJX0nO1xyXG4gICAgY29uc3Qgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcclxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcclxuICAgIGNvbnN0IGNoaWxkRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQG1pY3Jvc29mdC9zZGwvbm8taW5uZXItaHRtbFxyXG4gICAgY2hpbGREaXYuaW5uZXJIVE1MID0gYm9keUh0bWw7XHJcbiAgICBjaGlsZERpdi5jbGFzc05hbWUgPSAnbXNmdC1pZnJhbWUtYm9keSc7XHJcbiAgICBjb25zdCBjb250YWluZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbnRhaW5lckRpdi5zZXRBdHRyaWJ1dGUoXHJcbiAgICAgICdzdHlsZScsXHJcbiAgICAgIGBoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO2JvcmRlcjowO3Bvc2l0aW9uOiR7XHJcbiAgICAgICAgZml4ZWRQb3NpdGlvbiA/ICdmaXhlZCcgOiAncmVsYXRpdmUnXHJcbiAgICAgIH07dG9wOjA7bGVmdDowO3otaW5kZXg6NTAwMDtgLFxyXG4gICAgKTtcclxuICAgIGNvbnRhaW5lckRpdi5jbGFzc05hbWUgPSAnbXNmdC1tb2RlbC1jb250YWluZXInO1xyXG4gICAgY29udGFpbmVyRGl2LmlkID0gZGl2SWQ7XHJcbiAgICBjb250YWluZXJEaXYuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxuICAgIGNvbnRhaW5lckRpdi5hcHBlbmRDaGlsZChjaGlsZERpdik7XHJcbiAgICBjb25zdCBzY3JpcHRzID0gY29udGFpbmVyRGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcclxuICAgIGNvbnN0IHNjcmlwdHNUb0JlQWRkZWQ6IEhUTUxTY3JpcHRFbGVtZW50W10gPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgaWYgKHNjcmlwdHNbaV0uc3JjKSB7XHJcbiAgICAgICAgc2NyaXB0LnNyYyA9IHNjcmlwdHNbaV0uc3JjO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGlubGluZVNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHNjcmlwdHNbaV0uaW5uZXJIVE1MKTtcclxuICAgICAgICBzY3JpcHQuYXBwZW5kQ2hpbGQoaW5saW5lU2NyaXB0KTtcclxuICAgICAgfVxyXG4gICAgICBzY3JpcHRzVG9CZUFkZGVkLnB1c2goc2NyaXB0KTtcclxuICAgIH1cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBzY3JpcHRzVG9CZUFkZGVkLmZvckVhY2goc2NyaXB0ID0+IHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkaXZJZCk/LmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gY29udGFpbmVyRGl2O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXBwZW5kIGlmcmFtZSBlbGVtZW50IHRvIGRvbVxyXG4gICAqXHJcbiAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgZWxlbWVudFxyXG4gICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fG51bGx9IHBhcmVudEVsZW1lbnQgcGFyZW50IGNvbnRhaW5lclxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RhdGljIGFwcGVuZEVsZW1lbnQoXHJcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcclxuICAgIHBhcmVudEVsZW1lbnQ/OiBIVE1MRWxlbWVudCB8IG51bGwsXHJcbiAgKSB7XHJcbiAgICAocGFyZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSAge0lTdHlsZVtdfSBzdHlsZXMgdXNlciBwcm92aWRlZCBzdHlsZXNcclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzdHlsZSB0ZXh0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0QWxsU3R5bGVzQXNUZXh0KHN0eWxlcz86IElTdHlsZVtdKTogc3RyaW5nIHtcclxuICAgIGxldCBzdHlsZVRleHQgPSAnJztcclxuICAgIGNvbnN0IHN0eWxlRWxlbWVudHMgPSBbXHJcbiAgICAgIC4uLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdHlsZScpLFxyXG4gICAgICAuLi5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGluaycpLFxyXG4gICAgXTtcclxuICAgIHN0eWxlRWxlbWVudHMuZm9yRWFjaChlbG0gPT4gKHN0eWxlVGV4dCArPSBlbG0ub3V0ZXJIVE1MKSk7XHJcblxyXG4gICAgc3R5bGVzPy5mb3JFYWNoKHN0eWxlID0+IHtcclxuICAgICAgaWYgKHN0eWxlLnR5cGUgPT0gU3R5bGVUeXBlLlRleHQpIHtcclxuICAgICAgICBjb25zdCBjc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xyXG4gICAgICAgIGNzcy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHlsZS52YWx1ZSkpO1xyXG4gICAgICAgIHN0eWxlVGV4dCArPSBjc3Mub3V0ZXJIVE1MO1xyXG4gICAgICB9IGVsc2UgaWYgKHN0eWxlLnR5cGUgPT0gU3R5bGVUeXBlLlVybCkge1xyXG4gICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XHJcbiAgICAgICAgbGluay5yZWwgPSAnc3R5bGVzaGVldCc7XHJcbiAgICAgICAgbGluay5ocmVmID0gc3R5bGUudmFsdWU7XHJcbiAgICAgICAgc3R5bGVUZXh0ICs9IGxpbmsub3V0ZXJIVE1MO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBzdHlsZVRleHQ7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJRnJhbWVVdGlscztcclxuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xyXG5jbGFzcyBQdWJsaWNBcGlIZWxwZXIge1xyXG4gIHN0YXRpYyBQdWJsaWNBcGlzOiBvYmplY3Q7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgQWRkUHVibGljQXBpcyhBcGlzOiBvYmplY3QpIHtcclxuICAgIHRoaXMuUHVibGljQXBpcyA9IEFwaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGV4cG9zZUFwaXMoKSB7XHJcbiAgICBjb25zdCBQdWJsaWNBcGlzOiBzdHJpbmdbXSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKFxyXG4gICAgICB3aW5kb3cuTVNGVENvbnNlbnQsXHJcbiAgICApLmZpbHRlcihlbGVtZW50ID0+IHtcclxuICAgICAgcmV0dXJuIHR5cGVvZiBlbGVtZW50ID09ICdmdW5jdGlvbic7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHRvQmVBZGRlZEFwaXM6IHN0cmluZ1tdID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5QdWJsaWNBcGlzKTtcclxuICAgIFB1YmxpY0FwaXMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgaWYgKHRvQmVBZGRlZEFwaXMuaW5jbHVkZXMoZWxlbWVudCkpXHJcbiAgICAgICAgTG9nZ2VyLndhcm4oXHJcbiAgICAgICAgICBgQWxyZWFkeSBleGlzdGluZyBQdWJsaWMgQXBpIHdpdGggdGhlIHNhbWUgbmFtZSAnJHtlbGVtZW50fSdgLFxyXG4gICAgICAgICk7XHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxyXG4gICAgICB3aW5kb3cuTVNGVENvbnNlbnQsXHJcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHRoaXMuUHVibGljQXBpcyksXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCBQdWJsaWNBcGlIZWxwZXI7XHJcbiIsImV4cG9ydCBjb25zdCBDb25zdGFudHMgPSB7XHJcbiAgT0ZGOiAnMCcsXHJcbiAgT046ICcxJyxcclxuICBDT09LSUVfTkFNRTogJ0FQQ0MnLFxyXG4gIENvbnNlbnRDb25maWc6ICdNaWNyb3NvZnRDb25zZW50Q29uZmlnJyxcclxufTtcclxuIiwiaW50ZXJmYWNlIElBZGphY2VuY3lMaXN0IHtcclxuICBbbm9kZTogc3RyaW5nXTogc3RyaW5nW107XHJcbn1cclxuXHJcbmludGVyZmFjZSBJVmlzaXRlZE5vZGVzIHtcclxuICBbbm9kZTogc3RyaW5nXTogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgSURpcmVjdGVkRWRnZXMgPSBbc3RyaW5nLCBzdHJpbmdbXV1bXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyYXBoVXRpbHMge1xyXG4gIHB1YmxpYyBzdGF0aWMgdG9wb2xvZ2ljYWxTb3J0KGRpcmVjdGVkRWRnZXM6IElEaXJlY3RlZEVkZ2VzKTogc3RyaW5nW10ge1xyXG4gICAgY29uc3QgYWRqYWNlbmN5TGlzdCA9IHRoaXMuZ2V0QWRqYWNlbmN5TGlzdChkaXJlY3RlZEVkZ2VzKTtcclxuICAgIGNvbnN0IHNvcnRlZE5vZGVzTWFwID0ge307XHJcblxyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGFkamFjZW5jeUxpc3QpLnJlZHVjZShcclxuICAgICAgKHNvcnRlZE5vZGVzLCBjdXJyZW50Tm9kZSkgPT5cclxuICAgICAgICBzb3J0ZWROb2Rlcy5jb25jYXQoXHJcbiAgICAgICAgICB0aGlzLmRmcyhjdXJyZW50Tm9kZSwgYWRqYWNlbmN5TGlzdCwgc29ydGVkTm9kZXNNYXApLFxyXG4gICAgICAgICksXHJcbiAgICAgIFtdIGFzIHN0cmluZ1tdLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGRmcyhcclxuICAgIGN1cnJlbnROb2RlOiBzdHJpbmcsXHJcbiAgICBhZGphY2VuY3lMaXN0OiBJQWRqYWNlbmN5TGlzdCxcclxuICAgIHNvcnRlZE5vZGVzTWFwOiBJVmlzaXRlZE5vZGVzLFxyXG4gICAgdmlzaXRlZE5vZGVzOiBJVmlzaXRlZE5vZGVzID0ge30sXHJcbiAgKTogc3RyaW5nW10ge1xyXG4gICAgaWYgKHZpc2l0ZWROb2Rlc1tjdXJyZW50Tm9kZV0pIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDaXJjdWxhciBkZXBlbmRlbmN5IGZvdW5kIScpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghc29ydGVkTm9kZXNNYXBbY3VycmVudE5vZGVdKSB7XHJcbiAgICAgIHZpc2l0ZWROb2Rlc1tjdXJyZW50Tm9kZV0gPSB0cnVlO1xyXG5cclxuICAgICAgY29uc3Qgc29ydGVkTm9kZXMgPVxyXG4gICAgICAgIGFkamFjZW5jeUxpc3RbY3VycmVudE5vZGVdPy5yZWR1Y2UoXHJcbiAgICAgICAgICAocGFydGlhbGx5U29ydGVkTm9kZXMsIGRlcGVuZGVudE5vZGUpID0+XHJcbiAgICAgICAgICAgIHBhcnRpYWxseVNvcnRlZE5vZGVzLmNvbmNhdChcclxuICAgICAgICAgICAgICB0aGlzLmRmcyhcclxuICAgICAgICAgICAgICAgIGRlcGVuZGVudE5vZGUsXHJcbiAgICAgICAgICAgICAgICBhZGphY2VuY3lMaXN0LFxyXG4gICAgICAgICAgICAgICAgc29ydGVkTm9kZXNNYXAsXHJcbiAgICAgICAgICAgICAgICB2aXNpdGVkTm9kZXMsXHJcbiAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgIFtdIGFzIHN0cmluZ1tdLFxyXG4gICAgICAgICkgfHwgW107XHJcblxyXG4gICAgICBzb3J0ZWROb2Rlc01hcFtjdXJyZW50Tm9kZV0gPSB0cnVlO1xyXG4gICAgICB2aXNpdGVkTm9kZXNbY3VycmVudE5vZGVdID0gZmFsc2U7XHJcblxyXG4gICAgICByZXR1cm4gc29ydGVkTm9kZXMuY29uY2F0KGN1cnJlbnROb2RlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBnZXRBZGphY2VuY3lMaXN0KFxyXG4gICAgZGlyZWN0ZWRFZGdlczogSURpcmVjdGVkRWRnZXMsXHJcbiAgKTogSUFkamFjZW5jeUxpc3Qge1xyXG4gICAgY29uc3QgYWRqYWNlbmN5TGlzdCA9IHt9IGFzIElBZGphY2VuY3lMaXN0O1xyXG4gICAgZGlyZWN0ZWRFZGdlcy5mb3JFYWNoKChbbm9kZUEsIGRlcGVuZGVuY3lOb2Rlc10pID0+IHtcclxuICAgICAgYWRqYWNlbmN5TGlzdFtub2RlQV0gPSBhZGphY2VuY3lMaXN0W25vZGVBXSB8fCBbXTtcclxuICAgICAgYWRqYWNlbmN5TGlzdFtub2RlQV0ucHVzaCguLi5kZXBlbmRlbmN5Tm9kZXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGFkamFjZW5jeUxpc3Q7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnY29yZS9sb2dnZXInO1xyXG5cclxuZXhwb3J0IGNvbnN0IENvbmZpZ0NhbGxiYWNrczogeyBba2V5OiBzdHJpbmddOiAoLi4uYXJnczogYW55KSA9PiB2b2lkIH0gPSB7XHJcbiAgVHJhbnNsYXRpb246IChub3RpY2VOYW1lOiBzdHJpbmcsIHRyYW5zbGF0aW9uOiBJVHJhbnNsYXRpb24pID0+IHtcclxuICAgIExvZ2dlci5pbmZvKCdmZXRjaCB0cmFuc2xhdGlvbiBjYWxsYmFjayBpbnZva2VkJywge1xyXG4gICAgICBub3RpY2VOYW1lLFxyXG4gICAgICB0cmFuc2xhdGlvbixcclxuICAgIH0pO1xyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuU3RvcmUucmVkdWNlcnMuc2V0VHJhbnNsYXRpb25zKFtcclxuICAgICAgLi4uKHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMudHJhbnNsYXRpb25zIHx8IFtdKSxcclxuICAgICAgeyBbbm90aWNlTmFtZV06IHRyYW5zbGF0aW9uLnRyYW5zbGF0aW9ucyB9LFxyXG4gICAgXSk7XHJcbiAgfSxcclxuICBNb2RlbDogdmFsID0+IHtcclxuICAgIExvZ2dlci5pbmZvKCdmZXRjaCBtb2RlbCBjYWxsYmFjayBpbnZva2VkJywgeyB2YWwgfSk7XHJcbiAgICB3aW5kb3cuX19NU0ZUX1NESy5TdG9yZS5yZWR1Y2Vycy5zZXRDdXJyZW50TW9kZWwodmFsKTtcclxuICB9LFxyXG4gIFRlbXBsYXRlOiB2YWwgPT4ge1xyXG4gICAgTG9nZ2VyLmluZm8oJ2ZldGNoIHRlbXBsYXRlIGNhbGxiYWNrIGludm9rZWQnLCB7IHZhbCB9KTtcclxuICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLnJlZHVjZXJzLnNldFRlbXBsYXRlKHZhbCk7XHJcbiAgfSxcclxuICBRdWVzdGlvbjogdmFsID0+IHtcclxuICAgIExvZ2dlci5pbmZvKCdmZXRjaCBxdWVzdGlvbnMgY2FsbGJhY2sgaW52b2tlZCcsIHsgdmFsIH0pO1xyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuU3RvcmUucmVkdWNlcnMuc2V0UXVlc3Rpb25zKFtcclxuICAgICAgLi4ud2luZG93Ll9fTVNGVF9TREsuU3RvcmUuZ2V0dGVycy5xdWVzdGlvbnMsXHJcbiAgICAgIHZhbCxcclxuICAgIF0pO1xyXG4gIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IE1vZGVsS2luZCB9IGZyb20gJ2NvcmUvY29uc3RhbnRzL2VudW1zJztcclxuaW1wb3J0IFN0b3JlIGZyb20gJ2NvcmUvc3RvcmUnO1xyXG5pbXBvcnQgeyBNb2R1bGVTb3VyY2VUeXBlLCBTREtNb2R1bGVzLCBTREtNb2R1bGVzUGF0aCB9IGZyb20gJy4uL2VudW0vbW9kdWxlcyc7XHJcbmltcG9ydCB7IElTZGtEZXBlbmRlbmN5IH0gZnJvbSAnLi4vdHlwZXMvSVNka0RlcGVuZGVuY3knO1xyXG5pbXBvcnQgeyBDb25maWdDYWxsYmFja3MgfSBmcm9tICcuL2NhbGxiYWNrcyc7XHJcblxyXG4vLyBUT0RPOiBBZGQgcmVhbCBzdG9yZSBnZXR0ZXJzIGFuZCBwYXRoIG5hbWVzXHJcbmNvbnN0IFNES0RlcGVuZGVuY3k6IElTZGtEZXBlbmRlbmN5ID0ge1xyXG4gIGdldERlcGVuZGVuY2llczogKCkgPT4gKHtcclxuICAgIGZpZWxkczoge1xyXG4gICAgICBjb25maWdJZDogd2luZG93Ll9fTVNGVF9TREsuY29uZmlnPy5pZCxcclxuICAgICAgcGFja2FnZU5hbWU6IHdpbmRvdy5fX01TRlRfU0RLLmNvbmZpZz8ubmFtZSxcclxuICAgICAgbW9kZWw6IFN0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWw/Lm5hbWUgfHwgJycsXHJcbiAgICAgIGxjaWQ6IFN0b3JlLmdldHRlcnMubGNpZCxcclxuICAgICAgc2RrUm9vdFBhdGg6XHJcbiAgICAgICAgU3RvcmUuZ2V0dGVycy5jb25maWcuaW5pdENvbmZpZz8uYXNzZXRQYXRoIHx8XHJcbiAgICAgICAgU3RvcmUuZ2V0dGVycy5zZWxlY3RlZENvcmVNb2RlbD8uYXNzZXRzUGF0aCB8fFxyXG4gICAgICAgICcnLFxyXG4gICAgICBqc1Jvb3RQYXRoOlxyXG4gICAgICAgIFN0b3JlLmdldHRlcnMuY29uZmlnLmluaXRDb25maWc/LmpzUGF0aCB8fFxyXG4gICAgICAgIFN0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWw/LmFzc2V0c1BhdGggfHxcclxuICAgICAgICAnJyxcclxuICAgICAgbW9kZWxWZXJzaW9uOiBTdG9yZS5nZXR0ZXJzLnNlbGVjdGVkQ29yZU1vZGVsPy52ZXJzaW9uLnRvU3RyaW5nKCkgfHwgJzAnLFxyXG4gICAgICBwYWNrYWdlVmVyc2lvbjogJ2xhdGVzdCcsXHJcbiAgICB9LFxyXG4gICAgbW9kdWxlczogW1xyXG4gICAgICB7XHJcbiAgICAgICAgbW9kdWxlOiBTREtNb2R1bGVzLkNPTkZJRyxcclxuICAgICAgICBzb3VyY2U6IHtcclxuICAgICAgICAgIHR5cGU6IE1vZHVsZVNvdXJjZVR5cGUuVkFSSUFCTEUsXHJcbiAgICAgICAgICB2YWx1ZTogJ2NvbmZpZy5qcycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZXBlbmRlbmN5OiBbXSxcclxuICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuRXZlbnRCdXMudHJpZ2dlcihcclxuICAgICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuZW51bXMuRXZlbnRzLkNvbmZpZ1JlYWR5LFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT5cclxuICAgICAgICAgICEoU3RvcmUuZ2V0dGVycy5pc1ByZXZpZXdNb2RlIHx8IFN0b3JlLmdldHRlcnMuaXNMaXZlUHJldmlld01vZGUpLFxyXG4gICAgICAgIGNvbmZpZ3M6IFtcclxuICAgICAgICAgIC4uLihTdG9yZS5nZXR0ZXJzLnNlbGVjdGVkQ29yZU1vZGVsPy5raW5kID09PVxyXG4gICAgICAgICAgTW9kZWxLaW5kLldlYkNvbnNlbnRNb2RlbFxyXG4gICAgICAgICAgICA/IChcclxuICAgICAgICAgICAgICAgIFN0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWwgYXMgSUNvcmVDb25zZW50TW9kZWxcclxuICAgICAgICAgICAgICApPy50cmFja2VyQ2F0ZWdvcmllcy5tYXAoY2F0ZWdvcnkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHNvdXJjZToge1xyXG4gICAgICAgICAgICAgICAgICB0eXBlOiBNb2R1bGVTb3VyY2VUeXBlLlBBVEgsXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBgJHNka1Jvb3RQYXRoL21zZnQtcHJpdmFjeS9wYWNrYWdlcy8kcGFja2FnZU5hbWUvJHBhY2thZ2VWZXJzaW9uL21vZGVscy8kbW9kZWwvdHJhbnNsYXRpb25zLyR7Y2F0ZWdvcnkuY2F0ZWdvcnlOYW1lfS8ke2NhdGVnb3J5LnZlcnNpb259LyRsY2lkLmpzb25gLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAodmFsOiBhbnkpID0+XHJcbiAgICAgICAgICAgICAgICAgIENvbmZpZ0NhbGxiYWNrcy5UcmFuc2xhdGlvbihjYXRlZ29yeS5jYXRlZ29yeU5hbWUsIHZhbCksXHJcbiAgICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgIDogW10pLFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBzb3VyY2U6IHtcclxuICAgICAgICAgICAgICB0eXBlOiBNb2R1bGVTb3VyY2VUeXBlLlBBVEgsXHJcbiAgICAgICAgICAgICAgdmFsdWU6IGAkc2RrUm9vdFBhdGgvbXNmdC1wcml2YWN5L3BhY2thZ2VzLyRwYWNrYWdlTmFtZS8kcGFja2FnZVZlcnNpb24vbW9kZWxzLyRtb2RlbC90cmFuc2xhdGlvbnMvJG1vZGVsLyRtb2RlbFZlcnNpb24vJGxjaWQuanNvbmAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAodmFsOiBhbnkpID0+XHJcbiAgICAgICAgICAgICAgQ29uZmlnQ2FsbGJhY2tzLlRyYW5zbGF0aW9uKFxyXG4gICAgICAgICAgICAgICAgKFN0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWwgYXMgSUNvcmVDb25zZW50TW9kZWwpPy5uYW1lIHx8XHJcbiAgICAgICAgICAgICAgICAgICcnLFxyXG4gICAgICAgICAgICAgICAgdmFsLFxyXG4gICAgICAgICAgICAgICksXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBzb3VyY2U6IHtcclxuICAgICAgICAgICAgICB0eXBlOiBNb2R1bGVTb3VyY2VUeXBlLlBBVEgsXHJcbiAgICAgICAgICAgICAgdmFsdWU6IGAkc2RrUm9vdFBhdGgvbXNmdC1wcml2YWN5L3BhY2thZ2VzLyRwYWNrYWdlTmFtZS8kcGFja2FnZVZlcnNpb24vbW9kZWxzLyRtb2RlbC9tb2RlbC5qc29uYCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IENvbmZpZ0NhbGxiYWNrcy5Nb2RlbCxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHNvdXJjZToge1xyXG4gICAgICAgICAgICAgIHR5cGU6IE1vZHVsZVNvdXJjZVR5cGUuUEFUSCxcclxuICAgICAgICAgICAgICB2YWx1ZTogYCRzZGtSb290UGF0aC9tc2Z0LXByaXZhY3kvcGFja2FnZXMvJHBhY2thZ2VOYW1lLyRwYWNrYWdlVmVyc2lvbi9tb2RlbHMvJG1vZGVsL3RlbXBsYXRlcy8ke1N0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWw/LmxheW91dHNbMF0ubmFtZX0vdGVtcGxhdGUuanNvbmAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBDb25maWdDYWxsYmFja3MuVGVtcGxhdGUsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgLi4uKFN0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWw/LmtpbmQgPT09IE1vZGVsS2luZC5RdWVzdGlvbk1vZGVsXHJcbiAgICAgICAgICAgID8gW1xyXG4gICAgICAgICAgICAgICAgLi4uKFxyXG4gICAgICAgICAgICAgICAgICBTdG9yZS5nZXR0ZXJzLnNlbGVjdGVkQ29yZU1vZGVsIGFzIElDb3JlUXVlc3Rpb25Nb2RlbFxyXG4gICAgICAgICAgICAgICAgKT8ucXVlc3Rpb25zLm1hcChxdWVzdGlvbiA9PiAoe1xyXG4gICAgICAgICAgICAgICAgICBzb3VyY2U6IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBNb2R1bGVTb3VyY2VUeXBlLlBBVEgsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGAkc2RrUm9vdFBhdGgvbXNmdC1wcml2YWN5L3BhY2thZ2VzLyRwYWNrYWdlTmFtZS8kcGFja2FnZVZlcnNpb24vbW9kZWxzLyRtb2RlbC90cmFuc2xhdGlvbnMvJHtxdWVzdGlvbn0vMS8kbGNpZC5qc29uYCxcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6ICh2YWw6IGFueSkgPT5cclxuICAgICAgICAgICAgICAgICAgICBDb25maWdDYWxsYmFja3MuVHJhbnNsYXRpb24ocXVlc3Rpb24sIHZhbCksXHJcbiAgICAgICAgICAgICAgICB9KSksXHJcbiAgICAgICAgICAgICAgICAuLi4oXHJcbiAgICAgICAgICAgICAgICAgIFN0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWwgYXMgSUNvcmVRdWVzdGlvbk1vZGVsXHJcbiAgICAgICAgICAgICAgICApPy5xdWVzdGlvbnMubWFwKHF1ZXN0aW9uID0+ICh7XHJcbiAgICAgICAgICAgICAgICAgIHNvdXJjZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IE1vZHVsZVNvdXJjZVR5cGUuUEFUSCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYCRzZGtSb290UGF0aC9tc2Z0LXByaXZhY3kvcGFja2FnZXMvJHBhY2thZ2VOYW1lLyRwYWNrYWdlVmVyc2lvbi9tb2RlbHMvJG1vZGVsL3F1ZXN0aW9ucy8ke3F1ZXN0aW9ufS8xL3F1ZXN0aW9uLmpzb25gLFxyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICBjYWxsYmFjazogKHZhbDogYW55KSA9PiBDb25maWdDYWxsYmFja3MuUXVlc3Rpb24odmFsKSxcclxuICAgICAgICAgICAgICAgIH0pKSxcclxuICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIDogW10pLFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBtb2R1bGU6IFNES01vZHVsZXMuUFJFU0VOVEFUSU9OLFxyXG4gICAgICAgIHNvdXJjZTogU3RvcmUuZ2V0dGVycy5pc1ByZXZpZXdNb2RlXHJcbiAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICB0eXBlOiBNb2R1bGVTb3VyY2VUeXBlLlZBUklBQkxFLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiBTdG9yZS5nZXR0ZXJzLnByZXNlbnRhdGlvblZhcmlhYmxlLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICA6IHtcclxuICAgICAgICAgICAgICB0eXBlOiBNb2R1bGVTb3VyY2VUeXBlLlBBVEgsXHJcbiAgICAgICAgICAgICAgdmFsdWU6IFNES01vZHVsZXNQYXRoLlBSRVNFTlRBVElPTixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBjb25kaXRpb246ICgpID0+ICFTdG9yZS5nZXR0ZXJzLmlzSGVhZGxlc3MsXHJcbiAgICAgICAgZGVwZW5kZW5jeTogW1xyXG4gICAgICAgICAgU0RLTW9kdWxlcy5IQU5ETEVCQVIsXHJcbiAgICAgICAgICBTREtNb2R1bGVzLkNPTkZJRyxcclxuICAgICAgICAgIFNES01vZHVsZXMuUFJPWFksXHJcbiAgICAgICAgICAuLi4oU3RvcmUuZ2V0dGVycy5zZWxlY3RlZENvcmVNb2RlbD8ua2luZCA9PT0gTW9kZWxLaW5kLlF1ZXN0aW9uTW9kZWxcclxuICAgICAgICAgICAgPyBbU0RLTW9kdWxlcy5EU1JdXHJcbiAgICAgICAgICAgIDogW10pLFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBtb2R1bGU6IFNES01vZHVsZXMuSEFORExFQkFSLFxyXG4gICAgICAgIHNvdXJjZTogU3RvcmUuZ2V0dGVycy5pc1ByZXZpZXdNb2RlXHJcbiAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICB0eXBlOiBNb2R1bGVTb3VyY2VUeXBlLlZBUklBQkxFLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiBTdG9yZS5nZXR0ZXJzLmhhbmRsZWJhclZhcmlhYmxlLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICA6IHtcclxuICAgICAgICAgICAgICB0eXBlOiBNb2R1bGVTb3VyY2VUeXBlLlBBVEgsXHJcbiAgICAgICAgICAgICAgdmFsdWU6IFNES01vZHVsZXNQYXRoLkhBTkRMRUJBUixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBjb25kaXRpb246ICgpID0+ICFTdG9yZS5nZXR0ZXJzLmlzSGVhZGxlc3MsXHJcbiAgICAgICAgZGVwZW5kZW5jeTogW10sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBtb2R1bGU6IFNES01vZHVsZXMuUFJFVklFVyxcclxuICAgICAgICBzb3VyY2U6IHtcclxuICAgICAgICAgIHR5cGU6IE1vZHVsZVNvdXJjZVR5cGUuUEFUSCxcclxuICAgICAgICAgIHZhbHVlOiBTREtNb2R1bGVzUGF0aC5QUkVWSUVXLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBTdG9yZS5nZXR0ZXJzLmlzTGl2ZVByZXZpZXdNb2RlLFxyXG4gICAgICAgIGRlcGVuZGVuY3k6IFtdLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbW9kdWxlOiBTREtNb2R1bGVzLlBST1hZLFxyXG4gICAgICAgIHNvdXJjZTogU3RvcmUuZ2V0dGVycy5pc1ByZXZpZXdNb2RlXHJcbiAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICB0eXBlOiBNb2R1bGVTb3VyY2VUeXBlLlZBUklBQkxFLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiBTdG9yZS5nZXR0ZXJzLnByb3h5VmFyaWFibGUsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIDoge1xyXG4gICAgICAgICAgICAgIHR5cGU6IE1vZHVsZVNvdXJjZVR5cGUuUEFUSCxcclxuICAgICAgICAgICAgICB2YWx1ZTogU0RLTW9kdWxlc1BhdGguUFJPWFksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgY2FsbGJhY2s6IChqczogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICB3aW5kb3cuX19NU0ZUX1NESy5TdG9yZS5yZWR1Y2Vycy5zZXRQcm94eUpTKGpzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlcGVuZGVuY3k6IFtdLFxyXG4gICAgICB9LFxyXG4gICAgICAuLi4oU3RvcmUuZ2V0dGVycy5zZWxlY3RlZENvcmVNb2RlbD8ua2luZCA9PT0gTW9kZWxLaW5kLlF1ZXN0aW9uTW9kZWxcclxuICAgICAgICA/IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIG1vZHVsZTogU0RLTW9kdWxlcy5EU1IsXHJcbiAgICAgICAgICAgICAgc291cmNlOiBTdG9yZS5nZXR0ZXJzLmlzUHJldmlld01vZGVcclxuICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IE1vZHVsZVNvdXJjZVR5cGUuVkFSSUFCTEUsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFN0b3JlLmdldHRlcnMuZHNyVmFyaWFibGUsXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IE1vZHVsZVNvdXJjZVR5cGUuUEFUSCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogU0RLTW9kdWxlc1BhdGguRFNSLFxyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGRlcGVuZGVuY3k6IFtdLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIDogW10pLFxyXG4gICAgXSxcclxuICB9KSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNES0RlcGVuZGVuY3k7XHJcbiIsImV4cG9ydCBpbnRlcmZhY2UgSURlZmVycmVkPFQ+IHtcclxuICBwcm9taXNlOiBQcm9taXNlPFQ+O1xyXG4gIHJlc29sdmU6ICh2YWx1ZTogVCB8IFByb21pc2VMaWtlPFQ+KSA9PiB2b2lkO1xyXG4gIHJlamVjdDogKHJlYXNvbj86IGFueSkgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXN5bmNVdGlscyB7XHJcbiAgcHVibGljIHN0YXRpYyBkZWZlcnJlZDxUPigpOiBJRGVmZXJyZWQ8VD4ge1xyXG4gICAgY29uc3QgZGVmZXIgPSB7fSBhcyBJRGVmZXJyZWQ8VD47XHJcbiAgICBkZWZlci5wcm9taXNlID0gbmV3IFByb21pc2U8VD4oKHJlcywgcmVqKSA9PiB7XHJcbiAgICAgIGRlZmVyLnJlc29sdmUgPSByZXM7XHJcbiAgICAgIGRlZmVyLnJlamVjdCA9IHJlajtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBkZWZlcjtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEFzeW5jVXRpbHMgZnJvbSAnLi9Bc3luY1V0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvbVV0aWxzIHtcclxuICBwdWJsaWMgc3RhdGljIGFkZFNjcmlwdFRvRE9NKHZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IGRlZmVyID0gQXN5bmNVdGlscy5kZWZlcnJlZDx2b2lkPigpO1xyXG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgc2NyaXB0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHZhbHVlKSk7XHJcbiAgICBzY3JpcHQub25sb2FkID0gKCkgPT4gZGVmZXIucmVzb2x2ZSgpO1xyXG4gICAgc2NyaXB0Lm9uZXJyb3IgPSAoKSA9PiBkZWZlci5yZWplY3QoKTtcclxuICAgIGlmIChkb2N1bWVudC5ib2R5KSB7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRlZmVyLnByb21pc2U7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFB1YmxpY0V2ZW50cyB9IGZyb20gJ2NvcmUvY29uc3RhbnRzL2VudW1zJztcclxuaW1wb3J0IEFzeW5jVXRpbHMgZnJvbSAnLi9Bc3luY1V0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50VXRpbHMge1xyXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgZmV0Y2gocGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IHsgcHJvbWlzZSwgcmVzb2x2ZSB9ID0gQXN5bmNVdGlscy5kZWZlcnJlZDxzdHJpbmc+KCk7XHJcbiAgICB3aW5kb3cuX19NU0ZUX1NESy5FdmVudEJ1cy50cmlnZ2VyKFB1YmxpY0V2ZW50cy5GZXRjaENvbmZpZywge1xyXG4gICAgICBwYXRoLFxyXG4gICAgICBjYWxsYmFjazogKHJlc3BvbnNlOiB7IGRhdGE6IHN0cmluZyB9KSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHByb21pc2U7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnY29yZS9sb2dnZXInO1xyXG5pbXBvcnQgQXN5bmNVdGlscyBmcm9tICcuL0FzeW5jVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSFRUUFV0aWxzIHtcclxuICBwcml2YXRlIHN0YXRpYyBNQVhfUkVUUllfQ09VTlQgPSAzO1xyXG4gIHByaXZhdGUgc3RhdGljIEVYUE9ORU5USUFMX0RFTEFZX0ZBQ1RPUl9JTl9NUyA9IDI1MDtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBhc3luYyBmZXRjaCh1cmw6IHN0cmluZyk6IFByb21pc2U8UmVzcG9uc2UgfCB2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gdGhpcy5leHBvbmVudGlhbFJldHJ5KCgpID0+XHJcbiAgICAgICAgZmV0Y2godXJsKS50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICBpZiAoIXJlcy5vaykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfSksXHJcbiAgICAgICk7XHJcbiAgICB9IGNhdGNoIChfZXJyKSB7XHJcbiAgICAgIExvZ2dlci5lcnJvcihgVW5hYmxlIHRvIGZldGNoIGFzc2V0ICcke3VybH0nYCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBleHBvbmVudGlhbFJldHJ5KFxyXG4gICAgY2FsbGJhY2s6ICgpID0+IFByb21pc2U8YW55PixcclxuICAgIGN1cnJlbnRSZXRyeUNvdW50ID0gMCxcclxuICApIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCBjYWxsYmFjaygpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnN0IHJldHJ5Q291bnQgPSBjdXJyZW50UmV0cnlDb3VudCArIDE7XHJcbiAgICAgIGlmIChyZXRyeUNvdW50IDwgdGhpcy5NQVhfUkVUUllfQ09VTlQpIHtcclxuICAgICAgICBjb25zdCBkZWZlciA9IEFzeW5jVXRpbHMuZGVmZXJyZWQ8dm9pZD4oKTtcclxuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmV4cG9uZW50aWFsUmV0cnkoY2FsbGJhY2ssIHJldHJ5Q291bnQpXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IGRlZmVyLnJlc29sdmUoKSlcclxuICAgICAgICAgICAgLmNhdGNoKCgpID0+IGRlZmVyLnJlamVjdCgpKTtcclxuICAgICAgICB9LCB0aGlzLkVYUE9ORU5USUFMX0RFTEFZX0ZBQ1RPUl9JTl9NUyAqIHJldHJ5Q291bnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhyb3cgZXJyO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgRXZlbnRVdGlscyBmcm9tICdjb3JlL3V0aWxzL0V2ZW50VXRpbHMnO1xyXG5pbXBvcnQgSFRUUFV0aWxzIGZyb20gJ2NvcmUvdXRpbHMvSHR0cFV0aWxzJztcclxuaW1wb3J0IHsgTW9kdWxlU291cmNlIH0gZnJvbSAnLi4vdHlwZXMvSVNka0RlcGVuZGVuY3knO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQmFzZU1vZHVsZSB7XHJcbiAgcHJvdGVjdGVkIHZhbHVlOiBhbnk7XHJcbiAgcHJvdGVjdGVkIHNvdXJjZTogTW9kdWxlU291cmNlO1xyXG4gIHByb3RlY3RlZCBjYWxsYmFjaz86ICh2YWx1ZTogYW55KSA9PiB2b2lkO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IE1vZHVsZVNvdXJjZSwgY2FsbGJhY2s/OiAodmFsdWU6IGFueSkgPT4gdm9pZCkge1xyXG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICB0aGlzLnZhbHVlID0gJyc7XHJcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGFzeW5jIGZldGNoV3JhcHBlcihcclxuICAgIHBhdGg6IHN0cmluZyxcclxuICAgIGZldGNoVXNpbmdFdmVudD86IGJvb2xlYW4sXHJcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIGlmIChmZXRjaFVzaW5nRXZlbnQpIHtcclxuICAgICAgcmV0dXJuIGF3YWl0IEV2ZW50VXRpbHMuZmV0Y2gocGF0aCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IEhUVFBVdGlscy5mZXRjaChwYXRoKTtcclxuICAgIHJldHVybiAoYXdhaXQgdmFsdWU/LnRleHQoKSkgPz8gJyc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWJzdHJhY3QgZmV0Y2goKTogUHJvbWlzZTx2b2lkPjtcclxuXHJcbiAgcHVibGljIGFic3RyYWN0IGV4ZWN1dGUoKTogUHJvbWlzZTx2b2lkPjtcclxufVxyXG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gJ2NvcmUvbG9nZ2VyJztcclxuaW1wb3J0IERvbVV0aWxzIGZyb20gJ2NvcmUvdXRpbHMvRG9tVXRpbHMnO1xyXG5pbXBvcnQgeyBNb2R1bGVTb3VyY2VUeXBlIH0gZnJvbSAnLi4vZW51bS9tb2R1bGVzJztcclxuaW1wb3J0IHsgTW9kdWxlU291cmNlIH0gZnJvbSAnLi4vdHlwZXMvSVNka0RlcGVuZGVuY3knO1xyXG5pbXBvcnQgQmFzZU1vZHVsZSBmcm9tICcuL0Jhc2VNb2R1bGUnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSmF2YXNjcmlwdE1vZHVsZSBleHRlbmRzIEJhc2VNb2R1bGUge1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogTW9kdWxlU291cmNlLCBjYWxsYmFjaz86ICh2YWw6IGFueSkgPT4gdm9pZCkge1xyXG4gICAgc3VwZXIoc291cmNlLCBjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZmV0Y2goKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBMb2dnZXIuaW5mbygnRmV0Y2hpbmcganMgbW9kdWxlJywgdGhpcy5zb3VyY2UpO1xyXG4gICAgaWYgKHRoaXMuc291cmNlLnR5cGUgPT09IE1vZHVsZVNvdXJjZVR5cGUuVkFSSUFCTEUpIHtcclxuICAgICAgdGhpcy52YWx1ZSA9IHdpbmRvd1t0aGlzLnNvdXJjZS52YWx1ZSBhcyBhbnldO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy52YWx1ZSA9IGF3YWl0IEphdmFzY3JpcHRNb2R1bGUuZmV0Y2hXcmFwcGVyKFxyXG4gICAgICAgIHRoaXMuc291cmNlLnZhbHVlLFxyXG4gICAgICAgIHRoaXMuc291cmNlLmZldGNoVXNpbmdFdmVudCxcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRUb0RPTSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybiBEb21VdGlscy5hZGRTY3JpcHRUb0RPTSh0aGlzLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBleGVjdXRlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgaWYgKHRoaXMuY2FsbGJhY2spIHtcclxuICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLnZhbHVlKTtcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYWRkVG9ET00oKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IExvZ2dlciBmcm9tICdjb3JlL2xvZ2dlcic7XHJcbmltcG9ydCB7IE1vZHVsZVNvdXJjZVR5cGUgfSBmcm9tICcuLi9lbnVtL21vZHVsZXMnO1xyXG5pbXBvcnQgeyBNb2R1bGVTb3VyY2UgfSBmcm9tICcuLi90eXBlcy9JU2RrRGVwZW5kZW5jeSc7XHJcbmltcG9ydCBCYXNlTW9kdWxlIGZyb20gJy4vQmFzZU1vZHVsZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKU09OTW9kdWxlIGV4dGVuZHMgQmFzZU1vZHVsZSB7XHJcbiAgY29uc3RydWN0b3Ioc291cmNlOiBNb2R1bGVTb3VyY2UsIGNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZCkge1xyXG4gICAgc3VwZXIoc291cmNlLCBjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZmV0Y2goKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBMb2dnZXIuaW5mbygnRmV0Y2hpbmcganNvbiBtb2R1bGUnLCB0aGlzLnNvdXJjZSk7XHJcbiAgICBpZiAodGhpcy5zb3VyY2UudHlwZSA9PT0gTW9kdWxlU291cmNlVHlwZS5WQVJJQUJMRSkge1xyXG4gICAgICB0aGlzLnZhbHVlID0gd2luZG93W3RoaXMuc291cmNlLnZhbHVlIGFzIGFueV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBKU09OLnBhcnNlKFxyXG4gICAgICAgICAgYXdhaXQgSlNPTk1vZHVsZS5mZXRjaFdyYXBwZXIoXHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlLnZhbHVlLFxyXG4gICAgICAgICAgICB0aGlzLnNvdXJjZS5mZXRjaFVzaW5nRXZlbnQsXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBMb2dnZXIuZXJyb3IoYEVycm9yIGluIGZldGNoaW5nIDogJHt0aGlzLnNvdXJjZT8udmFsdWV9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBleGVjdXRlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgaWYgKHRoaXMuY2FsbGJhY2sgJiYgdGhpcy52YWx1ZSkge1xyXG4gICAgICB0aGlzLmNhbGxiYWNrKHRoaXMudmFsdWUpO1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdDYWxsYmFjayBub3QgcHJvdmlkZWQnKSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnY29yZS9sb2dnZXInO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICdjb3JlL3V0aWxzL0dyYXBoVXRpbHMnO1xyXG5pbXBvcnQgU0RLRGVwZW5kZW5jeSBmcm9tICcuL2NvbmZpZy9zZGtEZXBlbmRlbmN5JztcclxuaW1wb3J0IHsgTW9kdWxlU291cmNlVHlwZSB9IGZyb20gJy4vZW51bS9tb2R1bGVzJztcclxuaW1wb3J0IEJhc2VNb2R1bGUgZnJvbSAnLi9tb2R1bGVUeXBlcy9CYXNlTW9kdWxlJztcclxuaW1wb3J0IEphdmFzY3JpcHRNb2R1bGUgZnJvbSAnLi9tb2R1bGVUeXBlcy9KYXZhc2NyaXB0TW9kdWxlJztcclxuaW1wb3J0IEpTT05Nb2R1bGUgZnJvbSAnLi9tb2R1bGVUeXBlcy9KU09OTW9kdWxlJztcclxuaW1wb3J0IHsgSVNka0RlcGVuZGVuY3lGaWVsZCwgTW9kdWxlU291cmNlIH0gZnJvbSAnLi90eXBlcy9JU2RrRGVwZW5kZW5jeSc7XHJcblxyXG5pbnRlcmZhY2UgSU1vZHVsZUNvbmZpZyB7XHJcbiAgc291cmNlPzogTW9kdWxlU291cmNlO1xyXG4gIGNhbGxiYWNrPzogKHZhbHVlOiBhbnkpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmludGVyZmFjZSBJTW9kdWxlTWFwIHtcclxuICBbaWQ6IHN0cmluZ106IEJhc2VNb2R1bGVbXTtcclxufVxyXG5cclxuaW50ZXJmYWNlIElHZXRNb2R1bGVUeXBlSW5zdGFuY2VzUGFyYW1zIGV4dGVuZHMgSU1vZHVsZUNvbmZpZyB7XHJcbiAgZmllbGRzOiBJU2RrRGVwZW5kZW5jeUZpZWxkO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZXBlbmRlbmN5TWFuYWdlciB7XHJcbiAgcHVibGljIHN0YXRpYyBhc3luYyByZXNvbHZlRGVwZW5kZW5jaWVzKCkge1xyXG4gICAgY29uc3QgeyBtb2R1bGVNYXAsIG1vZHVsZURlcGVuZGVuY3kgfSA9IHRoaXMuZ2V0TW9kdWxlTWFwQW5kRGVwZW5kZW5jeSgpO1xyXG4gICAgY29uc3QgYXNzZXRzRmV0Y2hpbmdQcm9taXNlcyA9IHRoaXMuZmV0Y2hBbGxBc3NldHMobW9kdWxlTWFwKTtcclxuICAgIGNvbnN0IGV4ZWN1dGlvblNlcXVlbmNlID0gR3JhcGhVdGlscy50b3BvbG9naWNhbFNvcnQobW9kdWxlRGVwZW5kZW5jeSk7XHJcbiAgICBMb2dnZXIuaW5mbygnZGVwZW5kZW5jaWVzIGV4ZWN1dGlvbiBzZXF1ZW5jZScsIGV4ZWN1dGlvblNlcXVlbmNlKTtcclxuICAgIGF3YWl0IFByb21pc2UuYWxsKGFzc2V0c0ZldGNoaW5nUHJvbWlzZXMpO1xyXG5cclxuICAgIGV4ZWN1dGlvblNlcXVlbmNlLmZvckVhY2goaWQgPT4ge1xyXG4gICAgICBpZiAobW9kdWxlTWFwW2lkXSkge1xyXG4gICAgICAgIG1vZHVsZU1hcFtpZF0uZm9yRWFjaChhc3NldCA9PiBhc3NldC5leGVjdXRlKCkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGZldGNoQWxsQXNzZXRzKG1vZHVsZU1hcDogSU1vZHVsZU1hcCk6IFByb21pc2U8dm9pZD5bXSB7XHJcbiAgICBjb25zdCBwcm9taXNlczogUHJvbWlzZTx2b2lkPltdID0gW107XHJcblxyXG4gICAgT2JqZWN0LnZhbHVlcyhtb2R1bGVNYXApLmZvckVhY2goYXNzZXRzID0+IHtcclxuICAgICAgYXNzZXRzLmZvckVhY2goYXNzZXQgPT4ge1xyXG4gICAgICAgIHByb21pc2VzLnB1c2goYXNzZXQuZmV0Y2goKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHByb21pc2VzO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0TW9kdWxlTWFwQW5kRGVwZW5kZW5jeSgpIHtcclxuICAgIGNvbnN0IG1vZHVsZU1hcDogSU1vZHVsZU1hcCA9IHt9O1xyXG4gICAgY29uc3QgbW9kdWxlRGVwZW5kZW5jeTogW3N0cmluZywgc3RyaW5nW11dW10gPSBbXTtcclxuICAgIGNvbnN0IHsgZmllbGRzLCBtb2R1bGVzIH0gPSBTREtEZXBlbmRlbmN5LmdldERlcGVuZGVuY2llcygpO1xyXG5cclxuICAgIG1vZHVsZXMuZm9yRWFjaChcclxuICAgICAgKHsgbW9kdWxlLCBzb3VyY2UsIGNvbmZpZ3MsIGNvbmRpdGlvbiwgZGVwZW5kZW5jeSwgY2FsbGJhY2sgfSkgPT4ge1xyXG4gICAgICAgIGlmICghY29uZGl0aW9uIHx8IGNvbmRpdGlvbigpKSB7XHJcbiAgICAgICAgICBtb2R1bGVNYXBbbW9kdWxlXSA9IFtcclxuICAgICAgICAgICAgLi4udGhpcy5nZXRNb2R1bGVUeXBlSW5zdGFuY2VzKHtcclxuICAgICAgICAgICAgICBzb3VyY2UsXHJcbiAgICAgICAgICAgICAgY2FsbGJhY2ssXHJcbiAgICAgICAgICAgICAgZmllbGRzLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgbW9kdWxlRGVwZW5kZW5jeS5wdXNoKFttb2R1bGUsIGRlcGVuZGVuY3kgfHwgW11dKTtcclxuXHJcbiAgICAgICAgICBpZiAoY29uZmlncykge1xyXG4gICAgICAgICAgICBtb2R1bGVNYXBbYCR7bW9kdWxlfS5jb25maWdzYF0gPSBjb25maWdzLnJlZHVjZShcclxuICAgICAgICAgICAgICAoYWNjLCBjb25maWcpID0+XHJcbiAgICAgICAgICAgICAgICBhY2MuY29uY2F0KFxyXG4gICAgICAgICAgICAgICAgICB0aGlzLmdldE1vZHVsZVR5cGVJbnN0YW5jZXMoe1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLmNvbmZpZyxcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZHMsXHJcbiAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICBbXSBhcyBCYXNlTW9kdWxlW10sXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIG1vZHVsZURlcGVuZGVuY3kucHVzaChbbW9kdWxlLCBbYCR7bW9kdWxlfS5jb25maWdzYF1dKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiB7IG1vZHVsZU1hcCwgbW9kdWxlRGVwZW5kZW5jeSB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0TW9kdWxlVHlwZUluc3RhbmNlcyh7XHJcbiAgICBzb3VyY2UsXHJcbiAgICBjYWxsYmFjayxcclxuICAgIGZpZWxkcyxcclxuICB9OiBJR2V0TW9kdWxlVHlwZUluc3RhbmNlc1BhcmFtcyk6IEJhc2VNb2R1bGVbXSB7XHJcbiAgICBpZiAoc291cmNlID09PSB1bmRlZmluZWQpIHJldHVybiBbXTtcclxuICAgIGNvbnN0IG1vZHVsZXM6IEJhc2VNb2R1bGVbXSA9IFtdO1xyXG4gICAgY29uc3QgZXh0ZW5zaW9uID0gc291cmNlLnZhbHVlLnNwbGl0KCcuJykucG9wKCk7XHJcblxyXG4gICAgaWYgKHNvdXJjZS50eXBlID09PSBNb2R1bGVTb3VyY2VUeXBlLlBBVEgpIHtcclxuICAgICAgY29uc3QgcmVzb2x2ZWRQYXRocyA9IHRoaXMucmVzb2x2ZVBhdGhGaWVsZHMoe1xyXG4gICAgICAgIHBhdGg6IHNvdXJjZS52YWx1ZSxcclxuICAgICAgICBmaWVsZHMsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcmVzb2x2ZWRQYXRocy5mb3JFYWNoKHBhdGggPT4ge1xyXG4gICAgICAgIERlcGVuZGVuY3lNYW5hZ2VyLmFkZE1vZHVsZVJlc29sdmVyKFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZTogcGF0aCxcclxuICAgICAgICAgICAgdHlwZTogTW9kdWxlU291cmNlVHlwZS5QQVRILFxyXG4gICAgICAgICAgICBmZXRjaFVzaW5nRXZlbnQ6IHNvdXJjZS5mZXRjaFVzaW5nRXZlbnQsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgbW9kdWxlcyxcclxuICAgICAgICAgIGV4dGVuc2lvbixcclxuICAgICAgICAgIGNhbGxiYWNrLFxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgRGVwZW5kZW5jeU1hbmFnZXIuYWRkTW9kdWxlUmVzb2x2ZXIoc291cmNlLCBtb2R1bGVzLCBleHRlbnNpb24sIGNhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIHJldHVybiBtb2R1bGVzO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYWRkTW9kdWxlUmVzb2x2ZXIoXHJcbiAgICBzb3VyY2U6IE1vZHVsZVNvdXJjZSxcclxuICAgIG1vZHVsZXM6IEJhc2VNb2R1bGVbXSxcclxuICAgIGV4dGVuc2lvbj86IHN0cmluZyxcclxuICAgIGNhbGxiYWNrPzogKHZhbDogYW55KSA9PiB2b2lkLFxyXG4gICkge1xyXG4gICAgc3dpdGNoIChleHRlbnNpb24pIHtcclxuICAgICAgY2FzZSAnanMnOlxyXG4gICAgICAgIG1vZHVsZXMucHVzaChuZXcgSmF2YXNjcmlwdE1vZHVsZShzb3VyY2UsIGNhbGxiYWNrKSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2pzb24nOlxyXG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcclxuICAgICAgICAgIExvZ2dlci5lcnJvcihcclxuICAgICAgICAgICAgYE5vIGNhbGxiYWNrIHByb3ZpZGVkIGZvciBqc29uIGFzc2V0IHdpdGggJHtzb3VyY2UudHlwZX0gJyR7c291cmNlLnZhbHVlfScuIFNraXBwaW5nIGl0LmAsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBtb2R1bGVzLnB1c2gobmV3IEpTT05Nb2R1bGUoc291cmNlLCBjYWxsYmFjaykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBMb2dnZXIuZXJyb3IoXHJcbiAgICAgICAgICBgQ2Fubm90IHJlc29sdmUgZGVwZW5kZW5jeS4gVW5rbm93biBleHRlbnNpb24gaWRlbnRpZmllZCBmb3IgJHtzb3VyY2UudHlwZX0gJyR7c291cmNlLnZhbHVlfSdgLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyByZXNvbHZlUGF0aEZpZWxkcyh7XHJcbiAgICBwYXRoLFxyXG4gICAgZmllbGRzLFxyXG4gIH06IHtcclxuICAgIHBhdGg6IHN0cmluZztcclxuICAgIGZpZWxkczogSVNka0RlcGVuZGVuY3lGaWVsZDtcclxuICB9KTogc3RyaW5nW10ge1xyXG4gICAgY29uc3QgbWF0Y2hlcyA9IFsuLi5wYXRoLm1hdGNoQWxsKC9cXCQoXFx3KykvZyldO1xyXG4gICAgbGV0IHBhdGhzOiBzdHJpbmdbXSA9IFtwYXRoXTtcclxuXHJcbiAgICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xyXG4gICAgICBjb25zdCByYXdGaWVsZFZhbHVlID0gZmllbGRzW21hdGNoWzFdXTtcclxuICAgICAgY29uc3QgZmllbGRWYWx1ZXMgPSBBcnJheS5pc0FycmF5KHJhd0ZpZWxkVmFsdWUpXHJcbiAgICAgICAgPyByYXdGaWVsZFZhbHVlXHJcbiAgICAgICAgOiBbcmF3RmllbGRWYWx1ZV07XHJcbiAgICAgIGNvbnN0IHRlbXBQYXRoczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgIGZpZWxkVmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xyXG4gICAgICAgIHBhdGhzLmZvckVhY2gocGFydGlhbFJlc29sdmVkUGF0aCA9PiB7XHJcbiAgICAgICAgICB0ZW1wUGF0aHMucHVzaChwYXJ0aWFsUmVzb2x2ZWRQYXRoLnJlcGxhY2UobWF0Y2hbMF0sIHZhbHVlKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcGF0aHMgPSB0ZW1wUGF0aHM7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcGF0aHM7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBNU0ZUQ29uc2VudCBmcm9tICcuL3B1YmxpY0FwaS9QdWJsaWNBcGknO1xyXG5pbXBvcnQgRXZlbnRCdXMgZnJvbSAnLi9ldmVudEJ1cyc7XHJcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xyXG5pbXBvcnQgU3RvcmUgZnJvbSAnLi9zdG9yZSc7XHJcbmltcG9ydCBJRnJhbWVVdGlscyBmcm9tICcuL3V0aWxzL0lGcmFtZVV0aWxzJztcclxuaW1wb3J0IE9iamVjdFV0aWxzIGZyb20gJy4vdXRpbHMvT2JqZWN0VXRpbHMnO1xyXG5pbXBvcnQgUHVibGljQXBpSGVscGVyIGZyb20gJy4vcHVibGljQXBpJztcclxuaW1wb3J0ICogYXMgZW51bXMgZnJvbSAnLi9jb25zdGFudHMvZW51bXMnO1xyXG5pbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSAnLi9jb25zdGFudHMvY29uc3RhbnRzJztcclxuaW1wb3J0IERlcGVuZGVuY3lNYW5hZ2VyIGZyb20gJy4vZGVwZW5kZW5jeU1hbmFnZXInO1xyXG5pbXBvcnQgSW50ZXJuYWxBUEkgZnJvbSAnLi9pbnRlcm5hbEFwaSc7XHJcblxyXG53aW5kb3cuX19NU0ZUX1NESyA9IHtcclxuICBFdmVudEJ1czogRXZlbnRCdXMsXHJcbiAgTG9nZ2VyOiBMb2dnZXIsXHJcbiAgU3RvcmU6IFN0b3JlLFxyXG4gIFV0aWxzOiB7IElGcmFtZVV0aWxzOiBJRnJhbWVVdGlscywgT2JqZWN0VXRpbHM6IE9iamVjdFV0aWxzIH0sXHJcbiAgZW51bXM6IGVudW1zLFxyXG4gIGNvbnN0YW50czogY29uc3RhbnRzLFxyXG4gIEhlbHBlcnM6IFB1YmxpY0FwaUhlbHBlcixcclxuICBjb25maWc6IHdpbmRvdy5fX01TRlRfU0RLPy5jb25maWcgfHwgbnVsbCxcclxuICBpbml0Q29uc2VudDogSW50ZXJuYWxBUEkuaW5pdENvbnNlbnQsXHJcbiAgZGVidWc6ICgpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGV2ZW50czogd2luZG93Ll9fTVNGVF9TREsuU3RvcmUuZ2V0dGVycy5kZWJ1Z0luZm8uZXZlbnRzLFxyXG4gICAgICBsb2dzOiB3aW5kb3cuX19NU0ZUX1NESy5TdG9yZS5nZXR0ZXJzLmRlYnVnSW5mby5sb2dzLFxyXG4gICAgICBzdGF0ZTogd2luZG93Ll9fTVNGVF9TREsuU3RvcmUuZ2V0dGVycy5zdGF0ZSxcclxuICAgIH07XHJcbiAgfSxcclxufTtcclxuXHJcbndpbmRvdy5NU0ZUQ29uc2VudCA9IE1TRlRDb25zZW50IGFzIGFueTtcclxuRXZlbnRCdXMub24oZW51bXMuRXZlbnRzLkNvcmVDb25zZW50TW9kZWxTZWxlY3RlZCwgKCkgPT4ge1xyXG4gIERlcGVuZGVuY3lNYW5hZ2VyLnJlc29sdmVEZXBlbmRlbmNpZXMoKTtcclxufSk7XHJcbiIsImltcG9ydCB7IEludGVydmFsVW5pdHMgfSBmcm9tICdjb3JlL2NvbnN0YW50cy9lbnVtcyc7XHJcbmltcG9ydCBMb2dnZXIgZnJvbSAnY29yZS9sb2dnZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW50ZXJ2YWxVdGlscyB7XHJcbiAgcHVibGljIHN0YXRpYyBDb252ZXJ0VG9NaWxsaXNlY29uZHMoaW50ZXJ2YWw6IEludGVydmFsKTogbnVtYmVyIHtcclxuICAgIHN3aXRjaCAoaW50ZXJ2YWwudW5pdCkge1xyXG4gICAgICBjYXNlIEludGVydmFsVW5pdHMuZGF5OlxyXG4gICAgICAgIHJldHVybiBpbnRlcnZhbC52YWx1ZSAqIDg2NDAwMDAwO1xyXG4gICAgICBjYXNlIEludGVydmFsVW5pdHMud2VlazpcclxuICAgICAgICByZXR1cm4gaW50ZXJ2YWwudmFsdWUgKiA4NjQwMDAwMCAqIDc7XHJcbiAgICAgIGNhc2UgSW50ZXJ2YWxVbml0cy5tb250aDpcclxuICAgICAgICByZXR1cm4gaW50ZXJ2YWwudmFsdWUgKiA4NjQwMDAwMCAqIDMwO1xyXG4gICAgICBjYXNlIEludGVydmFsVW5pdHMueWVhcjpcclxuICAgICAgICByZXR1cm4gaW50ZXJ2YWwudmFsdWUgKiA4NjQwMDAwMCAqIDM2NTtcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBMb2dnZXIuZXJyb3IoYEludmFsaWQgdW5pdCBmb3IgaW50ZXJ2YWwgOiAke2ludGVydmFsLnVuaXR9YCk7XHJcbiAgICAgICAgcmV0dXJuIGludGVydmFsLnZhbHVlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBQcmVmZXJlbmNlIH0gZnJvbSAnY29yZS9jb25zdGFudHMvZW51bXMnO1xyXG5pbXBvcnQgTG9nZ2VyIGZyb20gJ2NvcmUvbG9nZ2VyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDb25zZW50RW5jb2RpbmdTZXJ2aWNlIHtcclxuICBwdWJsaWMgc3RhdGljIFZFUlNJT04gPSAndmVyc2lvbic7XHJcbiAgcHVibGljIHN0YXRpYyBNb2RlbElkID0gJ21vZGVsSWQnO1xyXG5cclxuICAvKipcclxuICAgKiBFbmNvZGUgdXNlcidzIGNvbnNlbnQgcHJlZmVyZW5jZVxyXG4gICAqXHJcbiAgICogQHBhcmFtICB7aW1wb3J0KFwiY29yZS90eXBlcy9pbnRlcmZhY2VzXCIpLklVc2VyQ29uc2VudH0gY29uc2VudCB1c2VyJ3MgY29uc2VudCBvYmplY3RcclxuICAgKiBAcGFyYW0gIHtpbXBvcnQoXCJjb3JlL3R5cGVzL2ludGVyZmFjZXNcIikuSUNvcmVDb25zZW50TW9kZWx9IG1vZGVsIGN1cnJlbnQgc2VsZWN0ZWQgY29uc2VudCBtb2RlbFxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IGVuY29kZWQgY29uc2VudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZW5jb2RlQ29uc2VudChcclxuICAgIGNvbnNlbnQ6IElVc2VyQ29uc2VudCxcclxuICAgIG1vZGVsOiBJQ29yZU1vZGVsLFxyXG4gICk6IHN0cmluZyB7XHJcbiAgICBMb2dnZXIuaW5mbygnZW5jb2RpbmcgY29uc2VudCcsIHsgY29uc2VudCwgbW9kZWwgfSk7XHJcbiAgICBjb25zdCB7IHByZWZlcmVuY2VzIH0gPSBjb25zZW50O1xyXG4gICAgbGV0IGVuY29kZWRDb25zZW50U3RyaW5nID1cclxuICAgICAgYCR7Q29uc2VudEVuY29kaW5nU2VydmljZS5WRVJTSU9OfT1gICsgbW9kZWwudmVyc2lvbi50b1N0cmluZygpICsgJyUnO1xyXG4gICAgZW5jb2RlZENvbnNlbnRTdHJpbmcgKz1cclxuICAgICAgYCR7Q29uc2VudEVuY29kaW5nU2VydmljZS5Nb2RlbElkfT1gICsgbW9kZWwuaWQgKyAnJSc7XHJcbiAgICBlbmNvZGVkQ29uc2VudFN0cmluZyArPSBPYmplY3Qua2V5cyhwcmVmZXJlbmNlcylcclxuICAgICAgLm1hcChjYXRlZ29yeSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGAke2NhdGVnb3J5fT0ke1xyXG4gICAgICAgICAgcHJlZmVyZW5jZXNbY2F0ZWdvcnldID09PSBQcmVmZXJlbmNlLk9OXHJcbiAgICAgICAgICAgID8gUHJlZmVyZW5jZS5PTlxyXG4gICAgICAgICAgICA6IFByZWZlcmVuY2UuT0ZGXHJcbiAgICAgICAgfWA7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5qb2luKCclJyk7XHJcbiAgICBMb2dnZXIuaW5mbyhgZW5jb2RlZCBjb25zZW50IHN0cmluZzogJHtlbmNvZGVkQ29uc2VudFN0cmluZ31gKTtcclxuICAgIHJldHVybiBlbmNvZGVkQ29uc2VudFN0cmluZztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlY29kZSBlbmNvZGVkIGNvbnNlbnQgc3RyaW5nLlxyXG4gICAqXHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSBlbmNvZGVkQ29uc2VudFN0cmluZyBlbmNvZGVkIGNvbnNlbnRcclxuICAgKiBAcmV0dXJucyB7aW1wb3J0KFwiY29yZS90eXBlcy9pbnRlcmZhY2VzXCIpLklVc2VyQ29uc2VudH0gb2JqZWN0IGhhdmluZyB1c2VyIHByZWZlcmVuY2UgZm9yIGFsbCB0cmFja2VyIGNhdGVnb3JpZXNcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGRlY29kZUNvbnNlbnRTdHJpbmcoXHJcbiAgICBlbmNvZGVkQ29uc2VudFN0cmluZzogc3RyaW5nLFxyXG4gICk6IElVc2VyQ29uc2VudCB7XHJcbiAgICBMb2dnZXIuaW5mbyhgZGVjb2RpbmcgY29uc2VudCBzdHJpbmc6ICR7ZW5jb2RlZENvbnNlbnRTdHJpbmd9YCk7XHJcbiAgICBjb25zdCBwcmVmZXJlbmNlczogU3RyaW5nS2V5VmFsdWUgPSB7fTtcclxuICAgIGVuY29kZWRDb25zZW50U3RyaW5nLnNwbGl0KCclJykuZm9yRWFjaChwYWlyU3RyID0+IHtcclxuICAgICAgY29uc3QgcGFpciA9IHBhaXJTdHIuc3BsaXQoJz0nKTtcclxuICAgICAgaWYgKHBhaXIubGVuZ3RoICE9PSAyKSByZXR1cm47XHJcbiAgICAgIGNvbnN0IGtleSA9IHBhaXJbMF07XHJcbiAgICAgIGNvbnN0IHZhbCA9IHBhaXJbMV07XHJcbiAgICAgIGlmIChcclxuICAgICAgICBrZXkgIT09IENvbnNlbnRFbmNvZGluZ1NlcnZpY2UuVkVSU0lPTiAmJlxyXG4gICAgICAgIGtleSAhPT0gQ29uc2VudEVuY29kaW5nU2VydmljZS5Nb2RlbElkXHJcbiAgICAgICkge1xyXG4gICAgICAgIHByZWZlcmVuY2VzW2tleV0gPSB2YWw7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgTG9nZ2VyLmluZm8oJ2RlY29kZWQgY29uc2VudCcsIHsgcHJlZmVyZW5jZXMgfSk7XHJcbiAgICByZXR1cm4geyBwcmVmZXJlbmNlcyB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHZlcnNpb24gZnJvbSBlbmNvZGVkIGNvbnNlbnQgc3RyaW5nXHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGVuY29kZWRDb25zZW50U3RyaW5nIGVuY29kaW5nIGNvbnNlbnRcclxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB2ZXJzaW9uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXRWZXJzaW9uRnJvbVN0cmluZyhlbmNvZGVkQ29uc2VudFN0cmluZzogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IG1hdGNoID0gZW5jb2RlZENvbnNlbnRTdHJpbmcubWF0Y2goL3ZlcnNpb249KFtcXGQuXSspJS8pO1xyXG4gICAgaWYgKG1hdGNoID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzID0gcGFyc2VJbnQobWF0Y2hbMV0pO1xyXG4gICAgaWYgKGlzTmFOKHJlcykpIHtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gICAgTG9nZ2VyLmluZm8oXHJcbiAgICAgIGBnZXRWZXJzaW9uU3RyaW5nIHN0cjogJHtlbmNvZGVkQ29uc2VudFN0cmluZ30gZm91bmQgdmVyc2lvbjogJHtyZXN9YCxcclxuICAgICk7XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IG1vZGVsIG5hbWUgZnJvbSBlbmNvZGVkIGNvbnNlbnQgc3RyaW5nXHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGVuY29kZWRDb25zZW50U3RyaW5nIGVuY29kaW5nIGNvbnNlbnRcclxuICAgKiBAcmV0dXJucyB7c3RyaW5nIHwgdW5kZWZpbmVkfSBuYW1lXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXRNb2RlbElkRnJvbVN0cmluZyhcclxuICAgIGVuY29kZWRDb25zZW50U3RyaW5nOiBzdHJpbmcsXHJcbiAgKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IG1hdGNoID0gZW5jb2RlZENvbnNlbnRTdHJpbmcubWF0Y2goL21vZGVsSWQ9KFteJV0rKSUvKTtcclxuICAgIGlmIChtYXRjaCA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBMb2dnZXIuaW5mbyhcclxuICAgICAgYGdldE1vZGVsSWRGcm9tU3RyaW5nIHN0cjogJHtlbmNvZGVkQ29uc2VudFN0cmluZ30gZm91bmQgdmVyc2lvbjogJHttYXRjaFsxXX1gLFxyXG4gICAgKTtcclxuICAgIHJldHVybiBtYXRjaFsxXTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSVN0YXRlIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZSB7XHJcbiAgcHVibGljIHN0YXRlOiBJU3RhdGU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHN0YXRlPzogSVN0YXRlKSB7XHJcbiAgICB0aGlzLnN0YXRlID0gc3RhdGUgfHwge1xyXG4gICAgICBjb25maWc6IHtcclxuICAgICAgICBzZGtDb25maWc6IHdpbmRvdy5fX01TRlRfU0RLLmNvbmZpZyxcclxuICAgICAgfSxcclxuICAgICAgY3VzdG9tOiB7XHJcbiAgICAgICAgbGNpZDogJycsXHJcbiAgICAgICAgcHJveHlKUzogJycsXHJcbiAgICAgICAgbGFuZ3VhZ2VCbG9ja0xpc3Q6IFtdLFxyXG4gICAgICAgIGxjaWRMaXN0OiBbXSxcclxuICAgICAgICB0ZW1wbGF0ZURhdGE6IHt9LFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIiwiLyogZXNsaW50LWRpc2FibGUgQG1pY3Jvc29mdC9zZGwvbm8tY29va2llcyAqL1xyXG5pbXBvcnQgTG9nZ2VyIGZyb20gJ2NvcmUvbG9nZ2VyJztcclxuaW1wb3J0IHsgSVN0b3JlUGx1Z2luIH0gZnJvbSAnLi9JU3RvcmVQbHVnaW4nO1xyXG5cclxuY29uc3QgQ29va2llUGx1Z2luOiBJU3RvcmVQbHVnaW48c3RyaW5nPiA9IGNsYXNzIENvb2tpZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogR2V0IGFsbCB2YWx1ZXMgZnJvbSBjb29raWUgc3RvcmFnZS5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IENvb2tpZSB2YWx1ZXNcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmNvb2tpZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBzcGVjaWZpYyB2YWx1ZSBvZiBhIGtleSBuYW1lLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBLZXkgbmFtZVxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGlucHV0IGtleVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SXRlbShrZXk6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBMb2dnZXIuaW5mbyhgZ2V0IGNvb2tpZSBrZXk6ICR7a2V5fWApO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgZG9jdW1lbnQuY29va2llLnNwbGl0KCc7ICcpLmZpbmQocm93ID0+IHJvdy5zdGFydHNXaXRoKGAke2tleX09YCkpIHx8ICcnXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHZhbHVlcyBpbiBjb29raWUgc3RvcmFnZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZXMgVmFsdWVzIHRvIHN0b3JlXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBzZXQodmFsdWVzOiBzdHJpbmcpIHtcclxuICAgIExvZ2dlci5pbmZvKGBzZXQgY29va2llOiAke3ZhbHVlc31gKTtcclxuICAgIGRvY3VtZW50LmNvb2tpZSA9IHZhbHVlcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB2YWx1ZSBmb3IgYSBrZXkgbmFtZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgS2V5IG5hbWVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gc2F2ZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdHRsXSBPcHRpb25hbCBleHBpcnkgdGltZSBpbiBtaWxsaSBzZWNvbmRzXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBzZXRJdGVtKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCB0dGw/OiBudW1iZXIpIHtcclxuICAgIGxldCBleHBpcnk7XHJcbiAgICBMb2dnZXIuaW5mbyhgc2V0IGNvb2tpZSBrZXk6ICR7a2V5fSB2YWx1ZTogJHt2YWx1ZX0gdHRsOiAke3R0bH1gKTtcclxuICAgIGlmICh0dGwpIHtcclxuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIHR0bCk7XHJcbiAgICAgIGV4cGlyeSA9IGRhdGUudG9VVENTdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBkb2N1bWVudC5jb29raWUgPSBgJHtrZXl9PSR7dmFsdWV9JHtcclxuICAgICAgZXhwaXJ5ID8gYDsgZXhwaXJlcz0ke2V4cGlyeX1gIDogJydcclxuICAgIH07IHBhdGg9L2A7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29va2llUGx1Z2luO1xyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXHJcbmltcG9ydCBDb29raWVQbHVnaW4gZnJvbSAnLi9wbHVnaW5zL0Nvb2tpZVBsdWdpbic7XHJcbmltcG9ydCBTdGF0ZSBmcm9tICcuL1N0YXRlJztcclxuaW1wb3J0IHsgSVN0YXRlIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5jbGFzcyBHZXR0ZXJzIGV4dGVuZHMgU3RhdGUge1xyXG4gIGNvbnN0cnVjdG9yKHN0YXRlOiBJU3RhdGUpIHtcclxuICAgIHN1cGVyKHN0YXRlKTtcclxuICAgIHRoaXMuc3RhdGUuY3VzdG9tID0ge1xyXG4gICAgICAuLi5zdGF0ZS5jdXN0b20sXHJcbiAgICAgIGxhbmd1YWdlQmxvY2tMaXN0OiBbJ2NhLUVzLVZBTEVOQ0lBJywgJ2tvayddLFxyXG4gICAgICBsY2lkTGlzdDogW1xyXG4gICAgICAgICdhZicsXHJcbiAgICAgICAgJ2FtJyxcclxuICAgICAgICAnYXInLFxyXG4gICAgICAgICdheicsXHJcbiAgICAgICAgJ2JnJyxcclxuICAgICAgICAnYm4nLFxyXG4gICAgICAgICdicycsXHJcbiAgICAgICAgJ2NhJyxcclxuICAgICAgICAnY3MnLFxyXG4gICAgICAgICdjeScsXHJcbiAgICAgICAgJ2RhJyxcclxuICAgICAgICAnZGUnLFxyXG4gICAgICAgICdlbCcsXHJcbiAgICAgICAgJ2VuLUdCJyxcclxuICAgICAgICAnZW4nLFxyXG4gICAgICAgICdlcy1NWCcsXHJcbiAgICAgICAgJ2VzJyxcclxuICAgICAgICAnZXQnLFxyXG4gICAgICAgICdldScsXHJcbiAgICAgICAgJ2ZhJyxcclxuICAgICAgICAnZmlsJyxcclxuICAgICAgICAnZmknLFxyXG4gICAgICAgICdmci1DQScsXHJcbiAgICAgICAgJ2ZyJyxcclxuICAgICAgICAnZ2EnLFxyXG4gICAgICAgICdnZCcsXHJcbiAgICAgICAgJ2dsJyxcclxuICAgICAgICAnZ3UnLFxyXG4gICAgICAgICdoZScsXHJcbiAgICAgICAgJ2hpJyxcclxuICAgICAgICAnaHInLFxyXG4gICAgICAgICdodScsXHJcbiAgICAgICAgJ2lkJyxcclxuICAgICAgICAnaXMnLFxyXG4gICAgICAgICdpdCcsXHJcbiAgICAgICAgJ2phJyxcclxuICAgICAgICAna2EnLFxyXG4gICAgICAgICdraycsXHJcbiAgICAgICAgJ2ttJyxcclxuICAgICAgICAna24nLFxyXG4gICAgICAgICdrbycsXHJcbiAgICAgICAgJ2xiJyxcclxuICAgICAgICAnbG8nLFxyXG4gICAgICAgICdsdCcsXHJcbiAgICAgICAgJ2x2JyxcclxuICAgICAgICAnbWknLFxyXG4gICAgICAgICdtaycsXHJcbiAgICAgICAgJ21sJyxcclxuICAgICAgICAnbXInLFxyXG4gICAgICAgICdtcycsXHJcbiAgICAgICAgJ210JyxcclxuICAgICAgICAnbmwnLFxyXG4gICAgICAgICduZScsXHJcbiAgICAgICAgJ25iJyxcclxuICAgICAgICAnbm4nLFxyXG4gICAgICAgICdvcicsXHJcbiAgICAgICAgJ3BhJyxcclxuICAgICAgICAncGwnLFxyXG4gICAgICAgICdwdC1CUicsXHJcbiAgICAgICAgJ3B0JyxcclxuICAgICAgICAncXUnLFxyXG4gICAgICAgICdybycsXHJcbiAgICAgICAgJ3J1JyxcclxuICAgICAgICAnc2snLFxyXG4gICAgICAgICdzbCcsXHJcbiAgICAgICAgJ3NxJyxcclxuICAgICAgICAnc3InLFxyXG4gICAgICAgICdzdicsXHJcbiAgICAgICAgJ3RhJyxcclxuICAgICAgICAndGUnLFxyXG4gICAgICAgICd0aCcsXHJcbiAgICAgICAgJ3RyJyxcclxuICAgICAgICAndHQnLFxyXG4gICAgICAgICd1ZycsXHJcbiAgICAgICAgJ3VrJyxcclxuICAgICAgICAndXInLFxyXG4gICAgICAgICd2aScsXHJcbiAgICAgICAgJ3poLUNOJyxcclxuICAgICAgICAnemgtVFcnLFxyXG4gICAgICAgICd6aCcsXHJcbiAgICAgIF0sXHJcbiAgICB9O1xyXG4gIH1cclxuICBnZXQgY3VycmVudE1vZGVsKCk6IElNb2RlbCB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5jb25maWcuY3VycmVudE1vZGVsO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNlbGVjdGVkQ29yZU1vZGVsKCk6IElDb3JlTW9kZWwgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuY29uZmlnLnNlbGVjdGVkQ29yZU1vZGVsO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG1vZGVscygpOiBJQ29yZU1vZGVsW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuY29uZmlnLnNka0NvbmZpZy5tb2RlbHM7XHJcbiAgfVxyXG5cclxuICBnZXQgdGVtcGxhdGUoKTogSVRlbXBsYXRlIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLmNvbmZpZy50ZW1wbGF0ZTtcclxuICB9XHJcblxyXG4gIGdldCB0cmFuc2xhdGlvbnMoKTogSUdyb3VwZWRUcmFuc2xhdGlvbltdIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLmNvbmZpZy50cmFuc2xhdGlvbnMgfHwgW107XHJcbiAgfVxyXG5cclxuICBnZXQgc3R5bGVzKCk6IElTdHlsZVtdIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLmN1c3RvbS5zdHlsZXMgfHwgW107XHJcbiAgfVxyXG5cclxuICBnZXQgdGltZXpvbmUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB3aW5kb3cuSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGxhbmd1YWdlcygpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCB1c2VyTGFuZ3VhZ2VzID0gbmF2aWdhdG9yLmxhbmd1YWdlcztcclxuICAgIGNvbnN0IHVzZXJMY2lkczogc3RyaW5nW10gPSBbXTtcclxuICAgIHVzZXJMYW5ndWFnZXMuZm9yRWFjaCh1c2VyTGFuZ3VhZ2UgPT4ge1xyXG4gICAgICBpZiAoIXRoaXMuc3RhdGUuY3VzdG9tLmxhbmd1YWdlQmxvY2tMaXN0LmluY2x1ZGVzKHVzZXJMYW5ndWFnZSkpIHtcclxuICAgICAgICBmb3IgKFxyXG4gICAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuICAgICAgICAgIGluZGV4IDwgdGhpcy5zdGF0ZS5jdXN0b20ubGNpZExpc3QubGVuZ3RoO1xyXG4gICAgICAgICAgaW5kZXgrK1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgaWYgKHVzZXJMYW5ndWFnZS5zdGFydHNXaXRoKHRoaXMuc3RhdGUuY3VzdG9tLmxjaWRMaXN0W2luZGV4XSkpIHtcclxuICAgICAgICAgICAgaWYgKCF1c2VyTGNpZHMuaW5jbHVkZXModGhpcy5zdGF0ZS5jdXN0b20ubGNpZExpc3RbaW5kZXhdKSlcclxuICAgICAgICAgICAgICB1c2VyTGNpZHMucHVzaCh0aGlzLnN0YXRlLmN1c3RvbS5sY2lkTGlzdFtpbmRleF0pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHVzZXJMY2lkcztcclxuICB9XHJcbiAgZ2V0IGVuY29kZWRDb25zZW50KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gQ29va2llUGx1Z2luLmdldEl0ZW0od2luZG93Ll9fTVNGVF9TREsuZW51bXMuQ29va2llLkNvbnNlbnQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHRlbXBsYXRlUGFyZW50TWFwKCk6IFN0cmluZ0tleVZhbHVlIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLmNvbmZpZy50ZW1wbGF0ZT8uY29tcG9uZW50UGFyZW50TWFwIHx8IHt9O1xyXG4gIH1cclxuXHJcbiAgZ2V0IGV4dGVuZGVkVHJhY2tlcnMoKTogSUV4dGVuZGVkVHJhY2tlcltdIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLmNvbmZpZy5zZGtDb25maWcuZXh0ZW5kZWRUcmFja2VycztcclxuICB9XHJcblxyXG4gIGdldCBkZWZhdWx0TW9kZWwoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLmNvbmZpZy5zZGtDb25maWc/LmRlZmF1bHRDb25zZW50TW9kZWw7XHJcbiAgfVxyXG5cclxuICBnZXQgbGNpZCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuY3VzdG9tLmxjaWQ7XHJcbiAgfVxyXG5cclxuICBnZXQgY29tcG9uZW50cygpOiBTdHJpbmdLZXlWYWx1ZSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5jb25maWcuY29tcG9uZW50cyB8fCB7fTtcclxuICB9XHJcblxyXG4gIGdldCBwcm94eUpTKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5jdXN0b20ucHJveHlKUztcclxuICB9XHJcblxyXG4gIGdldCBxdWVzdGlvbnMoKTogSVF1ZXN0aW9uW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuY29uZmlnLnF1ZXN0aW9ucyB8fCBbXTtcclxuICB9XHJcblxyXG4gIGdldCB0ZW1wbGF0ZURhdGEoKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLmN1c3RvbS50ZW1wbGF0ZURhdGE7XHJcbiAgfVxyXG5cclxuICBnZXQgc2RrQ29uZmlnKCk6IElDb25maWcge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuY29uZmlnLnNka0NvbmZpZztcclxuICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgR2V0dGVycztcclxuIiwiLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xyXG5pbXBvcnQgU3RhdGUgZnJvbSAnLi9TdGF0ZSc7XHJcbmltcG9ydCB7IElTdGF0ZSB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgQ29va2llUGx1Z2luIGZyb20gJy4vcGx1Z2lucy9Db29raWVQbHVnaW4nO1xyXG5cclxuY2xhc3MgUmVkdWNlcnMgZXh0ZW5kcyBTdGF0ZSB7XHJcbiAgY29uc3RydWN0b3Ioc3RhdGU6IElTdGF0ZSkge1xyXG4gICAgc3VwZXIoc3RhdGUpO1xyXG4gIH1cclxuICBwdWJsaWMgc2V0Q3VycmVudE1vZGVsKHZhbDogSUNvbnNlbnRNb2RlbCkge1xyXG4gICAgdGhpcy5zdGF0ZS5jb25maWcuY3VycmVudE1vZGVsID0gdmFsO1xyXG4gIH1cclxuICBwdWJsaWMgc2V0U2VsZWN0ZWRDb3JlTW9kZWwodmFsOiBJQ29yZU1vZGVsKSB7XHJcbiAgICB0aGlzLnN0YXRlLmNvbmZpZy5zZWxlY3RlZENvcmVNb2RlbCA9IHZhbDtcclxuICB9XHJcbiAgcHVibGljIHNldFRlbXBsYXRlKHZhbDogSVRlbXBsYXRlKSB7XHJcbiAgICB0aGlzLnN0YXRlLmNvbmZpZy50ZW1wbGF0ZSA9IHZhbDtcclxuICB9XHJcbiAgcHVibGljIHNldFRyYW5zbGF0aW9ucyh2YWw6IElHcm91cGVkVHJhbnNsYXRpb25bXSkge1xyXG4gICAgdGhpcy5zdGF0ZS5jb25maWcudHJhbnNsYXRpb25zID0gdmFsO1xyXG4gIH1cclxuICBwdWJsaWMgc2V0U3R5bGVzKHN0eWxlcz86IElTdHlsZVtdKSB7XHJcbiAgICB0aGlzLnN0YXRlLmN1c3RvbS5zdHlsZXMgPSBzdHlsZXM7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXRFbmNvZGVkQ29uc2VudFN0cmluZyhrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgdHRsOiBudW1iZXIpIHtcclxuICAgIENvb2tpZVBsdWdpbi5zZXRJdGVtKGtleSwgdmFsdWUsIHR0bCk7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXRMY2lkKGxjaWQ6IHN0cmluZykge1xyXG4gICAgdGhpcy5zdGF0ZS5jdXN0b20ubGNpZCA9IGxjaWQ7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXRDb21wb25lbnRzKHZhbDogU3RyaW5nS2V5VmFsdWUpIHtcclxuICAgIHRoaXMuc3RhdGUuY29uZmlnLmNvbXBvbmVudHMgPSB2YWw7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXRQcm94eUpTKGpzOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuc3RhdGUuY3VzdG9tLnByb3h5SlMgPSBqcztcclxuICB9XHJcbiAgcHVibGljIHNldFF1ZXN0aW9ucyh2YWw6IElRdWVzdGlvbltdKSB7XHJcbiAgICB0aGlzLnN0YXRlLmNvbmZpZy5xdWVzdGlvbnMgPSB2YWw7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXRUZW1wbGF0ZURhdGEodmFsOiBhbnkpIHtcclxuICAgIHRoaXMuc3RhdGUuY3VzdG9tLnRlbXBsYXRlRGF0YSA9IHZhbDtcclxuICB9XHJcbiAgcHVibGljIHNldFNES2NvbmZpZyh2YWw6IElDb25maWcpIHtcclxuICAgIHRoaXMuc3RhdGUuY29uZmlnLnNka0NvbmZpZyA9IHZhbDtcclxuICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgUmVkdWNlcnM7XHJcbiIsImltcG9ydCBTdGF0ZSBmcm9tICcuL1N0YXRlJztcclxuaW1wb3J0IEdldHRlcnMgZnJvbSAnLi9HZXR0ZXJzJztcclxuaW1wb3J0IFJlZHVjZXJzIGZyb20gJy4vUmVkdWNlcnMnO1xyXG5cclxuY29uc3QgeyBzdGF0ZSB9ID0gbmV3IFN0YXRlKCk7XHJcbmNvbnN0IGdldHRlciA9IG5ldyBHZXR0ZXJzKHN0YXRlKTtcclxuY29uc3QgcmVkdWNlciA9IG5ldyBSZWR1Y2VycyhzdGF0ZSk7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBnZXR0ZXJzOiBnZXR0ZXIsXHJcbiAgcmVkdWNlcnM6IHJlZHVjZXIsXHJcbn07XHJcbiIsImltcG9ydCB7IEV2ZW50cyB9IGZyb20gJ2NvcmUvY29uc3RhbnRzL2VudW1zJztcclxuaW1wb3J0IExvZ2dlciBmcm9tICdjb3JlL2xvZ2dlcic7XHJcbmltcG9ydCBBc3luY1V0aWxzIGZyb20gJ2NvcmUvdXRpbHMvQXN5bmNVdGlscyc7XHJcbmltcG9ydCBEb21VdGlscyBmcm9tICdjb3JlL3V0aWxzL0RvbVV0aWxzJztcclxuaW1wb3J0IEV2ZW50VXRpbHMgZnJvbSAnY29yZS91dGlscy9FdmVudFV0aWxzJztcclxuaW1wb3J0IHsgZGVmYXVsdCBhcyBzdG9yZSB9IGZyb20gJy4vc3RvcmUnO1xyXG5pbXBvcnQgR2V0dGVycyBmcm9tICcuL3N0b3JlL0dldHRlcnMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnNlbnRNb2RlbFNlcnZpY2Uge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmFkZFJlZHVjZXJzKHN0b3JlLnJlZHVjZXJzKTtcclxuICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmFkZEdldHRlcnMoR2V0dGVycyk7XHJcbiAgICBDb25zZW50TW9kZWxTZXJ2aWNlLnJlZ2lzdGVyRXZlbnRzKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWdpc3RlciBmb3IgaW5pdCBldmVudCB0byB1cGRhdGUgY29uc2VudCBtb2RlbFxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RhdGljIHJlZ2lzdGVyRXZlbnRzKCkge1xyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuRXZlbnRCdXMub24oXHJcbiAgICAgIHdpbmRvdy5fX01TRlRfU0RLLmVudW1zLkV2ZW50cy5Jbml0LFxyXG4gICAgICBDb25zZW50TW9kZWxTZXJ2aWNlLm9uSW5pdCxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBtYXRjaExvY2F0aW9uKGxvY2F0aW9uOiBzdHJpbmcsIG9wdGlvbnM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIW9wdGlvbnMgfHwgIUFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IG9wdGlvbiA9IG9wdGlvbnNbaV07XHJcbiAgICAgIGlmIChvcHRpb24udG9Mb3dlckNhc2UoKSA9PT0gJ2FsbCcgfHwgb3B0aW9uID09PSBsb2NhdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3B0aW9ucy5sZW5ndGggPT09IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZWxlY3QgQ29uc2VudCBNb2RlbCBhcyBwZXIgcnVsZXMgbGlrZSBsb2NhdGlvbiBldGMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0lJbml0Q29uZmlnfSBpbml0Q29uZmlnIGluaXQgY29uZmlndXJhdGlvblxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RhdGljIHNlbGVjdENvbnNlbnRNb2RlbChpbml0Q29uZmlnOiBJSW5pdENvbmZpZykge1xyXG4gICAgY29uc3QgeyBjb3VudHJ5T3JSZWdpb246IGNvdW50cnlDb2RlLCBjb3JlTW9kZWxzLCBMQ0lEIH0gPSBpbml0Q29uZmlnO1xyXG4gICAgY29uc3QgbW9kZWxzID0gY29yZU1vZGVscyB8fCB3aW5kb3cuX19NU0ZUX1NESy5TdG9yZS5nZXR0ZXJzLm1vZGVscztcclxuICAgIExvZ2dlci5pbmZvKCdzZWxlY3RpbmcgY29uc2VudCBtb2RlbCcsIHtcclxuICAgICAgbW9kZWxzLFxyXG4gICAgICBjb3VudHJ5Q29kZSxcclxuICAgICAgdGltZXpvbmU6IHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMudGltZXpvbmUsXHJcbiAgICB9KTtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShtb2RlbHMpIHx8IG1vZGVscy5sZW5ndGggPT09IDApIHtcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuTG9nZ2VyLmluZm8oJ01vZGVscyBub3QgZm91bmQuJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBzZWxlY3RlZE1vZGVsID1cclxuICAgICAgbW9kZWxzLmZpbmQoXHJcbiAgICAgICAgbSA9PiBtLm5hbWUgPT09IHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMuZGVmYXVsdE1vZGVsLFxyXG4gICAgICApIHx8IG1vZGVsc1swXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kZWxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IG1vZGVsID0gbW9kZWxzW2ldO1xyXG4gICAgICBjb25zdCBtYXRjaCA9XHJcbiAgICAgICAgY291bnRyeUNvZGUgPT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgPyBDb25zZW50TW9kZWxTZXJ2aWNlLm1hdGNoTG9jYXRpb24oXHJcbiAgICAgICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuU3RvcmUuZ2V0dGVycy50aW1lem9uZSxcclxuICAgICAgICAgICAgICBtb2RlbC5hdHRyaWJ1dGVzLmdlb0xvY2F0aW9ucyxcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgOiBDb25zZW50TW9kZWxTZXJ2aWNlLm1hdGNoTG9jYXRpb24oXHJcbiAgICAgICAgICAgICAgY291bnRyeUNvZGUsXHJcbiAgICAgICAgICAgICAgbW9kZWwuYXR0cmlidXRlcy5jb3VudHJpZXNPclJlZ2lvbnMsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgIHNlbGVjdGVkTW9kZWwgPSBtb2RlbDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuU3RvcmUucmVkdWNlcnMuc2V0U2VsZWN0ZWRDb3JlTW9kZWwoc2VsZWN0ZWRNb2RlbCk7XHJcbiAgICBDb25zZW50TW9kZWxTZXJ2aWNlLnNlbGVjdExhbmd1YWdlQ29kZShcclxuICAgICAgc2VsZWN0ZWRNb2RlbC50cmFuc2xhdGlvbnMsXHJcbiAgICAgIHNlbGVjdGVkTW9kZWwuZGVmYXVsdExDSUQsXHJcbiAgICAgIExDSUQsXHJcbiAgICApO1xyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuRXZlbnRCdXMudHJpZ2dlcihFdmVudHMuQ29yZUNvbnNlbnRNb2RlbFNlbGVjdGVkKTtcclxuICAgIHdpbmRvdy5fX01TRlRfU0RLLkxvZ2dlci5pbmZvKCdDb25zZW50IG1vZGVsIHNlbGVjdGVkLicpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IExDSUQgZGVwZW5kaW5nIG9uIHVzZXIncyBwcmVmZXJlbmNlIGFuZCBhdmFpbGFibGUgdHJhbnNsYXRpb25zXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBub3RpY2VzTGFuZ3VhZ2VzIGF2YWlsYWJsZSBub3RpY2UgbGFuZ3NcclxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGRlZmF1bHRMQ0lEIGRlZmF1bHQgTENJRFxyXG4gICAqIEBwYXJhbSAge3N0cmluZ30gb3ZlcnJpZGVMQ0lEIG92ZXJyaWRlIHVzZXIgTENJRCBsaXN0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgc2VsZWN0TGFuZ3VhZ2VDb2RlKFxyXG4gICAgbm90aWNlc0xhbmd1YWdlczogc3RyaW5nW10sXHJcbiAgICBkZWZhdWx0TENJRDogc3RyaW5nLFxyXG4gICAgb3ZlcnJpZGVMQ0lEPzogc3RyaW5nLFxyXG4gICkge1xyXG4gICAgbGV0IGxjaWQgPSBkZWZhdWx0TENJRDtcclxuICAgIGNvbnN0IHVzZXJMYW5ndWFnZXMgPSBvdmVycmlkZUxDSURcclxuICAgICAgPyBbb3ZlcnJpZGVMQ0lEXVxyXG4gICAgICA6IHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMubGFuZ3VhZ2VzO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1c2VyTGFuZ3VhZ2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChub3RpY2VzTGFuZ3VhZ2VzLmluY2x1ZGVzKHVzZXJMYW5ndWFnZXNbaV0pKSB7XHJcbiAgICAgICAgbGNpZCA9IHVzZXJMYW5ndWFnZXNbaV07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIExvZ2dlci5pbmZvKCdzZWxlY3RlZCBsYW5ndWFnZSBjb2RlJywgeyBsY2lkIH0pO1xyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuU3RvcmUucmVkdWNlcnMuc2V0TGNpZChsY2lkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSBjb25zZW50IG1vZGVsIGFmdGVyIGluaXQgYXMgcGVyIGluaXQgY29uZmlnXHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHtpbXBvcnQoXCJjb3JlL3R5cGVzL2ludGVyZmFjZXNcIikuSUluaXRDb25maWd9IGluaXRDb25maWcgaW5pdCBjb25maWcgcGFzc2VkIGJ5IHVzZXJcclxuICAgKi9cclxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBvbkluaXQoaW5pdENvbmZpZzogSUluaXRDb25maWcpIHtcclxuICAgIGF3YWl0IENvbnNlbnRNb2RlbFNlcnZpY2UuZmV0Y2hDb3JlQ29uZmlnKGluaXRDb25maWcpO1xyXG4gICAgQ29uc2VudE1vZGVsU2VydmljZS5zZWxlY3RDb25zZW50TW9kZWwoaW5pdENvbmZpZyk7XHJcbiAgICBDb25zZW50TW9kZWxTZXJ2aWNlLnVwZGF0ZUNvbmZpZ0lmUHJlc2VudChpbml0Q29uZmlnKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHVwZGF0ZUNvbmZpZ0lmUHJlc2VudChpbml0Q29uZmlnOiBJSW5pdENvbmZpZykge1xyXG4gICAgY29uc3QgeyB0cmFuc2xhdGlvbnMsIHRlbXBsYXRlcywgbW9kZWxzIH0gPSBpbml0Q29uZmlnO1xyXG4gICAgaWYgKG1vZGVscykge1xyXG4gICAgICBjb25zdCBtb2RlbCA9IG1vZGVscy5maW5kKFxyXG4gICAgICAgIG1vZGVsID0+XHJcbiAgICAgICAgICBtb2RlbC5uYW1lID09PVxyXG4gICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuU3RvcmUuZ2V0dGVycy5zZWxlY3RlZENvcmVNb2RlbD8ubmFtZSxcclxuICAgICAgKTtcclxuICAgICAgaWYgKG1vZGVsKSB7XHJcbiAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuU3RvcmUucmVkdWNlcnMuc2V0Q3VycmVudE1vZGVsKG1vZGVsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRyYW5zbGF0aW9ucykge1xyXG4gICAgICB3aW5kb3cuX19NU0ZUX1NESy5TdG9yZS5yZWR1Y2Vycy5zZXRUcmFuc2xhdGlvbnMoXHJcbiAgICAgICAgdHJhbnNsYXRpb25zW3dpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMubGNpZF0sXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBpZiAodGVtcGxhdGVzKSB7XHJcbiAgICAgIGNvbnN0IHRlbXBsYXRlID1cclxuICAgICAgICB0ZW1wbGF0ZXMuZmluZChcclxuICAgICAgICAgIHQgPT5cclxuICAgICAgICAgICAgdC5uYW1lID09PVxyXG4gICAgICAgICAgICB3aW5kb3cuX19NU0ZUX1NESy5TdG9yZS5nZXR0ZXJzLnNlbGVjdGVkQ29yZU1vZGVsPy5sYXlvdXRzWzBdLm5hbWUsXHJcbiAgICAgICAgKSB8fCB0ZW1wbGF0ZXNbMF07XHJcbiAgICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLnJlZHVjZXJzLnNldFRlbXBsYXRlKHRlbXBsYXRlKTtcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuRXZlbnRCdXMudHJpZ2dlcihcclxuICAgICAgICB3aW5kb3cuX19NU0ZUX1NESy5lbnVtcy5FdmVudHMuQ29uZmlnUmVhZHksXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBmZXRjaENvcmVDb25maWcoaW5pdENvbmZpZzogSUluaXRDb25maWcpIHtcclxuICAgIGNvbnN0IGNvbmZpZyA9IHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMuc2RrQ29uZmlnO1xyXG4gICAgaWYgKGluaXRDb25maWcucHJldmlldykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoY29uZmlnID09IG51bGwgfHwgY29uZmlnLm1vZGVscyA9PSBudWxsKSB7XHJcbiAgICAgIGNvbnN0IHsgcHJvbWlzZSwgcmVzb2x2ZSB9ID0gQXN5bmNVdGlscy5kZWZlcnJlZDx2b2lkPigpO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgRXZlbnRVdGlscy5mZXRjaChcclxuICAgICAgICBgL21zZnQtcHJpdmFjeS9wYWNrYWdlcy8ke3dpbmRvdy5fX01TRlRfU0RLLmNvbmZpZy5uYW1lfS9sYXRlc3QvY29yZS1jb25maWcuanNgLFxyXG4gICAgICApO1xyXG4gICAgICBEb21VdGlscy5hZGRTY3JpcHRUb0RPTShkYXRhKTtcclxuICAgICAgLy9UT0RPIGZ1bGwgcHJvb2YgdGhpcyBsb2dpY1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB3aW5kb3cuX19NU0ZUX1NESy5TdG9yZS5yZWR1Y2Vycy5zZXRTREtjb25maWcoXHJcbiAgICAgICAgICB3aW5kb3cuX19NU0ZUX1NESz8uY29uZmlnLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgQ29uc2VudE1vZGVsU2VydmljZSgpO1xyXG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gJ2NvcmUvbG9nZ2VyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUcmFja2VyQ2F0ZWdvcnlTZXJ2aWNlIHtcclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRyYWNrZXIgY2F0ZWdvcmllcyBpbiBjdXJyZW50IHNlbGVjdGVkIG1vZGVsXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7aW1wb3J0KFwiY29yZS90eXBlcy9pbnRlcmZhY2VzXCIpLklUcmFja2VyQ2F0ZWdvcnlbXX0gdHJhY2tlciBjYXRlZ29yeSBsaXN0XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXRUcmFja2VyQ2F0ZWdvcmllcygpOiBJTW9kZWxUcmFja2VyQ2F0ZWdvcnlbXSB7XHJcbiAgICBpZiAod2luZG93Ll9fTVNGVF9TREsuU3RvcmUuZ2V0dGVycy5jdXJyZW50TW9kZWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gKHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMuY3VycmVudE1vZGVsIGFzIElDb25zZW50TW9kZWwpXHJcbiAgICAgICAgLnRyYWNrZXJDYXRlZ29yaWVzO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb25zZW50IE1vZGVsIG5vdCBzZWxlY3RlZC4nKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgZGVmYXVsdCBjb25zZW50IHNldHRpbmcgYXMgcGVyIGNvbnNlbnQgbW9kZWxcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiY29yZS90eXBlcy9pbnRlcmZhY2VzXCIpLkNvbnNlbnRNb2RlbFR5cGV9IGNvbnNlbnRNb2RlbFR5cGUgY29uc2VudCBtb2RlbCB0eXBlXHJcbiAgICogQHJldHVybnMge2ltcG9ydChcImNvcmUvdHlwZXMvaW50ZXJmYWNlc1wiKS5JVXNlckNvbnNlbnR9IHVzZXIgY29uc2VudCBvYmplY3RcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldERlZmF1bHRDb25zZW50KGNvbnNlbnRNb2RlbFR5cGU6IGFueSk6IElVc2VyQ29uc2VudCB7XHJcbiAgICBjb25zdCBjb25zZW50OiBJVXNlckNvbnNlbnQgPSB7IHByZWZlcmVuY2VzOiB7fSB9O1xyXG4gICAgKFxyXG4gICAgICB3aW5kb3cuX19NU0ZUX1NESy5TdG9yZS5nZXR0ZXJzLmN1cnJlbnRNb2RlbCBhcyBJQ29uc2VudE1vZGVsXHJcbiAgICApPy50cmFja2VyQ2F0ZWdvcmllcz8uZm9yRWFjaChjYXRlZ29yeSA9PiB7XHJcbiAgICAgIGNvbnNlbnQucHJlZmVyZW5jZXNbY2F0ZWdvcnkuY2F0ZWdvcnlOYW1lXSA9XHJcbiAgICAgICAgY2F0ZWdvcnkuaXNFc3NlbnRpYWwgfHxcclxuICAgICAgICBjb25zZW50TW9kZWxUeXBlID09PSB3aW5kb3cuX19NU0ZUX1NESy5lbnVtcy5Db25zZW50TW9kZWxUeXBlLkltcGxpY2l0XHJcbiAgICAgICAgICA/IHdpbmRvdy5fX01TRlRfU0RLLmVudW1zLlByZWZlcmVuY2UuT05cclxuICAgICAgICAgIDogd2luZG93Ll9fTVNGVF9TREsuZW51bXMuUHJlZmVyZW5jZS5PRkY7XHJcbiAgICB9KTtcclxuICAgIExvZ2dlci5pbmZvKCdldmFsdWF0aW5nIGRlZmF1bHQgY29uc2VudCcsIHsgY29uc2VudE1vZGVsVHlwZSwgY29uc2VudCB9KTtcclxuICAgIHJldHVybiBjb25zZW50O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb25zZW50TW9kZWxUeXBlLCBNb2RlbEtpbmQsIFByZWZlcmVuY2UgfSBmcm9tICdjb3JlL2NvbnN0YW50cy9lbnVtcyc7XHJcbmltcG9ydCBMb2dnZXIgZnJvbSAnY29yZS9sb2dnZXInO1xyXG5pbXBvcnQgSW50ZXJ2YWxVdGlscyBmcm9tICdjb3JlL3V0aWxzL0ludGVydmFsVXRpbHMnO1xyXG5pbXBvcnQgeyBDb25zZW50RW5jb2RpbmdTZXJ2aWNlIH0gZnJvbSAnLi9Db25zZW50RW5jb2RpbmdTZXJ2aWNlJztcclxuaW1wb3J0ICcuL0NvbnNlbnRNb2RlbFNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUcmFja2VyQ2F0ZWdvcnlTZXJ2aWNlIH0gZnJvbSAnLi9UcmFja2VyQ2F0ZWdvcnlTZXJ2aWNlJztcclxuZXhwb3J0IGNsYXNzIENvbnNlbnRNYW5hZ2VyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIENvbnNlbnRNYW5hZ2VyLnJlZ2lzdGVyRXZlbnRzKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWdpc3RlciBmb3Igd2luZG93Ll9fTVNGVF9TREsuZW51bXMuRXZlbnRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVnaXN0ZXJFdmVudHMoKSB7XHJcbiAgICB3aW5kb3cuX19NU0ZUX1NESy5FdmVudEJ1cy5vbihcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuZW51bXMuRXZlbnRzLkNvbmZpZ1JlYWR5LFxyXG4gICAgICBDb25zZW50TWFuYWdlci5zaG93Tm90aWNlSWZDb25zZW50SW52YWxpZCxcclxuICAgICk7XHJcbiAgICB3aW5kb3cuX19NU0ZUX1NESy5FdmVudEJ1cy5vbihcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuZW51bXMuUHVibGljRXZlbnRzLkFjY2VwdEFsbCxcclxuICAgICAgQ29uc2VudE1hbmFnZXIuYWNjZXB0QWxsQ2F0ZWdvcmllcyxcclxuICAgICk7XHJcbiAgICB3aW5kb3cuX19NU0ZUX1NESy5FdmVudEJ1cy5vbihcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuZW51bXMuUHVibGljRXZlbnRzLlJlamVjdEFsbCxcclxuICAgICAgQ29uc2VudE1hbmFnZXIucmVqZWN0QWxsTm9uRXNzZW50aWFsQ2F0ZWdvcmllcyxcclxuICAgICk7XHJcbiAgICB3aW5kb3cuX19NU0ZUX1NESy5FdmVudEJ1cy5vbihcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuZW51bXMuUHVibGljRXZlbnRzLlVwZGF0ZUNvbnNlbnQsXHJcbiAgICAgIENvbnNlbnRNYW5hZ2VyLnNldENvbnNlbnQsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHVzZXIncyBjb25zZW50LlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge2ltcG9ydChcImNvcmUvdHlwZXMvaW50ZXJmYWNlc1wiKS5JVXNlckNvbnNlbnR9IGNvbnNlbnQgb2JqZWN0XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXRDb25zZW50KCk6IElVc2VyQ29uc2VudCB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB3aW5kb3cuX19NU0ZUX1NESy5TdG9yZS5nZXR0ZXJzLnVzZXJDb25zZW50IHx8XHJcbiAgICAgIFRyYWNrZXJDYXRlZ29yeVNlcnZpY2UuZ2V0RGVmYXVsdENvbnNlbnQoXHJcbiAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuZW51bXMuQ29uc2VudE1vZGVsVHlwZS5FeHBsaWNpdCxcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB1c2VyJ3MgY29uc2VudCBmb3Igc3BlY2lmaWMgY2F0ZWdvcnlcclxuICAgKlxyXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdHJhY2tlckNhdGVnb3J5IGNhdGVnb3J5IG5hbWVcclxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBlaXRoZXIgb246IFwiMVwiIC8gb2ZmOiBcIjBcIiBlbHNlIG51bGwgaWYgbm90IGZvdW5kLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0Q29uc2VudEZvcih0cmFja2VyQ2F0ZWdvcnk6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xyXG4gICAgcmV0dXJuIENvbnNlbnRNYW5hZ2VyLmdldENvbnNlbnQoKS5wcmVmZXJlbmNlc1t0cmFja2VyQ2F0ZWdvcnldO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRW5jb2RlIGFuZCBzYXZlIHVzZXIncyBjb25zZW50XHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHtpbXBvcnQoXCJjb3JlL3R5cGVzL2ludGVyZmFjZXNcIikuSUdlbmVyaWNPYmplY3R9IHBheWxvYWQgY29udGFpbmluZyBjb25zZW50IG9iamVjdFxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RhdGljIHNldENvbnNlbnQocGF5bG9hZDogSUdlbmVyaWNPYmplY3QpIHtcclxuICAgIExvZ2dlci5pbmZvKCdzZXQgY29uc2VudCcsIHsgcGF5bG9hZCB9KTtcclxuICAgIGNvbnN0IHsgY29uc2VudCB9ID0gcGF5bG9hZDtcclxuICAgIGNvbnN0IG1vZGVsID0gd2luZG93Ll9fTVNGVF9TREsuU3RvcmUuZ2V0dGVycy5jdXJyZW50TW9kZWwgYXMgSUNvbnNlbnRNb2RlbDtcclxuICAgIGNvbnN0IGNvcmVNb2RlbCA9IHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWw7XHJcbiAgICBpZiAobW9kZWwgPT09IHVuZGVmaW5lZCB8fCBjb3JlTW9kZWwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB3aW5kb3cuX19NU0ZUX1NESy5Mb2dnZXIud2FybihcclxuICAgICAgICAnQ2Fubm90IHNldCB1c2VyIGNvbnNlbnQgYmVmb3JlIGNvbnNlbnQgbW9kZWwgaXMgcmVhZHkuJyxcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZW5jb2RlZENvbnNlbnRTdHJpbmcgPSBDb25zZW50RW5jb2RpbmdTZXJ2aWNlLmVuY29kZUNvbnNlbnQoXHJcbiAgICAgIGNvbnNlbnQsXHJcbiAgICAgIGNvcmVNb2RlbCxcclxuICAgICk7XHJcbiAgICB3aW5kb3cuX19NU0ZUX1NESy5TdG9yZS5yZWR1Y2Vycy5zZXRFbmNvZGVkQ29uc2VudFN0cmluZyhcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuZW51bXMuQ29va2llLkNvbnNlbnQsXHJcbiAgICAgIGVuY29kZWRDb25zZW50U3RyaW5nLFxyXG4gICAgICBJbnRlcnZhbFV0aWxzLkNvbnZlcnRUb01pbGxpc2Vjb25kcyhtb2RlbC5leHBpcnkpLFxyXG4gICAgKTtcclxuICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLnJlZHVjZXJzLnNldFVzZXJDb25zZW50KGNvbnNlbnQpO1xyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuTG9nZ2VyLmluZm8oJ0NvbnNlbnQgdXBkYXRlZC4nKTtcclxuICAgIHdpbmRvdy5fX01TRlRfU0RLLkV2ZW50QnVzLnRyaWdnZXIoXHJcbiAgICAgIHdpbmRvdy5fX01TRlRfU0RLLmVudW1zLlB1YmxpY0V2ZW50cy5Db25zZW50Q2hhbmdlZCxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiB1c2VyIGhhcyBwcm92aWRlZCBjb25zZW50IGFuZCBpdHMgdmFsaWQgb3Igbm90XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gY29uc2VudCBpcyB2YWxpZCBvciBub3RcclxuICAgKi9cclxuICBwcml2YXRlIHN0YXRpYyBpc0NvbnNlbnRWYWxpZCgpOiBib29sZWFuIHtcclxuICAgIGlmICh3aW5kb3cuX19NU0ZUX1NESy5TdG9yZS5nZXR0ZXJzLmNvbmZpZy5pbml0Q29uZmlnPy5wcmV2aWV3KVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBjb25zdCBlbmNvZGVkQ29uc2VudFN0cmluZyA9IHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMuZW5jb2RlZENvbnNlbnQ7XHJcbiAgICBpZiAoZW5jb2RlZENvbnNlbnRTdHJpbmcgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAod2luZG93Ll9fTVNGVF9TREsuU3RvcmUuZ2V0dGVycy5zZWxlY3RlZENvcmVNb2RlbCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHdpbmRvdy5fX01TRlRfU0RLLkxvZ2dlci53YXJuKFxyXG4gICAgICAgIGBDb25zZW50IG1vZGVsIG5vdCBzZWxlY3RlZCwgY2FuJ3QgdmFsaWRhdGUgY29uc2VudC5gLFxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgdmVyc2lvbiwgaWQgfSA9IHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWw7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBDb25zZW50RW5jb2RpbmdTZXJ2aWNlLmdldFZlcnNpb25Gcm9tU3RyaW5nKGVuY29kZWRDb25zZW50U3RyaW5nKSA9PT1cclxuICAgICAgICB2ZXJzaW9uICYmXHJcbiAgICAgIENvbnNlbnRFbmNvZGluZ1NlcnZpY2UuZ2V0TW9kZWxJZEZyb21TdHJpbmcoZW5jb2RlZENvbnNlbnRTdHJpbmcpID09PSBpZFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3cgY29uc2VudCBub3RpY2UgaWYgcmVxdWlyZWQuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgc2hvd05vdGljZUlmQ29uc2VudEludmFsaWQoKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWw/LmtpbmQgIT09XHJcbiAgICAgIE1vZGVsS2luZC5XZWJDb25zZW50TW9kZWxcclxuICAgICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBtb2RlID1cclxuICAgICAgKHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWwgYXMgSUNvcmVDb25zZW50TW9kZWwpXHJcbiAgICAgICAgPy5jb25zZW50VHlwZSB8fCBDb25zZW50TW9kZWxUeXBlLkV4cGxpY2l0O1xyXG4gICAgY29uc3QgY29uc2VudFZhbGlkID0gQ29uc2VudE1hbmFnZXIuaXNDb25zZW50VmFsaWQoKTtcclxuICAgIExvZ2dlci5pbmZvKGBjb25zZW50IHZhbGlkOiAke2NvbnNlbnRWYWxpZH1gKTtcclxuICAgIGlmICghY29uc2VudFZhbGlkICYmIG1vZGUgPT09IENvbnNlbnRNb2RlbFR5cGUuRXhwbGljaXQpIHtcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuRXZlbnRCdXMudHJpZ2dlcihcclxuICAgICAgICB3aW5kb3cuX19NU0ZUX1NESy5lbnVtcy5QdWJsaWNFdmVudHMuU2hvd0ZpcnN0UGFnZSxcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHByZWZlcmVuY2VzID0gY29uc2VudFZhbGlkXHJcbiAgICAgID8gQ29uc2VudEVuY29kaW5nU2VydmljZS5kZWNvZGVDb25zZW50U3RyaW5nKFxyXG4gICAgICAgICAgd2luZG93Ll9fTVNGVF9TREsuU3RvcmUuZ2V0dGVycy5lbmNvZGVkQ29uc2VudCxcclxuICAgICAgICApLnByZWZlcmVuY2VzXHJcbiAgICAgIDoge307XHJcbiAgICBjb25zdCBjb25zZW50OiBJVXNlckNvbnNlbnQgPSB7IHByZWZlcmVuY2VzOiB7fSB9O1xyXG4gICAgKFxyXG4gICAgICB3aW5kb3cuX19NU0ZUX1NESy5TdG9yZS5nZXR0ZXJzLnNlbGVjdGVkQ29yZU1vZGVsIGFzIElDb3JlQ29uc2VudE1vZGVsXHJcbiAgICApPy50cmFja2VyQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcclxuICAgICAgaWYgKGNhdGVnb3J5LmlzRXNzZW50aWFsKSB7XHJcbiAgICAgICAgY29uc2VudC5wcmVmZXJlbmNlc1tjYXRlZ29yeS5jYXRlZ29yeU5hbWVdID1cclxuICAgICAgICAgIHdpbmRvdy5fX01TRlRfU0RLLmVudW1zLlByZWZlcmVuY2UuT047XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc2VudC5wcmVmZXJlbmNlc1tjYXRlZ29yeS5jYXRlZ29yeU5hbWVdID1cclxuICAgICAgICAgIHByZWZlcmVuY2VzW2NhdGVnb3J5LmNhdGVnb3J5TmFtZV0gfHxcclxuICAgICAgICAgIENvbnNlbnRNYW5hZ2VyLmdldERlZmF1bHRQcmVmZXJlbmNlKG1vZGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLnJlZHVjZXJzLnNldFVzZXJDb25zZW50KGNvbnNlbnQpO1xyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuRXZlbnRCdXMudHJpZ2dlcihcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuZW51bXMuUHVibGljRXZlbnRzLkNvbnNlbnRDaGFuZ2VkLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGdldERlZmF1bHRQcmVmZXJlbmNlKG1vZGU/OiBDb25zZW50TW9kZWxUeXBlKTogUHJlZmVyZW5jZSB7XHJcbiAgICByZXR1cm4gbW9kZSA9PT0gQ29uc2VudE1vZGVsVHlwZS5FeHBsaWNpdCA/IFByZWZlcmVuY2UuT0ZGIDogUHJlZmVyZW5jZS5PTjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNhdmUgdXNlcnMgY29uc2VudCB0byBhY2NlcHQgYWxsIGNhdGVnb3JpZXMgYW5kIGhpZGUgYmFubmVyXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYWNjZXB0QWxsQ2F0ZWdvcmllcygpIHtcclxuICAgIGNvbnN0IGNvbnNlbnQ6IElVc2VyQ29uc2VudCA9IHsgcHJlZmVyZW5jZXM6IHt9IH07XHJcbiAgICAoXHJcbiAgICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWwgYXMgSUNvcmVDb25zZW50TW9kZWxcclxuICAgICk/LnRyYWNrZXJDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xyXG4gICAgICBjb25zZW50LnByZWZlcmVuY2VzW2NhdGVnb3J5LmNhdGVnb3J5TmFtZV0gPVxyXG4gICAgICAgIHdpbmRvdy5fX01TRlRfU0RLLmVudW1zLlByZWZlcmVuY2UuT047XHJcbiAgICB9KTtcclxuICAgIENvbnNlbnRNYW5hZ2VyLnNldENvbnNlbnQoeyBjb25zZW50IH0pO1xyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuRXZlbnRCdXMudHJpZ2dlcihcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuZW51bXMuUHVibGljRXZlbnRzLkNsb3NlQ29uc2VudE5vdGljZSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTYXZlIHVzZXJzIGNvbnNlbnQgdG8gcmVqZWN0IGFsbCBub24gZXNzZW50aWFsIGNhdGVnb3JpZXMgYW5kIGhpZGUgYmFubmVyXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVqZWN0QWxsTm9uRXNzZW50aWFsQ2F0ZWdvcmllcygpIHtcclxuICAgIGNvbnN0IGNvbnNlbnQ6IElVc2VyQ29uc2VudCA9IHsgcHJlZmVyZW5jZXM6IHt9IH07XHJcbiAgICAoXHJcbiAgICAgIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMuc2VsZWN0ZWRDb3JlTW9kZWwgYXMgSUNvcmVDb25zZW50TW9kZWxcclxuICAgICk/LnRyYWNrZXJDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xyXG4gICAgICBjb25zZW50LnByZWZlcmVuY2VzW2NhdGVnb3J5LmNhdGVnb3J5TmFtZV0gPSBjYXRlZ29yeS5pc0Vzc2VudGlhbFxyXG4gICAgICAgID8gd2luZG93Ll9fTVNGVF9TREsuZW51bXMuUHJlZmVyZW5jZS5PTlxyXG4gICAgICAgIDogd2luZG93Ll9fTVNGVF9TREsuZW51bXMuUHJlZmVyZW5jZS5PRkY7XHJcbiAgICB9KTtcclxuICAgIENvbnNlbnRNYW5hZ2VyLnNldENvbnNlbnQoeyBjb25zZW50IH0pO1xyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuRXZlbnRCdXMudHJpZ2dlcihcclxuICAgICAgd2luZG93Ll9fTVNGVF9TREsuZW51bXMuUHVibGljRXZlbnRzLkNsb3NlQ29uc2VudE5vdGljZSxcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgQ29uc2VudE1hbmFnZXIoKTtcclxuIiwiaW1wb3J0IHsgQ29uc2VudE1hbmFnZXIgfSBmcm9tICcuLi9Db25zZW50TWFuYWdlcic7XHJcbmltcG9ydCB7IFRyYWNrZXJDYXRlZ29yeVNlcnZpY2UgfSBmcm9tICcuLi9UcmFja2VyQ2F0ZWdvcnlTZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQdWJsaWNBUEkge1xyXG4gIC8qKlxyXG4gICAqIEdldCB1c2VyJ3MgY29uc2VudCBjb250YWluaW5nIGNhdGVnb3J5IHByZWZlcmVuY2VzXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7aW1wb3J0KFwiY29yZS90eXBlcy9pbnRlcmZhY2VzXCIpLklVc2VyQ29uc2VudH0gdXNlcidzIGNvbnNlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldENvbnNlbnQoKTogSVVzZXJDb25zZW50IHtcclxuICAgIHJldHVybiBDb25zZW50TWFuYWdlci5nZXRDb25zZW50KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYWxsIHRyYWNrZXIgY2F0ZWdvcmllcyBhdmFpbGFibGUgYXMgcGFydCBvZiBjdXJyZW50IHNlbGVjdGVkIG1vZGVsXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7aW1wb3J0KFwiY29yZS90eXBlcy9pbnRlcmZhY2VzXCIpLklUcmFja2VyQ2F0ZWdvcnlbXX0gbGlzdCBvZiB0cmFja2VyIGNhdGVnb3JpZXNcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldFRyYWNrZXJDYXRlZ29yaWVzKCk6IElNb2RlbFRyYWNrZXJDYXRlZ29yeVtdIHtcclxuICAgIHJldHVybiBUcmFja2VyQ2F0ZWdvcnlTZXJ2aWNlLmdldFRyYWNrZXJDYXRlZ29yaWVzKCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEdldCBhbGwgY29uc2VudCBtb2RlbHMgYXZhaWxhYmxlIGFzIHBhcnQgb2Ygc2RrXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7aW1wb3J0KFwiY29yZS90eXBlcy9pbnRlcmZhY2VzXCIpLklDb25zZW50TW9kZWxFeHRlcm5hbFtdfSBsaXN0IG9mIGNvbnNlbnQgbW9kZWxzXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXRDb25zZW50TW9kZWxzKCk6IElNb2RlbEV4dGVybmFsW10ge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMubW9kZWxzLm1hcChcclxuICAgICAgKHsgbmFtZSwgdmVyc2lvbiwgaWQgfSkgPT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBpZCxcclxuICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICB2ZXJzaW9uOiB2ZXJzaW9uLFxyXG4gICAgICAgICAgc2VsZWN0ZWQ6IHdpbmRvdy5fX01TRlRfU0RLLlN0b3JlLmdldHRlcnMuY3VycmVudE1vZGVsPy5uYW1lID09PSBuYW1lLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgJy4uL2NvcmUvaW5kZXgnO1xyXG5pbXBvcnQgeyBQdWJsaWNBUEkgfSBmcm9tICcuL3B1YmxpY0FwaSc7XHJcblxyXG53aW5kb3cuX19NU0ZUX1NESy5IZWxwZXJzLkFkZFB1YmxpY0FwaXMoUHVibGljQVBJKTtcclxud2luZG93Ll9fTVNGVF9TREsuSGVscGVycy5leHBvc2VBcGlzKCk7XHJcbiJdLCJuYW1lcyI6WyJTdGF0ZSIsInN0YXRlIiwiZ2V0dGVyIiwiR2V0dGVycyIsInJlZHVjZXIiLCJSZWR1Y2VycyIsIl9hIiwiUmVwbGF5QWxsRXZlbnRzIiwiUmVwbGF5TGF0ZXN0RXZlbnQiLCJTa2lwRXZlbnRSZXBsYXkiLCJzdG9yZSIsIkV2ZW50QnVzIiwiZW51bXMuRXZlbnRzIl0sIm1hcHBpbmdzIjoiOzs7OztJQUFBO0lBQ0E7QUFDQTtJQUNBO0lBQ0E7QUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0lBQ0EsSUFBSSxhQUFhLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ25DLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0lBQ3pDLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNwRixRQUFRLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMxRyxJQUFJLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUM7QUFDRjtJQUNPLFNBQVMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDaEMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEtBQUssSUFBSTtJQUM3QyxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsc0JBQXNCLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLCtCQUErQixDQUFDLENBQUM7SUFDbEcsSUFBSSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hCLElBQUksU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQzNDLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RixDQUFDO0FBQ0Q7SUFDTyxJQUFJLFFBQVEsR0FBRyxXQUFXO0lBQ2pDLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksU0FBUyxRQUFRLENBQUMsQ0FBQyxFQUFFO0lBQ3JELFFBQVEsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDN0QsWUFBWSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLFlBQVksS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekYsU0FBUztJQUNULFFBQVEsT0FBTyxDQUFDLENBQUM7SUFDakIsTUFBSztJQUNMLElBQUksT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMzQyxFQUFDO0FBNEJEO0lBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0lBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0lBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUN0RyxRQUFRLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRTtJQUN0SCxRQUFRLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM5RSxLQUFLLENBQUMsQ0FBQztJQUNQLENBQUM7QUFDRDtJQUNPLFNBQVMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUU7SUFDM0MsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JILElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLE9BQU8sTUFBTSxLQUFLLFVBQVUsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFdBQVcsRUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0osSUFBSSxTQUFTLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLFVBQVUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUN0RSxJQUFJLFNBQVMsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUN0QixRQUFRLElBQUksQ0FBQyxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsaUNBQWlDLENBQUMsQ0FBQztJQUN0RSxRQUFRLE9BQU8sQ0FBQyxFQUFFLElBQUk7SUFDdEIsWUFBWSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6SyxZQUFZLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEQsWUFBWSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU07SUFDOUMsZ0JBQWdCLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUN4RSxnQkFBZ0IsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztJQUNqRSxnQkFBZ0IsS0FBSyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsU0FBUztJQUNqRSxnQkFBZ0I7SUFDaEIsb0JBQW9CLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUU7SUFDaEksb0JBQW9CLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDMUcsb0JBQW9CLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtJQUN6RixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENB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
