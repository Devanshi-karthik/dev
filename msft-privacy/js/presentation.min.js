(function () {
    'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var ConsentModelType;
    (function (ConsentModelType) {
        ConsentModelType["Explicit"] = "Explicit";
        ConsentModelType["Implicit"] = "Implicit";
    })(ConsentModelType || (ConsentModelType = {}));
    var PublicEvents;
    (function (PublicEvents) {
        PublicEvents["ConsentChanged"] = "ConsentChanged";
        PublicEvents["ShowConsentNotice"] = "ShowConsentNotice";
        PublicEvents["ShowFirstPage"] = "ShowFirstPage";
        PublicEvents["CloseConsentNotice"] = "CloseConsentNotice";
        PublicEvents["AcceptAll"] = "AcceptAll";
        PublicEvents["RejectAll"] = "RejectAll";
        PublicEvents["ShowTemplate"] = "ShowTemplate";
        PublicEvents["CloseTemplate"] = "CloseTemplate";
        PublicEvents["UpdateConsent"] = "UpdateConsent";
        PublicEvents["AnchorTagClicked"] = "AnchorTagClicked";
        PublicEvents["FetchConfig"] = "FetchConfig";
        PublicEvents["QuestionsFormSubmitWithoutMetaData"] = "QuestionsFormSubmitWithoutMetaData";
        PublicEvents["QuestionsFormSubmit"] = "QuestionsFormSubmit";
        PublicEvents["ShowPreferences"] = "ShowPreferences";
    })(PublicEvents || (PublicEvents = {}));
    var Events;
    (function (Events) {
        Events["Init"] = "Init";
        Events["CoreConsentModelSelected"] = "CoreConsentModelSelected";
        Events["ConfigReady"] = "ConfigReady";
    })(Events || (Events = {}));
    var SDKMode;
    (function (SDKMode) {
        SDKMode["Default"] = "Default";
        SDKMode["HeadLess"] = "HeadLess";
    })(SDKMode || (SDKMode = {}));
    var StyleType;
    (function (StyleType) {
        StyleType["Url"] = "Url";
        StyleType["Text"] = "Text";
    })(StyleType || (StyleType = {}));
    var Preference;
    (function (Preference) {
        Preference["OFF"] = "0";
        Preference["ON"] = "1";
    })(Preference || (Preference = {}));
    var Cookie;
    (function (Cookie) {
        Cookie["Consent"] = "msft-consent";
    })(Cookie || (Cookie = {}));
    var RegisteredDivType;
    (function (RegisteredDivType) {
        RegisteredDivType["Script"] = "script";
        RegisteredDivType["IFrame"] = "iframe";
    })(RegisteredDivType || (RegisteredDivType = {}));
    var NoticeType;
    (function (NoticeType) {
        NoticeType["TrackerCategory"] = "trackerCategory";
    })(NoticeType || (NoticeType = {}));
    var ErrorStrings;
    (function (ErrorStrings) {
        ErrorStrings["TemplateError"] = "<b>There is something wrong with template. Please check logs.</b>";
    })(ErrorStrings || (ErrorStrings = {}));
    var IntervalUnits;
    (function (IntervalUnits) {
        IntervalUnits["day"] = "day";
        IntervalUnits["week"] = "week";
        IntervalUnits["month"] = "month";
        IntervalUnits["year"] = "year";
    })(IntervalUnits || (IntervalUnits = {}));
    var QuestionType;
    (function (QuestionType) {
        QuestionType["Text"] = "Text";
        QuestionType["Email"] = "Email";
        QuestionType["Radio"] = "Radio";
        QuestionType["MultiSelect"] = "MultiSelect";
        QuestionType["Select"] = "Select";
        QuestionType["Date"] = "Date";
        QuestionType["PhoneNumber"] = "PhoneNumber";
        QuestionType["CreditCard"] = "CreditCard";
        QuestionType["Number"] = "Number";
        QuestionType["MultiLineText"] = "multiLineText";
    })(QuestionType || (QuestionType = {}));
    var QuestionValidation;
    (function (QuestionValidation) {
        QuestionValidation["Required"] = "required";
    })(QuestionValidation || (QuestionValidation = {}));
    var QuestionField;
    (function (QuestionField) {
        QuestionField["Question"] = "question";
        QuestionField["Placeholder"] = "placeholder";
        QuestionField["Options"] = "options";
    })(QuestionField || (QuestionField = {}));
    var ModelKind;
    (function (ModelKind) {
        ModelKind["WebConsentModel"] = "WebConsentModel";
        ModelKind["QuestionModel"] = "DSRSubmissionModel";
    })(ModelKind || (ModelKind = {}));
    var Template;
    (function (Template) {
        Template["Preferences"] = "Preferences";
    })(Template || (Template = {}));

    var ObjectUtils = /** @class */ (function () {
        function ObjectUtils() {
        }
        ObjectUtils.isObject = function (item) {
            return item && typeof item === 'object' && !Array.isArray(item);
        };
        ObjectUtils.mergeDeep = function (target) {
            var _a, _b;
            var sources = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                sources[_i - 1] = arguments[_i];
            }
            if (!sources.length)
                return target;
            var source = sources.shift();
            if (this.isObject(target) && this.isObject(source)) {
                for (var key in source) {
                    if (this.isObject(source[key])) {
                        if (!target[key])
                            Object.assign(target, (_a = {}, _a[key] = {}, _a));
                        this.mergeDeep(target[key], source[key]);
                    }
                    else {
                        Object.assign(target, (_b = {}, _b[key] = source[key], _b));
                    }
                }
            }
            return this.mergeDeep.apply(this, __spreadArray([target], __read(sources), false));
        };
        return ObjectUtils;
    }());

    var SDKModules;
    (function (SDKModules) {
        SDKModules["PRESENTATION"] = "presentation";
        SDKModules["PREVIEW"] = "preview";
        SDKModules["CONFIG"] = "config";
        SDKModules["HANDLEBAR"] = "handlebar";
        SDKModules["PROXY"] = "proxy";
        SDKModules["DSR"] = "dsr";
    })(SDKModules || (SDKModules = {}));
    var SDKModulesPath;
    (function (SDKModulesPath) {
        SDKModulesPath["PRESENTATION"] = "$jsRootPath/msft-privacy/js/presentation.min.js";
        SDKModulesPath["PREVIEW"] = "$jsRootPath/msft-privacy/js/preview.min.js";
        SDKModulesPath["HANDLEBAR"] = "$jsRootPath/msft-privacy/js/vendor/handlebars.min.js";
        SDKModulesPath["PROXY"] = "$jsRootPath/msft-privacy/js/proxy.min.js";
        SDKModulesPath["DSR"] = "$jsRootPath/msft-privacy/js/dsr.min.js";
    })(SDKModulesPath || (SDKModulesPath = {}));
    var SDKModulesSourceVariable;
    (function (SDKModulesSourceVariable) {
        SDKModulesSourceVariable["PRESENTATION"] = "msft-presentation.js";
        SDKModulesSourceVariable["HANDLEBAR"] = "msft-handlebars.js";
        SDKModulesSourceVariable["PROXY"] = "msft-proxy.js";
        SDKModulesSourceVariable["DSR"] = "dsr.js";
    })(SDKModulesSourceVariable || (SDKModulesSourceVariable = {}));
    var ModuleSourceType;
    (function (ModuleSourceType) {
        ModuleSourceType["PATH"] = "path";
        ModuleSourceType["VARIABLE"] = "variable";
    })(ModuleSourceType || (ModuleSourceType = {}));

    var State = /** @class */ (function () {
        function State(state) {
            this.state = state || {
                config: {},
                debug: {
                    logs: [],
                    events: [],
                },
                custom: {},
            };
        }
        return State;
    }());

    var Getters = /** @class */ (function (_super) {
        __extends(Getters, _super);
        function Getters(state) {
            return _super.call(this, state) || this;
        }
        Object.defineProperty(Getters.prototype, "debugInfo", {
            get: function () {
                return this.state.debug;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "config", {
            get: function () {
                return this.state.config;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "userConsent", {
            get: function () {
                return this.state.custom.userConsent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isHeadless", {
            // TODO: Implement below getters
            get: function () {
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isPreviewMode", {
            get: function () {
                var _a;
                return ((_a = this.state.config.initConfig) === null || _a === void 0 ? void 0 : _a.preview) || false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isActionDisabled", {
            get: function () {
                var _a;
                return ((_a = this.state.config.initConfig) === null || _a === void 0 ? void 0 : _a.disableActions) || false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "isLivePreviewMode", {
            get: function () {
                var _a;
                return ((_a = window.parent) === null || _a === void 0 ? void 0 : _a.name) === 'ConsentLivePreview';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "presentationVariable", {
            get: function () {
                return SDKModulesSourceVariable.PRESENTATION;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "handlebarVariable", {
            get: function () {
                return SDKModulesSourceVariable.HANDLEBAR;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "proxyVariable", {
            get: function () {
                return SDKModulesSourceVariable.PROXY;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Getters.prototype, "dsrVariable", {
            get: function () {
                return SDKModulesSourceVariable.DSR;
            },
            enumerable: false,
            configurable: true
        });
        return Getters;
    }(State));

    var Reducers = /** @class */ (function (_super) {
        __extends(Reducers, _super);
        function Reducers(state) {
            return _super.call(this, state) || this;
        }
        Reducers.prototype.saveDebugInfo = function (_a) {
            var event = _a.event, log = _a.log;
            if (event) {
                this.state.debug.events.push(event);
            }
            if (log) {
                this.state.debug.logs.push(log);
            }
        };
        Reducers.prototype.setUserConsent = function (consent) {
            this.state.custom.userConsent = consent;
        };
        Reducers.prototype.setInitConfig = function (initConfig) {
            this.state.config.initConfig = initConfig;
        };
        return Reducers;
    }(State));

    var state = new State().state;
    var getter = new Getters(state);
    var reducer = new Reducers(state);
    var Store = {
        getters: getter,
        reducers: reducer,
        addReducers: function (reducers) {
            this.reducers = ObjectUtils.mergeDeep(this.reducers, reducers);
        },
        addGetters: function (getters) {
            Object.defineProperties(this.getters, Object.getOwnPropertyDescriptors(getters.prototype));
        },
    };

    var LogLevels;
    (function (LogLevels) {
        LogLevels[LogLevels["INFO"] = 0] = "INFO";
        LogLevels[LogLevels["WARN"] = 1] = "WARN";
        LogLevels[LogLevels["ERROR"] = 2] = "ERROR";
    })(LogLevels || (LogLevels = {}));

    var ConsoleLogger = /** @class */ (function () {
        function ConsoleLogger() {
        }
        /**
         * Browser's console logger plugin.
         *
         * @param {LogLevels} level Log level
         * @param {string} message Log message
         */
        ConsoleLogger.log = function (level, message) {
            switch (level) {
                case LogLevels.WARN:
                    console.warn(message);
                    break;
                case LogLevels.ERROR:
                    console.error(message);
                    break;
                default:
                    {
                        console.log(message);
                    }
                    break;
            }
        };
        return ConsoleLogger;
    }());

    /**
     * @typedef {import("core/types/interfaces").IGenericObject} IGenericObject
     */
    var Logger = /** @class */ (function () {
        function Logger() {
        }
        /**
         * Info logs
         *
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         */
        Logger.info = function (message, data) {
            Logger.log(LogLevels.INFO, message, data);
        };
        /**
         * Warning logs
         *
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         */
        Logger.warn = function (message, data) {
            Logger.log(LogLevels.WARN, message, data);
        };
        /**
         * Error logs
         *
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         */
        Logger.error = function (message, data) {
            Logger.log(LogLevels.ERROR, message, data);
        };
        /**
         * Logs the message using the plugin based in level.
         *
         * @param {LogLevels} logLevel Log level
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         */
        Logger.log = function (logLevel, message, data) {
            var formattedMessage = Logger.formatLogMessage(logLevel, message, data);
            Store.reducers.saveDebugInfo({ log: formattedMessage });
            ConsoleLogger.log(logLevel, formattedMessage);
        };
        /**
         * Formats the logger message.
         *
         * @param {LogLevels} logLevel Log level
         * @param {string} message Logger message
         * @param {IGenericObject} data Additional details to log
         * @returns {string} Formatted logger message
         */
        Logger.formatLogMessage = function (logLevel, message, data) {
            var stringifiedData = data ? "| ".concat(JSON.stringify(data)) : '';
            return "[".concat(LogLevels[logLevel], "] ").concat(message, " ").concat(stringifiedData);
        };
        return Logger;
    }());

    var TemplateHandler = /** @class */ (function () {
        function TemplateHandler() {
            TemplateHandler.registerShowTemplateHandlers();
        }
        /**
         * Register event handlers to open/close different templates
         */
        TemplateHandler.registerShowTemplateHandlers = function () {
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.ShowConsentNotice, TemplateHandler.showFirstPage);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.CloseConsentNotice, TemplateHandler.hideConsentNotice);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.Events.Init, TemplateHandler.saveStylesOnInit);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.ShowTemplate, TemplateHandler.showTemplate);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.CloseTemplate, TemplateHandler.closeTemplate);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.Events.ConfigReady, TemplateHandler.init);
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.ShowPreferences, TemplateHandler.showPreferences);
        };
        TemplateHandler.showPreferences = function () {
            try {
                TemplateHandler.showTemplate({ templateId: Template.Preferences });
            }
            catch (e) {
                TemplateHandler.showFirstPage();
            }
        };
        /**
         * Show template
         *
         * @param  {import("core/types/interfaces").IGenericObject} payload payload data
         */
        TemplateHandler.showTemplate = function (_a) {
            var templateId = _a.templateId;
            if (window.__MSFT_SDK.Store.getters.components &&
                window.__MSFT_SDK.Store.getters.components[templateId]) {
                var consentModel = window.__MSFT_SDK.Store.getters.currentModel;
                TemplateHandler.showTemplateInIFrame(window.__MSFT_SDK.Store.getters.components[templateId], templateId, [
                    {
                        type: StyleType.Text,
                        value: (consentModel === null || consentModel === void 0 ? void 0 : consentModel.layouts[0].css) || '',
                    },
                ], TemplateHandler.getParentElement(templateId));
            }
            else {
                throw new Error("Template : ".concat(templateId, " not found."));
            }
        };
        /**
         * Hide template
         *
         * @param  {import("core/types/interfaces").IGenericObject} payload payload data
         */
        TemplateHandler.closeTemplate = function (_a) {
            var templateId = _a.templateId;
            TemplateHandler.closeIFrame(templateId);
        };
        /**
         * Save styles passed by user in window.__MSFT_SDK.Store
         *
         * @param  {import("core/types/interfaces").IInitConfig} config init config
         */
        TemplateHandler.saveStylesOnInit = function (config) {
            if (config.styles) {
                window.__MSFT_SDK.Logger.info('user provided styles persisted to window.__MSFT_SDK.Store.');
                window.__MSFT_SDK.Store.reducers.setStyles(config.styles);
            }
        };
        TemplateHandler.getTemplateData = function (consentModel) {
            var groupedTranslations = window.__MSFT_SDK.Store.getters.translations;
            var modelName = consentModel.name;
            var data = {};
            data[NoticeType.TrackerCategory] = [];
            var trackerCategories = new Set();
            var addTrackerCategories = new Set();
            if (consentModel.kind === ModelKind.WebConsentModel) {
                consentModel.trackerCategories.forEach(function (category) {
                    trackerCategories.add(category.categoryName);
                });
            }
            else if (consentModel.kind === ModelKind.QuestionModel) {
                data.captcha = consentModel.captcha;
            }
            groupedTranslations.forEach(function (groupedTranslation) {
                return Object.keys(groupedTranslation).forEach(function (namespace) {
                    var _a;
                    if (namespace === modelName) {
                        data = __assign(__assign({}, data), groupedTranslation[namespace]);
                    }
                    else if (consentModel.kind === ModelKind.QuestionModel) {
                        data = __assign(__assign({}, data), (_a = {}, _a[namespace] = groupedTranslation[namespace], _a));
                    }
                    else if (trackerCategories.has(namespace) &&
                        !addTrackerCategories.has(namespace)) {
                        var categoryTranslation = __assign(__assign({}, groupedTranslation[namespace]), { name: namespace });
                        data[NoticeType.TrackerCategory].push(categoryTranslation);
                        addTrackerCategories.add(namespace);
                    }
                });
            });
            data['msft-script-open'] = '<script>';
            data['msft-script-close'] = '</script>';
            Logger.info('getTemplate data invoked', { consentModel: consentModel, data: data });
            return __assign(__assign({}, data), window.__MSFT_SDK.Store.getters.templateData);
        };
        /**
         * Perform all necessary steps like replacing placeholders in
         * templates during init.
         */
        TemplateHandler.init = function () {
            if (window.__MSFT_SDK.Store.getters.currentModel === undefined ||
                window.__MSFT_SDK.Store.getters.template === undefined) {
                window.__MSFT_SDK.Logger.warn('Cannot call init before config is ready.');
                return;
            }
            var consentModel = window.__MSFT_SDK.Store.getters.currentModel;
            var template = window.__MSFT_SDK.Store.getters.template;
            var data = TemplateHandler.getTemplateData(consentModel);
            template.pages.forEach(function (page) {
                var _a;
                var templateString;
                try {
                    var template_1 = window.Handlebars.compile(page.content.replaceAll('{{{questions}}}', data.questions));
                    templateString = template_1(data);
                }
                catch (e) {
                    window.__MSFT_SDK.Logger.error(e.message, e);
                    templateString = ErrorStrings.TemplateError;
                }
                window.__MSFT_SDK.Store.reducers.setComponents(__assign(__assign({}, window.__MSFT_SDK.Store.getters.components), (_a = {}, _a[page.name] = templateString, _a)));
            });
            window.__MSFT_SDK.Logger.info('Components updated');
            TemplateHandler.initialized = true;
            window.__MSFT_SDK.EventBus.on(window.__MSFT_SDK.enums.PublicEvents.ShowFirstPage, TemplateHandler.showFirstPage);
        };
        /**
         * Show Consent notice template
         */
        TemplateHandler.showFirstPage = function () {
            var _a, _b;
            if (!TemplateHandler.initialized) {
                TemplateHandler.init();
            }
            var consentModel = window.__MSFT_SDK.Store.getters.currentModel;
            if (consentModel === undefined) {
                window.__MSFT_SDK.Logger.warn('Cannot call init before consent model is selected.');
                return;
            }
            var mode = consentModel.layouts[0].mode;
            var initComponent = (_b = (_a = window.__MSFT_SDK.Store.getters.template) === null || _a === void 0 ? void 0 : _a.modes.find(function (m) { return m.name === mode; })) === null || _b === void 0 ? void 0 : _b.initPage;
            if (window.__MSFT_SDK.Store.getters.components === undefined ||
                initComponent === undefined ||
                window.__MSFT_SDK.Store.getters.components[initComponent] === undefined) {
                window.__MSFT_SDK.Logger.error('Notice template not found.');
                return;
            }
            var template = window.__MSFT_SDK.Store.getters.components[initComponent];
            TemplateHandler.showTemplateInIFrame(template, initComponent, [
                {
                    type: StyleType.Text,
                    value: consentModel.layouts[0].css || '',
                },
            ], TemplateHandler.getParentElement(initComponent));
        };
        TemplateHandler.getParentElement = function (templateId) {
            var _a;
            var parentElementId = (((_a = window.__MSFT_SDK.Store.getters.config.initConfig) === null || _a === void 0 ? void 0 : _a.componentParentMap) ||
                window.__MSFT_SDK.Store.getters.templateParentMap)[templateId];
            if (parentElementId) {
                return document.getElementById(parentElementId);
            }
            return null;
        };
        /**
         * Adds template to iframe and append it to dom
         *
         * @param  {string} template template to add
         * @param  {string} iframeId iframe id
         * @param  {IStyle[]} styles styles
         * @param  {HTMLElement|null} parentElement if iframe should be added to a specific element instead of body
         */
        TemplateHandler.showTemplateInIFrame = function (template, iframeId, styles, parentElement) {
            if (styles === void 0) { styles = []; }
            var iframeElement = document.getElementById(iframeId);
            if (iframeElement) {
                Logger.info("Template: ".concat(iframeId, " is already open."));
            }
            else {
                if (template === ErrorStrings.TemplateError &&
                    (!window.__MSFT_SDK.Store.getters.isLivePreviewMode ||
                        !window.__MSFT_SDK.Store.getters.isPreviewMode)) {
                    return;
                }
                var data = {
                    origin: window.origin,
                };
                template =
                    "<script>var msftData = ".concat(JSON.stringify(data), "</script>") +
                        "<script>".concat(window.__MSFT_SDK.Store.getters.proxyJS, "</script>") +
                        template;
                window.__MSFT_SDK.Utils.IFrameUtils.createIFrame(template, iframeId, parentElement, __spreadArray(__spreadArray([], __read(styles), false), __read((window.__MSFT_SDK.Store.getters.styles || [])), false));
            }
        };
        /**
         * Hide consent notice iframe
         */
        TemplateHandler.hideConsentNotice = function () {
            var _a, _b;
            var consentModel = window.__MSFT_SDK.Store.getters.currentModel;
            if (consentModel === undefined) {
                window.__MSFT_SDK.Logger.warn('Cannot call hideConsentNotice before consent model is selected.');
                return;
            }
            var mode = consentModel.layouts[0].mode;
            var initComponent = (_b = (_a = window.__MSFT_SDK.Store.getters.template) === null || _a === void 0 ? void 0 : _a.modes.find(function (m) { return m.name === mode; })) === null || _b === void 0 ? void 0 : _b.initPage;
            initComponent && TemplateHandler.closeIFrame(initComponent);
        };
        /**
         * Set iframe display to none
         *
         * @param  {string} iframeId id of iframe element
         */
        TemplateHandler.closeIFrame = function (iframeId) {
            var _a;
            var iframeElement = document.getElementById(iframeId);
            (_a = iframeElement === null || iframeElement === void 0 ? void 0 : iframeElement.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(iframeElement);
        };
        TemplateHandler.initialized = false;
        return TemplateHandler;
    }());

    window.onmessage = function (e) {
        var _a;
        var _b;
        if (e.origin === 'null') {
            if (window.__MSFT_SDK.Store.getters.isActionDisabled &&
                e.data.method === 'trigger') {
                return;
            }
            var response = (_a = window.MSFTConsent)[e.data.method].apply(_a, __spreadArray([], __read(e.data.params), false));
            if (e.data.responseId) {
                (_b = e.source) === null || _b === void 0 ? void 0 : _b.postMessage(__assign(__assign({}, e.data), { response: response }), { targetOrigin: '*' });
            }
        }
    };
    window.__MSFT_SDK.EventBus.on(PublicEvents.AnchorTagClicked, function (_a) {
        var attributes = _a.attributes;
        var aTag = document.createElement('a');
        Object.keys(attributes).forEach(function (attrName) {
            aTag.setAttribute(attrName, attributes[attrName]);
        });
        aTag.click();
    });
    new TemplateHandler();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
