(function () {
    'use strict';

    var ListenerEvents;
    (function (ListenerEvents) {
        ListenerEvents["INIT_CONFIG"] = "initConfig";
        ListenerEvents["DISCONNECT"] = "disconnect";
    })(ListenerEvents || (ListenerEvents = {}));
    var DispatcherEvents;
    (function (DispatcherEvents) {
        DispatcherEvents["CONNECTED"] = "connected";
    })(DispatcherEvents || (DispatcherEvents = {}));

    var PostMessage = /** @class */ (function () {
        function PostMessage(callback) {
            this.source = null;
            this.origin = '';
            this.regExp = new RegExp('^https://(ci.|ms.){0,1}web.purview.azure(-test){0,1}.com/resource/.+');
            this.callback = callback;
            this.listen();
        }
        PostMessage.prototype.send = function (details) {
            var _a;
            (_a = this.source) === null || _a === void 0 ? void 0 : _a.postMessage(details, { targetOrigin: this.origin });
        };
        PostMessage.prototype.listen = function () {
            var _this = this;
            window.addEventListener('message', function (event) {
                _this.onMessageReceived(event);
            });
        };
        PostMessage.prototype.onMessageReceived = function (event) {
            if (this.regExp.test(event.origin) ||
                event.origin === 'https://localhost:3000') {
                this.source = this.source || event.source;
                this.origin = event.origin;
                this.callback(event.data);
            }
        };
        return PostMessage;
    }());

    var Messenger = /** @class */ (function () {
        function Messenger() {
        }
        Messenger.send = function (payload) {
            Messenger.messengerPlugin.send(payload);
        };
        Messenger.listen = function (eventName, callback) {
            Messenger.callbacksMap[eventName] = Messenger.callbacksMap[eventName] || [];
            Messenger.callbacksMap[eventName].push(callback);
        };
        Messenger.getMessangerPlugin = function () {
            return Messenger.messengerPlugin;
        };
        Messenger.onMessage = function (_a) {
            var _b;
            var event = _a.event, value = _a.value;
            (_b = Messenger.callbacksMap[event]) === null || _b === void 0 ? void 0 : _b.forEach(function (callback) { return callback(value); });
        };
        Messenger.callbacksMap = {};
        Messenger.messengerPlugin = new PostMessage(Messenger.onMessage);
        return Messenger;
    }());

    var _a$1;
    var dispatcher = (_a$1 = {},
        _a$1[DispatcherEvents.CONNECTED] = function () {
            Messenger.send({
                event: DispatcherEvents.CONNECTED,
            });
        },
        _a$1);

    var _a;
    var listeners = (_a = {},
        _a[ListenerEvents.INIT_CONFIG] = function (initConfig) {
            window.__MSFT_SDK.initConsent(initConfig);
            dispatcher.connected();
        },
        _a[ListenerEvents.DISCONNECT] = function () {
            window.close();
        },
        _a);
    Object.keys(listeners).forEach(function (event) {
        Messenger.listen(event, listeners[event]);
    });

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlldy5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvcHJldmlldy9lbnVtcy9FdmVudHNFbnVtLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9wcmV2aWV3L3BsdWdpbnMvUG9zdE1lc3NhZ2UudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL3ByZXZpZXcvTWVzc2VuZ2VyLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9wcmV2aWV3L0Rpc3BhdGNoZXJzLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9wcmV2aWV3L0xpc3RlbmVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBMaXN0ZW5lckV2ZW50cyB7XHJcbiAgSU5JVF9DT05GSUcgPSAnaW5pdENvbmZpZycsXHJcbiAgRElTQ09OTkVDVCA9ICdkaXNjb25uZWN0JyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRGlzcGF0Y2hlckV2ZW50cyB7XHJcbiAgQ09OTkVDVEVEID0gJ2Nvbm5lY3RlZCcsXHJcbn1cclxuIiwiaW1wb3J0IHsgSUludGVybmFsTWVzc2VuZ2VyQ2FsbGJhY2sgfSBmcm9tICcuLi9pbnRlcmZhY2UvSU1lc3Nlbmdlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0TWVzc2FnZSB7XHJcbiAgcHJpdmF0ZSBzb3VyY2U6IE1lc3NhZ2VFdmVudFNvdXJjZSB8IG51bGwgPSBudWxsO1xyXG4gIHByaXZhdGUgb3JpZ2luID0gJyc7XHJcbiAgcHJpdmF0ZSByZWdFeHAgPSBuZXcgUmVnRXhwKFxyXG4gICAgJ15odHRwczovLyhjaS58bXMuKXswLDF9d2ViLnB1cnZpZXcuYXp1cmUoLXRlc3QpezAsMX0uY29tL3Jlc291cmNlLy4rJyxcclxuICApO1xyXG4gIHByaXZhdGUgY2FsbGJhY2s6IElJbnRlcm5hbE1lc3NlbmdlckNhbGxiYWNrO1xyXG5cclxuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogSUludGVybmFsTWVzc2VuZ2VyQ2FsbGJhY2spIHtcclxuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIHRoaXMubGlzdGVuKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2VuZChkZXRhaWxzOiBhbnkpIHtcclxuICAgIHRoaXMuc291cmNlPy5wb3N0TWVzc2FnZShkZXRhaWxzLCB7IHRhcmdldE9yaWdpbjogdGhpcy5vcmlnaW4gfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGxpc3RlbigpIHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZXZlbnQgPT4ge1xyXG4gICAgICB0aGlzLm9uTWVzc2FnZVJlY2VpdmVkKGV2ZW50KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG9uTWVzc2FnZVJlY2VpdmVkKGV2ZW50OiBhbnkpIHtcclxuICAgIGlmIChcclxuICAgICAgdGhpcy5yZWdFeHAudGVzdChldmVudC5vcmlnaW4pIHx8XHJcbiAgICAgIGV2ZW50Lm9yaWdpbiA9PT0gJ2h0dHBzOi8vbG9jYWxob3N0OjMwMDAnXHJcbiAgICApIHtcclxuICAgICAgdGhpcy5zb3VyY2UgPSB0aGlzLnNvdXJjZSB8fCBldmVudC5zb3VyY2U7XHJcbiAgICAgIHRoaXMub3JpZ2luID0gZXZlbnQub3JpZ2luO1xyXG4gICAgICB0aGlzLmNhbGxiYWNrKGV2ZW50LmRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBMaXN0ZW5lckV2ZW50cyB9IGZyb20gJy4vZW51bXMvRXZlbnRzRW51bSc7XHJcbmltcG9ydCB7XHJcbiAgSUNhbGxiYWNrc01hcCxcclxuICBJTGlzdGVuZXJDYWxsYmFjayxcclxuICBJSW50ZXJuYWxNZXNzZW5nZXJDYWxsYmFja0RhdGEsXHJcbn0gZnJvbSAnLi9pbnRlcmZhY2UvSU1lc3Nlbmdlcic7XHJcbmltcG9ydCBQb3N0TWVzc2FnZSBmcm9tICcuL3BsdWdpbnMvUG9zdE1lc3NhZ2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVzc2VuZ2VyIHtcclxuICBzdGF0aWMgY2FsbGJhY2tzTWFwOiBJQ2FsbGJhY2tzTWFwID0ge307XHJcbiAgc3RhdGljIG1lc3NlbmdlclBsdWdpbiA9IG5ldyBQb3N0TWVzc2FnZShNZXNzZW5nZXIub25NZXNzYWdlKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBzZW5kKHBheWxvYWQ6IElJbnRlcm5hbE1lc3NlbmdlckNhbGxiYWNrRGF0YSkge1xyXG4gICAgTWVzc2VuZ2VyLm1lc3NlbmdlclBsdWdpbi5zZW5kKHBheWxvYWQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBsaXN0ZW4oZXZlbnROYW1lOiBMaXN0ZW5lckV2ZW50cywgY2FsbGJhY2s6IElMaXN0ZW5lckNhbGxiYWNrKSB7XHJcbiAgICBNZXNzZW5nZXIuY2FsbGJhY2tzTWFwW2V2ZW50TmFtZV0gPSBNZXNzZW5nZXIuY2FsbGJhY2tzTWFwW2V2ZW50TmFtZV0gfHwgW107XHJcbiAgICBNZXNzZW5nZXIuY2FsbGJhY2tzTWFwW2V2ZW50TmFtZV0ucHVzaChjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGdldE1lc3NhbmdlclBsdWdpbigpIHtcclxuICAgIHJldHVybiBNZXNzZW5nZXIubWVzc2VuZ2VyUGx1Z2luO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgb25NZXNzYWdlKHsgZXZlbnQsIHZhbHVlIH06IElJbnRlcm5hbE1lc3NlbmdlckNhbGxiYWNrRGF0YSkge1xyXG4gICAgTWVzc2VuZ2VyLmNhbGxiYWNrc01hcFtldmVudF0/LmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2sodmFsdWUpKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRGlzcGF0Y2hlckV2ZW50cyB9IGZyb20gJy4vZW51bXMvRXZlbnRzRW51bSc7XHJcbmltcG9ydCBNZXNzZW5nZXIgZnJvbSAnLi9NZXNzZW5nZXInO1xyXG5cclxudHlwZSBJRGlzcGF0Y2hlcnMgPSB7XHJcbiAgW2V2ZW50TmFtZSBpbiBEaXNwYXRjaGVyRXZlbnRzXTogKCkgPT4gdm9pZDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBkaXNwYXRjaGVyOiBJRGlzcGF0Y2hlcnMgPSB7XHJcbiAgW0Rpc3BhdGNoZXJFdmVudHMuQ09OTkVDVEVEXTogKCkgPT4ge1xyXG4gICAgTWVzc2VuZ2VyLnNlbmQoe1xyXG4gICAgICBldmVudDogRGlzcGF0Y2hlckV2ZW50cy5DT05ORUNURUQsXHJcbiAgICB9KTtcclxuICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBkaXNwYXRjaGVyIH0gZnJvbSAnLi9EaXNwYXRjaGVycyc7XHJcbmltcG9ydCB7IExpc3RlbmVyRXZlbnRzIH0gZnJvbSAnLi9lbnVtcy9FdmVudHNFbnVtJztcclxuaW1wb3J0IHsgSUxpc3RlbmVyQ2FsbGJhY2sgfSBmcm9tICcuL2ludGVyZmFjZS9JTWVzc2VuZ2VyJztcclxuaW1wb3J0IE1lc3NlbmdlciBmcm9tICcuL01lc3Nlbmdlcic7XHJcblxyXG50eXBlIElMaXN0ZW5lcnMgPSB7XHJcbiAgW2V2ZW50TmFtZSBpbiBMaXN0ZW5lckV2ZW50c106IElMaXN0ZW5lckNhbGxiYWNrO1xyXG59O1xyXG5cclxuY29uc3QgbGlzdGVuZXJzOiBJTGlzdGVuZXJzID0ge1xyXG4gIFtMaXN0ZW5lckV2ZW50cy5JTklUX0NPTkZJR106IChpbml0Q29uZmlnOiBJSW5pdENvbmZpZykgPT4ge1xyXG4gICAgd2luZG93Ll9fTVNGVF9TREsuaW5pdENvbnNlbnQoaW5pdENvbmZpZyk7XHJcbiAgICBkaXNwYXRjaGVyLmNvbm5lY3RlZCgpO1xyXG4gIH0sXHJcbiAgW0xpc3RlbmVyRXZlbnRzLkRJU0NPTk5FQ1RdOiAoKSA9PiB7XHJcbiAgICB3aW5kb3cuY2xvc2UoKTtcclxuICB9LFxyXG59O1xyXG5cclxuKE9iamVjdC5rZXlzKGxpc3RlbmVycykgYXMgTGlzdGVuZXJFdmVudHNbXSkuZm9yRWFjaChldmVudCA9PiB7XHJcbiAgTWVzc2VuZ2Vy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
