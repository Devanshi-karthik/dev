(function () {
    'use strict';

    var ListenerEvents;
    (function (ListenerEvents) {
        ListenerEvents["INIT_CONFIG"] = "initConfig";
        ListenerEvents["DISCONNECT"] = "disconnect";
    })(ListenerEvents || (ListenerEvents = {}));
    var DispatcherEvents;
    (function (DispatcherEvents) {
        DispatcherEvents["CONNECTED"] = "connected";
    })(DispatcherEvents || (DispatcherEvents = {}));

    var PostMessage = /** @class */ (function () {
        function PostMessage(callback) {
            this.source = null;
            this.origin = '';
            this.regExp = new RegExp('^https://(ci.|ms.){0,1}web.purview.azure(-test){0,1}.com/resource/.+');
            this.listen(callback);
        }
        PostMessage.prototype.send = function (details) {
            var _a;
            (_a = this.source) === null || _a === void 0 ? void 0 : _a.postMessage(details, { targetOrigin: this.origin });
        };
        PostMessage.prototype.listen = function (callback) {
            var _this = this;
            window.addEventListener('message', function (event) {
                if (_this.regExp.test(event.origin) ||
                    event.origin === 'https://localhost:3000') {
                    _this.source = _this.source || event.source;
                    _this.origin = event.origin;
                    callback(event.data);
                }
            });
        };
        return PostMessage;
    }());

    var Messenger = /** @class */ (function () {
        function Messenger() {
        }
        Messenger.send = function (payload) {
            Messenger.messengerPlugin.send(payload);
        };
        Messenger.listen = function (eventName, callback) {
            Messenger.callbacksMap[eventName] = Messenger.callbacksMap[eventName] || [];
            Messenger.callbacksMap[eventName].push(callback);
        };
        Messenger.onMessage = function (_a) {
            var _b;
            var event = _a.event, value = _a.value;
            (_b = Messenger.callbacksMap[event]) === null || _b === void 0 ? void 0 : _b.forEach(function (callback) { return callback(value); });
        };
        Messenger.callbacksMap = {};
        Messenger.messengerPlugin = new PostMessage(Messenger.onMessage);
        return Messenger;
    }());

    var _a$1;
    var dispatcher = (_a$1 = {},
        _a$1[DispatcherEvents.CONNECTED] = function () {
            Messenger.send({
                event: DispatcherEvents.CONNECTED,
            });
        },
        _a$1);

    var _a;
    var listeners = (_a = {},
        _a[ListenerEvents.INIT_CONFIG] = function (initConfig) {
            window.__MSFT_SDK.initConsent(initConfig);
            dispatcher.connected();
        },
        _a[ListenerEvents.DISCONNECT] = function () {
            window.close();
        },
        _a);
    Object.keys(listeners).forEach(function (event) {
        Messenger.listen(event, listeners[event]);
    });

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlldy5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL1NESy9zcmMvcHJldmlldy9lbnVtcy9FdmVudHNFbnVtLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9wcmV2aWV3L3BsdWdpbnMvUG9zdE1lc3NhZ2UudHMiLCIuLi8uLi8uLi8uLi8uLi9TREsvc3JjL3ByZXZpZXcvTWVzc2VuZ2VyLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9wcmV2aWV3L0Rpc3BhdGNoZXJzLnRzIiwiLi4vLi4vLi4vLi4vLi4vU0RLL3NyYy9wcmV2aWV3L0xpc3RlbmVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBMaXN0ZW5lckV2ZW50cyB7XHJcbiAgSU5JVF9DT05GSUcgPSAnaW5pdENvbmZpZycsXHJcbiAgRElTQ09OTkVDVCA9ICdkaXNjb25uZWN0JyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRGlzcGF0Y2hlckV2ZW50cyB7XHJcbiAgQ09OTkVDVEVEID0gJ2Nvbm5lY3RlZCcsXHJcbn1cclxuIiwiaW1wb3J0IHsgSUludGVybmFsTWVzc2VuZ2VyQ2FsbGJhY2sgfSBmcm9tICcuLi9pbnRlcmZhY2UvSU1lc3Nlbmdlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0TWVzc2FnZSB7XHJcbiAgcHJpdmF0ZSBzb3VyY2U6IE1lc3NhZ2VFdmVudFNvdXJjZSB8IG51bGwgPSBudWxsO1xyXG4gIHByaXZhdGUgb3JpZ2luID0gJyc7XHJcbiAgcHJpdmF0ZSByZWdFeHAgPSBuZXcgUmVnRXhwKFxyXG4gICAgJ15odHRwczovLyhjaS58bXMuKXswLDF9d2ViLnB1cnZpZXcuYXp1cmUoLXRlc3QpezAsMX0uY29tL3Jlc291cmNlLy4rJyxcclxuICApO1xyXG5cclxuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogSUludGVybmFsTWVzc2VuZ2VyQ2FsbGJhY2spIHtcclxuICAgIHRoaXMubGlzdGVuKGNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZW5kKGRldGFpbHM6IGFueSkge1xyXG4gICAgdGhpcy5zb3VyY2U/LnBvc3RNZXNzYWdlKGRldGFpbHMsIHsgdGFyZ2V0T3JpZ2luOiB0aGlzLm9yaWdpbiB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbGlzdGVuKGNhbGxiYWNrOiBJSW50ZXJuYWxNZXNzZW5nZXJDYWxsYmFjaykge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBldmVudCA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLnJlZ0V4cC50ZXN0KGV2ZW50Lm9yaWdpbikgfHxcclxuICAgICAgICBldmVudC5vcmlnaW4gPT09ICdodHRwczovL2xvY2FsaG9zdDozMDAwJ1xyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLnNvdXJjZSA9IHRoaXMuc291cmNlIHx8IGV2ZW50LnNvdXJjZTtcclxuICAgICAgICB0aGlzLm9yaWdpbiA9IGV2ZW50Lm9yaWdpbjtcclxuXHJcbiAgICAgICAgY2FsbGJhY2soZXZlbnQuZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBMaXN0ZW5lckV2ZW50cyB9IGZyb20gJy4vZW51bXMvRXZlbnRzRW51bSc7XHJcbmltcG9ydCB7XHJcbiAgSUNhbGxiYWNrc01hcCxcclxuICBJTGlzdGVuZXJDYWxsYmFjayxcclxuICBJSW50ZXJuYWxNZXNzZW5nZXJDYWxsYmFja0RhdGEsXHJcbn0gZnJvbSAnLi9pbnRlcmZhY2UvSU1lc3Nlbmdlcic7XHJcbmltcG9ydCBQb3N0TWVzc2FnZSBmcm9tICcuL3BsdWdpbnMvUG9zdE1lc3NhZ2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVzc2VuZ2VyIHtcclxuICBzdGF0aWMgY2FsbGJhY2tzTWFwOiBJQ2FsbGJhY2tzTWFwID0ge307XHJcbiAgc3RhdGljIG1lc3NlbmdlclBsdWdpbiA9IG5ldyBQb3N0TWVzc2FnZShNZXNzZW5nZXIub25NZXNzYWdlKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBzZW5kKHBheWxvYWQ6IElJbnRlcm5hbE1lc3NlbmdlckNhbGxiYWNrRGF0YSkge1xyXG4gICAgTWVzc2VuZ2VyLm1lc3NlbmdlclBsdWdpbi5zZW5kKHBheWxvYWQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBsaXN0ZW4oZXZlbnROYW1lOiBMaXN0ZW5lckV2ZW50cywgY2FsbGJhY2s6IElMaXN0ZW5lckNhbGxiYWNrKSB7XHJcbiAgICBNZXNzZW5nZXIuY2FsbGJhY2tzTWFwW2V2ZW50TmFtZV0gPSBNZXNzZW5nZXIuY2FsbGJhY2tzTWFwW2V2ZW50TmFtZV0gfHwgW107XHJcbiAgICBNZXNzZW5nZXIuY2FsbGJhY2tzTWFwW2V2ZW50TmFtZV0ucHVzaChjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBvbk1lc3NhZ2UoeyBldmVudCwgdmFsdWUgfTogSUludGVybmFsTWVzc2VuZ2VyQ2FsbGJhY2tEYXRhKSB7XHJcbiAgICBNZXNzZW5nZXIuY2FsbGJhY2tzTWFwW2V2ZW50XT8uZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayh2YWx1ZSkpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBEaXNwYXRjaGVyRXZlbnRzIH0gZnJvbSAnLi9lbnVtcy9FdmVudHNFbnVtJztcclxuaW1wb3J0IE1lc3NlbmdlciBmcm9tICcuL01lc3Nlbmdlcic7XHJcblxyXG50eXBlIElEaXNwYXRjaGVycyA9IHtcclxuICBbZXZlbnROYW1lIGluIERpc3BhdGNoZXJFdmVudHNdOiAoKSA9PiB2b2lkO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGRpc3BhdGNoZXI6IElEaXNwYXRjaGVycyA9IHtcclxuICBbRGlzcGF0Y2hlckV2ZW50cy5DT05ORUNURURdOiAoKSA9PiB7XHJcbiAgICBNZXNzZW5nZXIuc2VuZCh7XHJcbiAgICAgIGV2ZW50OiBEaXNwYXRjaGVyRXZlbnRzLkNPTk5FQ1RFRCxcclxuICAgIH0pO1xyXG4gIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IGRpc3BhdGNoZXIgfSBmcm9tICcuL0Rpc3BhdGNoZXJzJztcclxuaW1wb3J0IHsgTGlzdGVuZXJFdmVudHMgfSBmcm9tICcuL2VudW1zL0V2ZW50c0VudW0nO1xyXG5pbXBvcnQgeyBJTGlzdGVuZXJDYWxsYmFjayB9IGZyb20gJy4vaW50ZXJmYWNlL0lNZXNzZW5nZXInO1xyXG5pbXBvcnQgTWVzc2VuZ2VyIGZyb20gJy4vTWVzc2VuZ2VyJztcclxuXHJcbnR5cGUgSUxpc3RlbmVycyA9IHtcclxuICBbZXZlbnROYW1lIGluIExpc3RlbmVyRXZlbnRzXTogSUxpc3RlbmVyQ2FsbGJhY2s7XHJcbn07XHJcblxyXG5jb25zdCBsaXN0ZW5lcnM6IElMaXN0ZW5lcnMgPSB7XHJcbiAgW0xpc3RlbmVyRXZlbnRzLklOSVRfQ09ORklHXTogKGluaXRDb25maWc6IElJbml0Q29uZmlnKSA9PiB7XHJcbiAgICB3aW5kb3cuX19NU0ZUX1NESy5pbml0Q29uc2VudChpbml0Q29uZmlnKTtcclxuICAgIGRpc3BhdGNoZXIuY29ubmVjdGVkKCk7XHJcbiAgfSxcclxuICBbTGlzdGVuZXJFdmVudHMuRElTQ09OTkVDVF06ICgpID0+IHtcclxuICAgIHdpbmRvdy5jbG9zZSgpO1xyXG4gIH0sXHJcbn07XHJcblxyXG4oT2JqZWN0LmtleXMobGlzdGVuZXJzKSBhcyBMaXN0ZW5lckV2ZW50c1tdKS5mb3JFYWNoKGV2ZW50ID0+IHtcclxuICBNZXNzZW5nZXIubGlzdGVuKGV2ZW50LCBsaXN0ZW5lcnNbZXZlbnRdKTtcclxufSk7XHJcbiJdLCJuYW1lcyI6WyJfYSJdLCJtYXBwaW5ncyI6Ijs7O0lBQUEsSUFBWSxjQUdYO0lBSEQsV0FBWSxjQUFjO1FBQ3hCLDRDQUEwQixDQUFBO1FBQzFCLDJDQUF5QixDQUFBO0lBQzNCLENBQUMsRUFIVyxjQUFjLEtBQWQsY0FBYyxRQUd6QjtJQUVELElBQVksZ0JBRVg7SUFGRCxXQUFZLGdCQUFnQjtR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
